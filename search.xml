<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>react-navigation</title>
      <link href="/2019/09/18/react-navigation/"/>
      <url>/2019/09/18/react-navigation/</url>
      <content type="html"><![CDATA[<h3 id="4-X安装"><a href="#4-X安装" class="headerlink" title="4.X安装"></a>4.X安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-navigation</span><br><span class="line">yarn add react-native-reanimated react-native-gesture-handler react-native-screens</span><br></pre></td></tr></table></figure><p>if React Native 0.60 and higher</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ios</span><br><span class="line">pod install</span><br><span class="line"><span class="built_in">cd</span> ..</span><br></pre></td></tr></table></figure><h3 id="路由跳转"><a href="#路由跳转" class="headerlink" title="路由跳转"></a>路由跳转</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; View, Text &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createAppContainer &#125; <span class="keyword">from</span> <span class="string">'react-navigation'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createStackNavigator &#125; <span class="keyword">from</span> <span class="string">'react-navigation-stack'</span>;  <span class="comment">//4.x的写法</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;&#123; <span class="attr">flex</span>: <span class="number">1</span>, <span class="attr">alignItems</span>: <span class="string">'center'</span>, <span class="attr">justifyContent</span>: <span class="string">'center'</span> &#125;&#125;&gt;</span><br><span class="line">        &lt;Text&gt;Home Screen&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>View&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> AppNavigator = createStackNavigator(</span><br><span class="line">  &#123;</span><br><span class="line">    Home: App,</span><br><span class="line">    Details: Details,  <span class="comment">// 另一个界面</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    initialRouteName: <span class="string">'Home'</span>,  <span class="comment">//主页</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createAppContainer(AppNavigator);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Button</span><br><span class="line">    title=<span class="string">"Go to Details"</span></span><br><span class="line">    onPress=&#123;() =&gt; <span class="keyword">this</span>.props.navigation.navigate(<span class="string">'Details'</span>)&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p>如果是 Home -&gt; Details, 意味着<code>去Details</code>,可以使用 <code>this.props.navigation.navigate(&#39;Details&#39;)</code> ，如果当前已经在 <code>Details</code> 界面中，则无效，需使用<code>this.props.navigation.push(&#39;Details&#39;)</code> 将新路由推送到堆栈导航器，如果它尚未在堆栈中，则跳转到该页面。</p><ul><li>返回上一页 <code>this.props.navigation.goBack()</code></li><li>返回第一个路由堆栈 <code>this.props.navigation.popToTop()</code></li></ul><h3 id="导航传参"><a href="#导航传参" class="headerlink" title="导航传参"></a>导航传参</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传递</span></span><br><span class="line"><span class="keyword">this</span>.props.navigation.navigate(<span class="string">'Details'</span>, &#123;<span class="attr">id</span>: <span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收</span></span><br><span class="line"><span class="keyword">const</span> &#123; navigation &#125; = <span class="keyword">this</span>.props</span><br><span class="line"><span class="keyword">const</span> id = navigation.getParam(<span class="string">'id'</span>, <span class="string">'no-id'</span>) <span class="comment">//第二个参数为不传ID时候的默认值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//另外一种接收方式</span></span><br><span class="line"><span class="keyword">this</span>.props.navigation.state.params.id <span class="comment">// 如果没传ID，使用此方式报错</span></span><br></pre></td></tr></table></figure><h3 id="头部标题"><a href="#头部标题" class="headerlink" title="头部标题"></a>头部标题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> navigationOptions = &#123;</span><br><span class="line">    title: <span class="string">'首页'</span>,  <span class="comment">//iOS上标题居中，在Android上左对齐。</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/* render function, etc */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>标题中使用参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetailsScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> navigationOptions = <span class="function">(<span class="params">&#123; navigation, screenProps, navigationOptions &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      title: navigation.getParam(<span class="string">'param'</span>, <span class="string">'我是默认值'</span>),</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/* render function, etc */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>navigation</code> - 页面的 导航属性 ，在页面中的路由为navigation.state。</li><li><code>screenProps</code> - 从导航器组件上层传递的 props</li><li><code>navigationOptions</code> - 如果未提供新值，将使用的默认或上一个选项</li></ul><p>动态更改标题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Button</span><br><span class="line">  title=<span class="string">"Update the title"</span></span><br><span class="line">  onPress=&#123;() =&gt; <span class="keyword">this</span>.props.navigation.setParams(&#123; <span class="attr">otherParam</span>: <span class="string">'Updated!'</span> &#125;)&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p>标题样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> navigationOptions = &#123;</span><br><span class="line">    title: <span class="string">'Home'</span>,</span><br><span class="line">    headerStyle: &#123; <span class="comment">//应用于最外层View的样式对象</span></span><br><span class="line">      backgroundColor: <span class="string">'#f4511e'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    headerTintColor: <span class="string">'#fff'</span>, <span class="comment">//返回按钮和标题颜色</span></span><br><span class="line">    headerTitleStyle: &#123;</span><br><span class="line">      fontWeight: <span class="string">'bold'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/* render function, etc */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全局标题样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> AppNavigator = createStackNavigator(</span><br><span class="line">  &#123;</span><br><span class="line">    Home: App,</span><br><span class="line">    Details: Details,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    initialRouteName: <span class="string">'Home'</span>,</span><br><span class="line">    defaultNavigationOptions: &#123;</span><br><span class="line">      headerStyle: &#123;</span><br><span class="line">        backgroundColor: <span class="string">'#f4511e'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      headerTintColor: <span class="string">'#fff'</span>,</span><br><span class="line">      headerTitleStyle: &#123;</span><br><span class="line">        fontWeight: <span class="string">'bold'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>自定义标题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Details</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> navigationOptions = &#123;</span><br><span class="line">        headerTitle: <span class="xml"><span class="tag">&lt;<span class="name">Image</span></span></span></span><br><span class="line"><span class="xml">            source=&#123;require('../static/img/index-title.png')&#125;</span></span><br><span class="line"><span class="xml">            style=&#123;&#123; width: 100, height: 30 &#125;&#125;</span></span><br><span class="line"><span class="xml">        /&gt;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p>标题右边添加按钮</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> navigationOptions = &#123;</span><br><span class="line">    headerRight: (</span><br><span class="line">      &lt;Button</span><br><span class="line">        onPress=&#123;() =&gt; alert(<span class="string">'This is a button!'</span>)&#125;</span><br><span class="line">        title=<span class="string">"Info"</span></span><br><span class="line">        color=<span class="string">"#fff"</span></span><br><span class="line">      /&gt;</span><br><span class="line">    ),</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>标题栏操控state</p><p>由于 static 中不存在this，标题栏组件操控当前界面需要通过<code>navigation.getParam</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> navigationOptions = <span class="function">(<span class="params">&#123; navigation &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      headerTitle: <span class="xml"><span class="tag">&lt;<span class="name">LogoTitle</span> /&gt;</span>,</span></span><br><span class="line"><span class="xml">      headerRight: (</span></span><br><span class="line">        &lt;Button</span><br><span class="line">          onPress=&#123;navigation.getParam('increaseCount')&#125;</span><br><span class="line">          title="+1"</span><br><span class="line">          color="#fff"</span><br><span class="line">        /&gt;</span><br><span class="line">      ),</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    this.props.navigation.setParams(&#123; increaseCount: this._increaseCount &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  state = &#123;</span><br><span class="line">    count: 0,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  _increaseCount = () =&gt; &#123;</span><br><span class="line">    this.setState(&#123; count: this.state.count + 1 &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> react-navigation </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ReactHook</title>
      <link href="/2019/08/09/ReactHook/"/>
      <url>/2019/08/09/ReactHook/</url>
      <content type="html"><![CDATA[<h3 id="什么是Hook"><a href="#什么是Hook" class="headerlink" title="什么是Hook"></a>什么是Hook</h3><p>他可以让你在不编写class的情况下使用 <code>state</code> 以及其他React特性</p><h3 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h3><p>创建一个状态和更新状态的函数<br>:useState唯一参数是初始state, 返回值为：当前<code>state</code>以及<code>更新state的函数</code>。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 声明一个叫 "count" 的 state 变量, 默认值为0</span></span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;</span></span><br><span class="line"><span class="regexp">        Click me</span></span><br><span class="line"><span class="regexp">      &lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="函数式更新"><a href="#函数式更新" class="headerlink" title="函数式更新"></a>函数式更新</h4><p>如果新的state需要通过使用先前的satte计算得出, 那么可以将函数传递给 <code>setState</code>。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(prevCount =&gt; prevCount + 1)&#125;&gt;+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h3><p><code>useEffect</code> 可以让你在函数组件中执行 <code>副作用操作</code><br>React 有另种副作用操作： <code>需要清除</code> 和 <code>不需要清除</code> 的操作</p><h4 id="不需要清除"><a href="#不需要清除" class="headerlink" title="不需要清除:"></a>不需要清除:</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>可以吧 <code>useEffect Hook</code>  看做  <code>componentDidMount</code>, <code>componentDidUpdate</code> 和 <code>componentWillUnmount</code> 三个函数的组合。默认情况下，它在第一次渲染之后和每次更新之后都会执行。</p></blockquote></blockquote><h4 id="需要清除"><a href="#需要清除" class="headerlink" title="需要清除"></a>需要清除</h4><p>如果你的 useEffect 返回一个函数，React 将会在执行清除操作时调用它</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handleStatusChange</span>(<span class="params">status</span>) </span>&#123;</span><br><span class="line">      setIsOnline(status.isOnline);</span><br><span class="line">    &#125;</span><br><span class="line">    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange); </span><br><span class="line">    <span class="comment">//订阅对应 componentDidMount 或者 componentDidUpdate 中的执行操作</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">cleanup</span>(<span class="params"></span>) </span>&#123; <span class="comment">//清除操作对应class 中 componentWillUnmount 使用</span></span><br><span class="line">      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="通过跳过-Effect-进行性能优化"><a href="#通过跳过-Effect-进行性能优化" class="headerlink" title="通过跳过 Effect 进行性能优化"></a>通过跳过 Effect 进行性能优化</h3><p>在Class 模式中，有时候数据没变化不需要更新的时候，我们在 <code>componentDidUpdate</code> 中比较 <code>prevProps</code> 或者 <code>prevState</code>， 如果数据变化才更新。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">componentDidUpdate(prevProps, prevState) &#123;</span><br><span class="line">  <span class="keyword">if</span> (prevState.count !== <span class="keyword">this</span>.state.count) &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;<span class="keyword">this</span>.state.count&#125;</span> times`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Effect Hook 中实现方式</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span>;</span><br><span class="line">&#125;, [count]); <span class="comment">// 仅在 count 更改时执行 effect, 如果数组中有多个，只有一个改变也会执行 effect</span></span><br></pre></td></tr></table></figure><blockquote><blockquote><p>如果 useEffect 第二个参数为 [] 空数组，则第一次渲染后，永远也不会触发。</p></blockquote></blockquote>]]></content>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>node-事件驱动</title>
      <link href="/2019/05/29/node-%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/"/>
      <url>/2019/05/29/node-%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/</url>
      <content type="html"><![CDATA[<h3 id="核心要点"><a href="#核心要点" class="headerlink" title="核心要点"></a>核心要点</h3><ul><li>node 是单进程单线程应用程序，但是通过事件和回调支持并发。</li><li>node 每一个API都是异步的，并作为一个独立线程运行。</li><li>node 基本上所有的事件机制都是用观察者模式实现。</li></ul><h3 id="内置事件处理-events模块"><a href="#内置事件处理-events模块" class="headerlink" title="内置事件处理 events模块"></a>内置事件处理 events模块</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> events = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"><span class="keyword">const</span> eventEmitter = <span class="keyword">new</span> events.EventEmitter();</span><br><span class="line">eventEmitter.on(<span class="string">'eventName'</span>, eventHandler); <span class="comment">//绑定事件处理程序</span></span><br><span class="line">eventEmitter.emit(<span class="string">'eventName'</span>); <span class="comment">//触发事件处理程序</span></span><br></pre></td></tr></table></figure><h4 id="接收参数"><a href="#接收参数" class="headerlink" title="接收参数"></a>接收参数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">eventHandler(parms1, parms2)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">eventEmitter.emit(<span class="string">'eventName'</span>, parms1, parms2);</span><br></pre></td></tr></table></figure><h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eventEmitter.addListener(eventName, eventHandler) <span class="comment">//监听事件</span></span><br><span class="line">eventEmitter.on(eventName, eventHandler) <span class="comment">//监听事件</span></span><br><span class="line"><span class="comment">//两者无区别</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eventEmitter.once(eventName, eventHandler) <span class="comment">//只会触发一次，自动解除监听</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eventEmitter.removeListener(eventName, eventHandler)<span class="comment">//移除监听</span></span><br></pre></td></tr></table></figure><h3 id="error-事件"><a href="#error-事件" class="headerlink" title="error 事件"></a>error 事件</h3><p>EventEmitter 定义了一个特殊的事件 error, 当 error 被触发时，EventEmitter 规定如果没有响 应的监听器，Node.js 会把它当作异常，退出程序并输出错误信息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eventEmitter.emit(<span class="string">'error'</span>); <span class="comment">//如果没有监听 'error' 则报错</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>uni-app笔记</title>
      <link href="/2019/03/26/uni-app%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/03/26/uni-app%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h3 id="渐进式效果"><a href="#渐进式效果" class="headerlink" title="渐进式效果"></a>渐进式效果</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"path"</span>: <span class="string">"pages/team/trackRecord"</span>,</span><br><span class="line"><span class="attr">"style"</span>: &#123;</span><br><span class="line"><span class="attr">"titleNView"</span>: &#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"transparent"</span>,</span><br><span class="line"><span class="attr">"titleText"</span>: <span class="string">"业绩记录"</span>,</span><br><span class="line"><span class="attr">"backgroundColor"</span>: <span class="string">"#4b74f2"</span>,</span><br><span class="line"><span class="attr">"titleColor"</span>: <span class="string">"#fff"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> uni-app </tag>
            
            <tag> app </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>谷歌vpn</title>
      <link href="/2019/02/23/%E8%B0%B7%E6%AD%8Cvpn/"/>
      <url>/2019/02/23/%E8%B0%B7%E6%AD%8Cvpn/</url>
      <content type="html"><![CDATA[<h3 id="安装shadowsocks"><a href="#安装shadowsocks" class="headerlink" title="安装shadowsocks"></a>安装shadowsocks</h3><p>使用的是ubuntu16.4系统,使用root用户登录后输入一下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate -O shadowsocks.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh</span><br><span class="line">chmod +x shadowsocks.sh</span><br><span class="line">./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log</span><br></pre></td></tr></table></figure><p>安装完成后，脚本提示如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Congratulations, Shadowsocks-python server install completed!</span><br><span class="line">Your Server IP        :your_server_ip</span><br><span class="line">Your Server Port      :your_server_port</span><br><span class="line">Your Password         :your_password</span><br><span class="line">Your Encryption Method:your_encryption_method</span><br><span class="line"></span><br><span class="line">Welcome to visit:https://teddysun.com/342.html</span><br><span class="line">Enjoy it!</span><br></pre></td></tr></table></figure><h3 id="卸载shadowsocks"><a href="#卸载shadowsocks" class="headerlink" title="卸载shadowsocks"></a>卸载shadowsocks</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./shadowsocks.sh uninstall</span><br></pre></td></tr></table></figure><h3 id="单用户配置"><a href="#单用户配置" class="headerlink" title="单用户配置"></a>单用户配置</h3><p>配置文件路径：/etc/shadowsocks.json<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"server"</span>:<span class="string">"0.0.0.0"</span>,</span><br><span class="line">  <span class="attr">"server_port"</span>:<span class="string">"your_server_port"</span>,</span><br><span class="line">  <span class="attr">"local_address"</span>:<span class="string">"127.0.0.1"</span>,</span><br><span class="line">  <span class="attr">"local_port"</span>:<span class="number">1080</span>,</span><br><span class="line">  <span class="attr">"password"</span>:<span class="string">"your_password"</span>,</span><br><span class="line">  <span class="attr">"timeout"</span>:<span class="number">300</span>,</span><br><span class="line">  <span class="attr">"method"</span>:<span class="string">"your_encryption_method"</span>,</span><br><span class="line">  <span class="attr">"fast_open"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="多用户配置"><a href="#多用户配置" class="headerlink" title="多用户配置"></a>多用户配置</h3><p>配置文件路径：/etc/shadowsocks.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"server"</span>:<span class="string">"0.0.0.0"</span>,</span><br><span class="line">    <span class="attr">"local_address"</span>:<span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"local_port"</span>:<span class="number">1080</span>,</span><br><span class="line">    <span class="attr">"port_password"</span>:&#123;</span><br><span class="line">         <span class="attr">"8989"</span>:<span class="string">"password0"</span>,</span><br><span class="line">         <span class="attr">"9001"</span>:<span class="string">"password1"</span>,</span><br><span class="line">         <span class="attr">"9002"</span>:<span class="string">"password2"</span>,</span><br><span class="line">         <span class="attr">"9003"</span>:<span class="string">"password3"</span>,</span><br><span class="line">         <span class="attr">"9004"</span>:<span class="string">"password4"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"timeout"</span>:<span class="number">300</span>,</span><br><span class="line">    <span class="attr">"method"</span>:<span class="string">"your_encryption_method"</span>,</span><br><span class="line">    <span class="attr">"fast_open"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用指令"><a href="#使用指令" class="headerlink" title="使用指令"></a>使用指令</h3><p>启动：/etc/init.d/shadowsocks start<br>停止：/etc/init.d/shadowsocks stop<br>重启：/etc/init.d/shadowsocks restart<br>状态：/etc/init.d/shadowsocks status</p><h3 id="客户端下载地址"><a href="#客户端下载地址" class="headerlink" title="客户端下载地址"></a>客户端下载地址</h3><p><a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="noopener">shadowsocks window</a><br><a href="https://github.com/shadowsocks/shadowsocks-android/releases" target="_blank" rel="noopener">shadowsocks android</a><br><a href="https://github.com/shadowsocks/ShadowsocksX-NG/releases" target="_blank" rel="noopener">shadowsocks mac</a></p>]]></content>
      
      
        <tags>
            
            <tag> vpn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>七牛域名回收解决</title>
      <link href="/2018/12/10/%E4%B8%83%E7%89%9B%E5%9F%9F%E5%90%8D%E5%9B%9E%E6%94%B6%E8%A7%A3%E5%86%B3/"/>
      <url>/2018/12/10/%E4%B8%83%E7%89%9B%E5%9F%9F%E5%90%8D%E5%9B%9E%E6%94%B6%E8%A7%A3%E5%86%B3/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>解决七牛测试域名回收，图片外链失效无法下载问题。</p><h3 id="使用-qshell-克隆空间"><a href="#使用-qshell-克隆空间" class="headerlink" title="使用 qshell 克隆空间"></a>使用 qshell 克隆空间</h3><ol><li><p>首先安装 qshell </p></li><li><p>秘钥设置</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qshell account -- ak sk name</span><br></pre></td></tr></table></figure><p>在 个人中心 &gt; 密钥管理 获取 ak sk，帐号名称 name 随便写</p><ol start="3"><li>获取原空间文件名</li></ol><p>列出原空间文件列表并保存到 list.txt 文件中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qshell listbucket 原bucket名 list.txt</span><br></pre></td></tr></table></figure></p><ol start="4"><li><code>list.txt</code> 文件中每行只保留文件名</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat list.txt | awk <span class="string">'&#123;print $1&#125;'</span> &gt;list_final.txt</span><br></pre></td></tr></table></figure><p>这里会生成 <code>list_final.txt</code> 文件，全是格式化好的文件名称</p><ol start="5"><li>复制原bucket到新bucket</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qshell batchcopy 原bucket名 新bucket名 list_final.txt</span><br></pre></td></tr></table></figure><p>执行命令后克隆成功，如果有报错信息可能有图片克隆失败的情况</p><blockquote><p>注意：这里两个bucket必须是同一地区。</p></blockquote><ol start="6"><li>下载</li></ol><p>下载前首先在当前目录新建 <code>download.txt</code> 文件,然后在当前目录创建 <code>img</code> 目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//download.txt</span><br><span class="line">&#123;</span><br><span class="line">  &quot;dest_dir&quot;: &quot;./img/&quot;,  #下载图片存放文件夹</span><br><span class="line">  &quot;bucket&quot;: &quot;yewenxiang&quot;, #需要下载的bucket空间名称</span><br><span class="line">  &quot;cdn_domain&quot;: &quot;pjiwcgz75.bkt.clouddn.com&quot; #需要下载的bucket空间外链，可在七牛查看</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后执行命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qshell qdownload download.txt</span><br></pre></td></tr></table></figure></p><p>这个bucket图片就全部下载在 <code>img</code> 文件中了。</p><h3 id="使用已备案的域名绑定"><a href="#使用已备案的域名绑定" class="headerlink" title="使用已备案的域名绑定"></a>使用已备案的域名绑定</h3><ol><li>在七牛的bucket中，点击绑定域名</li></ol><p><img src="http://img.ywx.store/0073tXM5gy1fy20djhtedj30so06jmxv.jpg" alt="image"></p><p>点击创建，创建成功后复制 CNAME名称</p><ol start="2"><li>由于我的域名是在阿里云注册的，所以要去阿里云域名控制台设置<br><img src="http://img.ywx.store/0073tXM5gy1fy20hrfkzqj30j50abwfk.jpg" alt="image"><br>点击域名解析，添加一条 CNAME记录<br><img src="http://img.ywx.store/0073tXM5gy1fy20ji30rqj30is0f3aav.jpg" alt="image"></li></ol><p>记录值为在七牛复制的 CNAME值，主机记录需要和七牛中的名称一致，等待几分钟就绑定成功，使用 <code>douban.ywx.store/文件名称</code> 可访问图片。</p>]]></content>
      
      
        <tags>
            
            <tag> 七牛 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Electron应用升级</title>
      <link href="/2018/12/05/Electron%E5%BA%94%E7%94%A8%E5%8D%87%E7%BA%A7/"/>
      <url>/2018/12/05/Electron%E5%BA%94%E7%94%A8%E5%8D%87%E7%BA%A7/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近公司的一个vue项目，为了安全方面的考虑没有上传到服务器，每次打包需要群发，很是不方便，后来又考虑到使用 Electron打包成客户端，实现自动升级，在此做一些记录</p><h3 id="桌面应用app图标"><a href="#桌面应用app图标" class="headerlink" title="桌面应用app图标"></a>桌面应用app图标</h3><p>图标分为三种，三个平台分别是：</p><ul><li>mac 的 .icns 后缀</li><li>window 的 .ico 后缀 (256x256px)</li><li>linux 的 .png 后缀 (256x256px)</li></ul><p>.ico百度搜索有很多生成方式。</p><p>.icns生成:</p><p>在桌面新建 <code>icons.iconset</code> 文件夹,把原图片放在桌面。<br>打开命令行cd到桌面，执行一下命令，生成不同尺寸的图片到 <code>icons.iconset</code>中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sips -z 16 16     pic.png --out icons.iconset/icon_16x16.png</span><br><span class="line">sips -z 32 32     pic.png --out icons.iconset/icon_16x16@2x.png</span><br><span class="line">sips -z 32 32     pic.png --out icons.iconset/icon_32x32.png</span><br><span class="line">sips -z 64 64     pic.png --out icons.iconset/icon_32x32@2x.png</span><br><span class="line">sips -z 64 64     pic.png --out icons.iconset/icon_64x64.png</span><br><span class="line">sips -z 128 128   pic.png --out icons.iconset/icon_64x64@2x.png</span><br><span class="line">sips -z 128 128   pic.png --out icons.iconset/icon_128x128.png</span><br><span class="line">sips -z 256 256   pic.png --out icons.iconset/icon_128x128@2x.png</span><br><span class="line">sips -z 256 256   pic.png --out icons.iconset/icon_256x256.png </span><br><span class="line">sips -z 512 512   pic.png --out icons.iconset/icon_256x256@2x.png </span><br><span class="line">sips -z 512 512   pic.png --out icons.iconset/icon_512x512.png</span><br><span class="line">sips -z 1024 1024   pic.png --out icons.iconset/icon_512x512@2x.png</span><br></pre></td></tr></table></figure><p>pic.png替换为你的图片文件路径，尺寸要求为1024x1024</p><p>然后生成 icns图标</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iconutil -c icns icons.iconset -o Icon.icns</span><br></pre></td></tr></table></figure><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p><img src="http://img.ywx.store/0073tXM5gy1fy1y9cnh7ij30bo070t8u.jpg" alt="image"></p><p><code>static</code> 文件夹和 <code>index.html</code> 为vue打包好的文件</p><p><code>main.js</code> 为程序主进程文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">    app,</span><br><span class="line">    BrowserWindow,</span><br><span class="line">    ipcMain,</span><br><span class="line">    dialog,</span><br><span class="line">    shell</span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; autoUpdater &#125; = <span class="built_in">require</span>(<span class="string">'electron-updater'</span>);</span><br><span class="line"><span class="keyword">const</span> feedUrl = <span class="string">`http://39.107.118.115:3000/<span class="subst">$&#123;process.platform&#125;</span>`</span>;</span><br><span class="line"><span class="comment">//这里39.107.118.115:3000 为服务端ip地址，需要再服务器上搭建一个静态服务器</span></span><br><span class="line"><span class="keyword">let</span> isSetupFlash = <span class="literal">false</span></span><br><span class="line"><span class="keyword">let</span> webContents;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    app.commandLine.appendSwitch(<span class="string">'ppapi-flash-path'</span>, app.getPath(<span class="string">'pepperFlashSystemPlugin'</span>))</span><br><span class="line">    isSetupFlash = <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    isSetupFlash = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> createWindow = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> win = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">        maximizable: <span class="literal">true</span>,</span><br><span class="line">        width: <span class="number">1200</span>,</span><br><span class="line">        height: <span class="number">800</span>,</span><br><span class="line">        minWidth: <span class="number">1200</span>,</span><br><span class="line">        minHeight: <span class="number">800</span>,</span><br><span class="line">        show: <span class="literal">false</span>,</span><br><span class="line">        center: <span class="literal">true</span>,</span><br><span class="line">        webPreferences: &#123;</span><br><span class="line">            plugins: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        frame: <span class="literal">true</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    webContents = win.webContents;</span><br><span class="line"></span><br><span class="line">    win.loadURL(</span><br><span class="line">        url.format(&#123;</span><br><span class="line">            pathname: path.join(__dirname, <span class="string">'index.html'</span>),  <span class="comment">//指定渲染进程入口文件</span></span><br><span class="line">            protocol: <span class="string">'file:'</span>,</span><br><span class="line">            slashes: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">    );</span><br><span class="line">    win.on(<span class="string">'closed'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        win = <span class="literal">null</span></span><br><span class="line">    &#125;)</span><br><span class="line">    win.once(<span class="string">'ready-to-show'</span>, () =&gt; &#123;</span><br><span class="line">        win.show()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> updateDescription</span><br><span class="line"><span class="keyword">let</span> checkForUpdates = <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">//检测更新</span></span><br><span class="line">    autoUpdater.setFeedURL(feedUrl);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新错误</span></span><br><span class="line">    autoUpdater.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">        dialog.showErrorBox(<span class="string">'更新错误！'</span>, <span class="string">'更新出错，请稍后再试'</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//检测更新</span></span><br><span class="line">    autoUpdater.on(<span class="string">'checking-for-update'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//可以更新</span></span><br><span class="line">    autoUpdater.on(<span class="string">'update-available'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">        updateDescription = message.description <span class="comment">//打包后 dist/latest.yml 中增加description字段，可以填写更新的描述信息，更加友好。</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//不需更新</span></span><br><span class="line">    autoUpdater.on(<span class="string">'update-not-available'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新下载进度事件</span></span><br><span class="line">    autoUpdater.on(<span class="string">'download-progress'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">progressObj</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//下载升级</span></span><br><span class="line">    autoUpdater.on(<span class="string">'update-downloaded'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event, releaseNotes, releaseName, releaseDate, updateUrl, quitAndUpdate</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        dialog.showMessageBox(&#123;</span><br><span class="line">            type: <span class="string">'info'</span>,</span><br><span class="line">            title: <span class="string">'提示消息'</span>,</span><br><span class="line">            message: <span class="string">`</span></span><br><span class="line"><span class="string">                新版本已下载完成，是否现在退出并安装?</span></span><br><span class="line"><span class="string">                更新内容：</span></span><br><span class="line"><span class="string">                <span class="subst">$&#123;updateDescription&#125;</span></span></span><br><span class="line"><span class="string">            `</span>,</span><br><span class="line">            buttons: [<span class="string">'yes'</span>, <span class="string">'no'</span>]</span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">                autoUpdater.quitAndInstall();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行自动更新检查</span></span><br><span class="line">    autoUpdater.checkForUpdates();</span><br><span class="line">&#125;;</span><br><span class="line">app.on(<span class="string">'ready'</span>, () =&gt; &#123;</span><br><span class="line">    createWindow();</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isSetupFlash) &#123;</span><br><span class="line">            dialog.showMessageBox(&#123;</span><br><span class="line">                type: <span class="string">'info'</span>,</span><br><span class="line">                title: <span class="string">'提示消息'</span>,</span><br><span class="line">                message: <span class="string">`</span></span><br><span class="line"><span class="string">                    检测到您系统中没有安装Flash，编辑器中的视频可能无法查看，是否去安装？</span></span><br><span class="line"><span class="string">                `</span>,</span><br><span class="line">                buttons: [<span class="string">'yes'</span>, <span class="string">'no'</span>]</span><br><span class="line">            &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">                    shell.openExternal(<span class="string">'https://get2.adobe.com/cn/flashplayer/'</span>)</span><br><span class="line">                    app.quit()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        checkForUpdates()</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">'window-all-closed'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.platform !== <span class="string">'darwin'</span>) &#123;</span><br><span class="line">        app.quit()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">app.on(<span class="string">'activate'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mainWindow === <span class="literal">null</span>) &#123;</span><br><span class="line">        createWindow()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"electrontoydb"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"1.0.5"</span>,</span><br><span class="line">    "description": "...", //程序的描述，需要填写。</span><br><span class="line">    "main": "main.js", //指定主进程入口文件</span><br><span class="line">    "scripts": &#123;</span><br><span class="line">        "dev": "node_modules/.bin/electron .",</span><br><span class="line">        "build": "rimraf dist &amp;&amp; electron-builder -w"</span><br><span class="line">    &#125;,</span><br><span class="line">    "keywords": [],</span><br><span class="line">    "author": "",</span><br><span class="line">    "license": "ISC",</span><br><span class="line">    "devDependencies": &#123;</span><br><span class="line">        "electron": "^3.0.7",</span><br><span class="line">        "electron-builder": "^20.29.0",</span><br><span class="line">        "rimraf": "^2.6.2"</span><br><span class="line">    &#125;,</span><br><span class="line">    "dependencies": &#123;</span><br><span class="line">        "electron-updater": "^3.1.6"</span><br><span class="line">    &#125;,</span><br><span class="line">    "build": &#123;</span><br><span class="line">        "productName": "..",  //打包软件名称</span><br><span class="line">        "appId": "com.toydb.app",</span><br><span class="line">        "win": &#123;</span><br><span class="line">            "icon": "icon/icon.ico" //windows软件图标路径</span><br><span class="line">        &#125;,</span><br><span class="line">        "mac": &#123;</span><br><span class="line">            "icon": "icon/icon.icns" // mac图标路径</span><br><span class="line">        &#125;,</span><br><span class="line">        "publish": [&#123;</span><br><span class="line">            "provider": "generic",  </span><br><span class="line">            "url": "http://39.107.118.115:3000" //指定更新的地址</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在打包后，上传dist 中的四个文件到服务器 win32文件夹下<br><img src="http://img.ywx.store/0073tXM5gy1fykhfclqzcj30g4044gm3.jpg" alt="image"></p><p>苹果应用也是一样。</p><blockquote><p>需要注意的是：每次打包升级需要修改 package.json 文件中的 version 版本号，例如：1.0.0 –&gt; 1.0.1。</p></blockquote>]]></content>
      
      <categories>
          
          <category> pc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> electron </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Electron入门</title>
      <link href="/2018/10/31/Electron%E5%85%A5%E9%97%A8/"/>
      <url>/2018/10/31/Electron%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h3 id="创建electron-项目"><a href="#创建electron-项目" class="headerlink" title="创建electron 项目"></a>创建electron 项目</h3><h4 id="使用-electron-forge-创建项目"><a href="#使用-electron-forge-创建项目" class="headerlink" title="使用 electron-forge 创建项目"></a>使用 electron-forge 创建项目</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g electron-forge</span><br><span class="line">electron-forge init my-app</span><br></pre></td></tr></table></figure><h4 id="手动创建"><a href="#手动创建" class="headerlink" title="手动创建"></a>手动创建</h4><p>package.json 文件中的main字段，必须是electron主进程文件，也就是main.js(或者index.js)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js  主进程文件</span></span><br><span class="line"><span class="keyword">var</span> electron = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = electron.app <span class="comment">//创建elecgtron引用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> BrowserWindow = electron.BrowserWindow <span class="comment">//创建BrowsetWindow引用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mainWindow = <span class="literal">null</span>  <span class="comment">//变量来保存对应窗口的引用</span></span><br><span class="line">app.on(<span class="string">'ready'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//创建 BrowserWindow 的实例赋值给win 打开窗口</span></span><br><span class="line">  mainWindow = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    width:<span class="number">400</span>,</span><br><span class="line">    height: <span class="number">400</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  mainWindow.loadFile(<span class="string">'index.html'</span>) <span class="comment">//把index.html文件加载到主窗口</span></span><br><span class="line">  mainWindow.webContents.openDevTools() <span class="comment">//开启调试模式</span></span><br><span class="line">  mainWindow.on(<span class="string">'close'</span>, () =&gt; &#123;</span><br><span class="line">    mainWindow = <span class="literal">null</span> <span class="comment">//关闭窗口时，回收变量。</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 当全部窗口关闭时退出。</span></span><br><span class="line">app.on(<span class="string">'window-all-closed'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// 在 macOS 上，除非用户用 Cmd + Q 确定地退出，</span></span><br><span class="line">  <span class="comment">// 否则绝大部分应用及其菜单栏会保持激活。</span></span><br><span class="line">  <span class="keyword">if</span> (process.platform !== <span class="string">'darwin'</span>) &#123;</span><br><span class="line">    app.quit()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">'activate'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// 在macOS上，当单击dock图标并且没有其他窗口打开时，</span></span><br><span class="line">  <span class="comment">// 通常在应用程序中重新创建一个窗口。</span></span><br><span class="line">  <span class="keyword">if</span> (win === <span class="literal">null</span>) &#123;</span><br><span class="line">    createWindow()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>目录结构:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── index.html</span><br><span class="line">├── main.js</span><br><span class="line">└── package.json</span><br></pre></td></tr></table></figure><p>官方推荐在项目中安装 <code>electron</code>，而不是在全局。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i electron -D</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//package.json</span><br><span class="line">"scripts": &#123;</span><br><span class="line">  "start": "./node_modules/.bin/electron ."</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="Electron-运行流程"><a href="#Electron-运行流程" class="headerlink" title="Electron 运行流程"></a>Electron 运行流程</h3><p>首先开启主进程去找当前目录下的 <code>package.json</code> 中的main字段的入口文件 <code>index.html</code> 找到后载入并开启渲染进程。</p><p>渲染进程和主进程的介绍：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── index.html</span><br><span class="line">├── main    <span class="comment">#主进程js文件夹</span></span><br><span class="line">├── main.js</span><br><span class="line">├── node_modules</span><br><span class="line">├── package.json</span><br><span class="line">└── renderer  <span class="comment">#渲染进程js文件夹</span></span><br></pre></td></tr></table></figure><p>主进程：package.json文件中 main 字段指向的文件，如果指向main.js，那main.js和它所引入的js文件，全部为主进程代码。<br>渲染进程：在main.js 文件中 <code>mainWindow.loadFile(&#39;index.html&#39;)</code> 所引入的html文件中所引入的js文件为渲染进程文件。</p><h3 id="操作本地文件demo"><a href="#操作本地文件demo" class="headerlink" title="操作本地文件demo"></a>操作本地文件demo</h3><p>在electron项目中，主进程和渲染进程都可以调用Node模块，（主进程为main.js文件中执行的代码, 渲染进程为 index.html中视图文件），<br>一般新建一个renderer文件夹写在渲染进程中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">├── index.html</span><br><span class="line">├── main.js</span><br><span class="line">├── package.json</span><br><span class="line">└── renderer</span><br><span class="line">    └── index.js</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>获取package.json<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">"textarea"</span> <span class="attr">cols</span>=<span class="string">"40"</span> <span class="attr">rows</span>=<span class="string">"20"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./renderer/index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//renderer/index.js</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> btn = <span class="built_in">window</span>.document.querySelector(<span class="string">'#btn'</span>)</span><br><span class="line">  <span class="keyword">var</span> textarea = <span class="built_in">window</span>.document.querySelector(<span class="string">'#textarea'</span>)</span><br><span class="line">  btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    fs.readFile(<span class="string">'package.json'</span>, (err, data) =&gt; &#123;</span><br><span class="line">      textarea.innerHTML = data</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现拖拽打开文件demo"><a href="#实现拖拽打开文件demo" class="headerlink" title="实现拖拽打开文件demo"></a>实现拖拽打开文件demo</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./renderer/index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//renderer/index.js</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">var</span> content = <span class="built_in">document</span>.querySelector(<span class="string">'#content'</span>)</span><br><span class="line">content.ondragenter = content.ondragover = content.ondragleave = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">content.ondrop = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  e.preventDefault()</span><br><span class="line">  <span class="built_in">console</span>.log(e.dataTransfer.files[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">var</span> path = e.dataTransfer.files[<span class="number">0</span>].path</span><br><span class="line">  fs.readFile(path, <span class="string">'utf-8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">    content.innerHTML = data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="主进程和渲染进程通信"><a href="#主进程和渲染进程通信" class="headerlink" title="主进程和渲染进程通信"></a>主进程和渲染进程通信</h3><p>主要使用了两个模块 ipcRenderer 和 ipcMain模块。</p><h4 id="异步通信"><a href="#异步通信" class="headerlink" title="异步通信"></a>异步通信</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//渲染进程</span></span><br><span class="line"><span class="keyword">var</span> &#123; ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"><span class="keyword">var</span> sendDom = <span class="built_in">document</span>.querySelector(<span class="string">'#btn2'</span>)</span><br><span class="line">sendDom.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  ipcRenderer.send(<span class="string">'sendM'</span>, <span class="number">123</span>) <span class="comment">//渲染进程给主进程广播事件</span></span><br><span class="line">&#125;</span><br><span class="line">ipcRenderer.on(<span class="string">'replay'</span>, (event, value) =&gt; &#123;  <span class="comment">//接收主进程的回复</span></span><br><span class="line">  <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//主进程</span></span><br><span class="line"><span class="keyword">var</span> &#123; ipcMain &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"></span><br><span class="line">ipcMain.on(<span class="string">'sendM'</span>, (event,value) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(event)</span><br><span class="line">  <span class="built_in">console</span>.log(value)    <span class="comment">//123</span></span><br><span class="line">  event.sender.send(<span class="string">'replay'</span>, <span class="string">'ok'</span>)  <span class="comment">//给渲染进程回复消息</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="同步通信"><a href="#同步通信" class="headerlink" title="同步通信"></a>同步通信</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//渲染进程</span></span><br><span class="line"><span class="keyword">var</span> &#123; ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"><span class="keyword">var</span> sendDom = <span class="built_in">document</span>.querySelector(<span class="string">'#btn2'</span>)</span><br><span class="line">sendDom.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> msg = ipcRenderer.sendSync(<span class="string">'asyncSendM'</span>, <span class="number">123</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(msg)  <span class="comment">//同步通信</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//主进程</span></span><br><span class="line"><span class="keyword">var</span> &#123; ipcMain &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line">ipcMain.on(<span class="string">'asyncSendM'</span>, (event, value) =&gt; &#123;</span><br><span class="line">  event.returnValue = <span class="string">'同步通信'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="渲染进程和渲染进程之间的通信"><a href="#渲染进程和渲染进程之间的通信" class="headerlink" title="渲染进程和渲染进程之间的通信"></a>渲染进程和渲染进程之间的通信</h3><p>场景：多个新窗口之间的通信</p><p>解决方法:</p><ul><li>使用HTML5 localStorage 来实现多个窗口的传值通信</li><li>通过 BrowserWindow 和 webContents 模块来实现</li></ul><p>通过 BrowserWindow 和 webContents 模块来实现，通俗的来讲，是通过 <code>ipcRenderer.send</code> 把值传给主进程，然后主进程通过 win.webContents.send(params),传递给 <code>win</code> 这个窗口。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//主进程</span></span><br><span class="line">win = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">  width:<span class="number">300</span>,</span><br><span class="line">  height:<span class="number">300</span>,</span><br><span class="line">&#125;)</span><br><span class="line">win.loadFile(<span class="string">'news.html'</span>)</span><br><span class="line">win.webContents.on(<span class="string">'did-finish-load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//窗口加载完毕后传值</span></span><br><span class="line">  win.webContents.send(<span class="string">'toNews'</span>,params)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//渲染进程</span></span><br><span class="line"><span class="keyword">var</span> &#123; ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">'electron)</span></span><br><span class="line"><span class="string">ipcRenderer.on('</span>toNews<span class="string">', function(event, params)&#123;</span></span><br><span class="line"><span class="string">  console.log(params) </span></span><br><span class="line"><span class="string">&#125;)</span></span><br></pre></td></tr></table></figure><p>消息如何回传？</p><p>比如 渲染线程A 和渲染线程B，下面简称A、B<br>当A向B传递参数，如果需要回传参数，那么，在传递参数的时候带上当前渲染线程（A）的ID<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//主线程</span></span><br><span class="line"><span class="keyword">const</span> winId = BrowserWindow.getFocusedWindow().id <span class="comment">//获取渲染线程A的ID</span></span><br></pre></td></tr></table></figure></p><p>在渲染线程B中使用 <code>BrowserWindow.fromId(winId)</code> 来获取渲染线程A的窗口实例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> BrowserWindow = <span class="built_in">require</span>(<span class="string">'electron'</span>).remote.BrowserWindow</span><br><span class="line"><span class="comment">//由于 BrowserWindow 是主线程中的模块 所以在渲染线程中使用的时候，需要借助于 remote 模块来调用</span></span><br><span class="line"><span class="keyword">let</span> win = BrowserWindow.fromId(winId)</span><br></pre></td></tr></table></figure></p><p>后面的步骤和上面类似了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//渲染线程B</span></span><br><span class="line">win.webContents.send(<span class="string">'toA'</span>,params)  <span class="comment">//传递消息</span></span><br><span class="line"><span class="comment">//渲染线程A</span></span><br><span class="line">ipcRenderer.on(<span class="string">'toA'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event, params</span>)</span>&#123;  <span class="comment">//接收消息</span></span><br><span class="line">  <span class="built_in">console</span>.log(params) </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Electron-模块"><a href="#Electron-模块" class="headerlink" title="Electron 模块"></a>Electron 模块</h3><ul><li>主进程中使用的模块</li><li>渲染进程中使用的模块</li><li>都可以使用的模块<br><img src="http://img.ywx.store/0073tXM5gy1fy1y69jdxfj30je0b2gmv.jpg" alt="image"></li></ul><p>模块可以让我们用js调用或者操作电脑上某一部分原生的功能。</p><h4 id="remote模块"><a href="#remote模块" class="headerlink" title="remote模块"></a>remote模块</h4><p>渲染进程和主进程中进行进程通讯(IPC)的通讯模块，可以让我们在渲染进程中调用主进程的方法。</p><h5 id="打开新窗口demo"><a href="#打开新窗口demo" class="headerlink" title="打开新窗口demo"></a>打开新窗口demo</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'#btn'</span>)</span><br><span class="line"><span class="keyword">var</span> BrowserWindow = <span class="built_in">require</span>(<span class="string">'electron'</span>).remote.BrowserWindow</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> win=<span class="literal">null</span></span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  win = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    width:<span class="number">400</span>,</span><br><span class="line">    height:<span class="number">300</span>,</span><br><span class="line">    <span class="comment">// frame:false,   //去掉顶部关闭条</span></span><br><span class="line">    <span class="comment">// fullscreen: true, //全屏</span></span><br><span class="line">  &#125;)</span><br><span class="line">  win.loadFile(<span class="string">'news.html'</span>)</span><br><span class="line">  win.on(<span class="string">'closed'</span>,() =&gt; &#123;</span><br><span class="line">    win = <span class="literal">null</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="menu模块"><a href="#menu模块" class="headerlink" title="menu模块"></a>menu模块</h4><p>可以自定义软件菜单，注意，如果在渲染模块中定义会出现软件打开时，能看到初始菜单的情况，所以，最好在主线程中去定义菜单选项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义菜单模块</span></span><br><span class="line"><span class="keyword">const</span> &#123;Menu&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"><span class="keyword">const</span> template = [</span><br><span class="line">  &#123;</span><br><span class="line">    label: <span class="string">'文件'</span>,</span><br><span class="line">    submenu: [</span><br><span class="line">      &#123;</span><br><span class="line">        label: <span class="string">'新建文件'</span>,</span><br><span class="line">        accelerator: <span class="string">'command+n'</span> <span class="comment">//自定义快捷键</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        label: <span class="string">'新建窗口'</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    label: <span class="string">'编辑'</span>,</span><br><span class="line">    submenu: [</span><br><span class="line">      &#123;</span><br><span class="line">        label: <span class="string">'复制'</span>,</span><br><span class="line">        role: <span class="string">'copy'</span>,  <span class="comment">// 内置快捷键</span></span><br><span class="line">        click: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">//自定义事件</span></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'111'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        label: <span class="string">'新建窗口'</span>,</span><br><span class="line">        click: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'111'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> menu = Menu.buildFromTemplate(template)</span><br><span class="line">Menu.setApplicationMenu(menu)</span><br></pre></td></tr></table></figure><p>别忘了在主线程中的 <code>main.js</code> 中引入文件 <code>require(&#39;./main/Menu.js&#39;)</code>!</p><h4 id="右键菜单"><a href="#右键菜单" class="headerlink" title="右键菜单"></a>右键菜单</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> &#123;remote&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> &#123;Menu, MenuItem&#125; = remote</span></span><br><span class="line"><span class="undefined">  </span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> menu = <span class="keyword">new</span> Menu()</span></span><br><span class="line"><span class="javascript">  menu.append(<span class="keyword">new</span> MenuItem(&#123;<span class="attr">label</span>: <span class="string">'MenuItem1'</span>, click() &#123; <span class="built_in">console</span>.log(<span class="string">'item 1 clicked'</span>) &#125;&#125;))</span></span><br><span class="line"><span class="javascript">  menu.append(<span class="keyword">new</span> MenuItem(&#123;<span class="attr">type</span>: <span class="string">'separator'</span>&#125;))</span></span><br><span class="line"><span class="javascript">  menu.append(<span class="keyword">new</span> MenuItem(&#123;<span class="attr">label</span>: <span class="string">'MenuItem2'</span>, <span class="attr">type</span>: <span class="string">'checkbox'</span>, <span class="attr">checked</span>: <span class="literal">true</span>&#125;))</span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.addEventListener(<span class="string">'contextmenu'</span>, (e) =&gt; &#123;</span></span><br><span class="line"><span class="undefined">    e.preventDefault()</span></span><br><span class="line"><span class="undefined">    menu.popup(&#123;window: remote.getCurrentWindow()&#125;)</span></span><br><span class="line"><span class="javascript">  &#125;, <span class="literal">false</span>)</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> pc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> electron </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vuex入门</title>
      <link href="/2018/10/19/Vuex%E5%85%A5%E9%97%A8/"/>
      <url>/2018/10/19/Vuex%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h3 id="简单的例子"><a href="#简单的例子" class="headerlink" title="简单的例子"></a>简单的例子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//store/index.js</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"><span class="keyword">const</span> store = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">      count: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">      increment(state) &#123;</span><br><span class="line">        state.count++</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//组件</span></span><br><span class="line"><span class="keyword">this</span>.$store.state.count  <span class="comment">//获取状态</span></span><br><span class="line"><span class="keyword">this</span>.$store.commit(<span class="string">'increment'</span>)  <span class="comment">//修改状态</span></span><br></pre></td></tr></table></figure><h3 id="State-和-mapStates"><a href="#State-和-mapStates" class="headerlink" title="State 和 mapStates"></a>State 和 mapStates</h3><p>最简单的方法是在 <code>计算属性</code> 中返回某个状态</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  count() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.count</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是状态多了之后，都申明为计算属性，显得会有些重复和冗余。为了解决这个问题，我们可以使用 mapState 辅助函数帮助我们生成计算属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  computed: &#123;</span><br><span class="line">    ...mapState([<span class="string">'count'</span>])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mapState函数返回一个对象，通过对象结构的方式合并到computed中。</p><h3 id="Getter-和-mapGetters"><a href="#Getter-和-mapGetters" class="headerlink" title="Getter 和 mapGetters"></a>Getter 和 mapGetters</h3><p>getter可以认为是 store 的计算属性。</p><h4 id="创建Getter"><a href="#创建Getter" class="headerlink" title="创建Getter"></a>创建Getter</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    name: <span class="string">'yewenxiang'</span>,</span><br><span class="line">    age: <span class="number">18</span></span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    people(state, getters) &#123;  <span class="comment">//getters表示其他getter</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">`name:<span class="subst">$&#123;state.name&#125;</span>, age:<span class="subst">$&#123;state.age&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="Getter传参"><a href="#Getter传参" class="headerlink" title="Getter传参"></a>Getter传参</h4><p>可以通过让getter返回一个函数，来实现给getter传参</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建</span></span><br><span class="line">getters: &#123;</span><br><span class="line">  people: <span class="function">(<span class="params">state</span>) =&gt;</span> (id) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.log(id, state)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="keyword">this</span>.$store.getters.people(<span class="number">1</span>)  <span class="comment">//不管state值是否改变，都会调用</span></span><br></pre></td></tr></table></figure><h4 id="使用Getter"><a href="#使用Getter" class="headerlink" title="使用Getter"></a>使用Getter</h4><p>普通方式使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">  people()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.$store.getters.people</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mapGetters方式使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  ...mapGetters([<span class="string">'people'</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Mutation-和-mapMutations"><a href="#Mutation-和-mapMutations" class="headerlink" title="Mutation 和 mapMutations"></a>Mutation 和 mapMutations</h3><p>更改Vuex的store中的状态只能使用mutation来更改，便于状态追踪和调试。</p><h4 id="创建Mutation"><a href="#创建Mutation" class="headerlink" title="创建Mutation"></a>创建Mutation</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state, params) &#123; <span class="comment">//params 为自己所传递参数</span></span><br><span class="line">      <span class="comment">// 变更状态</span></span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="使用Mutation"><a href="#使用Mutation" class="headerlink" title="使用Mutation"></a>使用Mutation</h4><p>普通方式使用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$store.commit(<span class="string">'increment'</span>， params) <span class="comment">// 大多数情况params为对象</span></span><br></pre></td></tr></table></figure></p><p>mapMutations方式使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapMutations &#125;  <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">methods:&#123;</span><br><span class="line">  ...mapMutations([<span class="string">'increment'</span>])</span><br><span class="line">  <span class="comment">// 将 `this.increment()` 映射为 `this.$store.commit('increment')`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Mutation-使用规范"><a href="#Mutation-使用规范" class="headerlink" title="Mutation 使用规范"></a>Mutation 使用规范</h4><ul><li>Mutation 必须是<em>同步函数</em></li></ul><p>每一条 mutation 被记录，devtools 都需要捕捉到前一状态和后一状态的快照，如果异步修改状态，当 mutation 触发的时候，状态还没有被修改，导致此时的状态的改变不可通过devtools追踪。</p><ul><li>使用常量替代 Mutation 事件类型。</li></ul><p>建立 <code>mutation-types.js</code> 文件，</p><ul><li>Mutation 需遵守 Vue 的响应规则。</li></ul><ol><li>提前在你的 store 中初始化好所有所需属性。</li><li>在对象上添加新属性时应该使用 <code>Vue.set(obj, &#39;newProp&#39;, 123)</code> 或者 <code>对象展开运算符</code> 来合并。</li></ol><h3 id="Action-和-mapActions"><a href="#Action-和-mapActions" class="headerlink" title="Action 和 mapActions"></a>Action 和 mapActions</h3><p>Action 类似于 mutation，不同在于：</p><ul><li>Action 提交的是 mutation, 而不是直接变更状态。</li><li>Action 可以包含任意的异步操作</li></ul><p>创建一个异步的actions<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">      count: <span class="number">0</span>,</span><br><span class="line">      name: <span class="string">'yewenxiang'</span>,</span><br><span class="line">      age: <span class="number">18</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">      increment(state) &#123;</span><br><span class="line">        state.count++</span><br><span class="line">        state.age++</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123;</span><br><span class="line">      asyncIncrement(context) &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          context.commit(<span class="string">'increment'</span>)</span><br><span class="line">        &#125;, <span class="number">2000</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>context包含：</p><ul><li>commit 提交 mutation</li><li>dispatch 提交 action</li><li>getters</li><li>rootGetters</li><li>rootState</li><li>state</li></ul><p>可以使用 <code>this.$store.dispatch(&#39;xxx&#39;)</code> 来分发 action， 或者使用 mapActions。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  ...mapActions([<span class="string">'asyncIncrement'</span>]), <span class="comment">//将 `this.asyncIncrement()` 映射为 `this.$store.dispatch('asyncIncrement')`</span></span><br><span class="line">  addCount() &#123;</span><br><span class="line">    <span class="keyword">this</span>.asyncIncrement()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vuex </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nuxt入门</title>
      <link href="/2018/10/12/Nuxt%E5%85%A5%E9%97%A8/"/>
      <url>/2018/10/12/Nuxt%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h3 id="全局CSS"><a href="#全局CSS" class="headerlink" title="全局CSS"></a>全局CSS</h3><blockquote><p>默认情况下 Nuxt 使用 vue-loader、file-loader 以及 url-loader 这几个 Webpack 加载器来处理文件的加载和引用。对于不需要通过 Webpack 处理的静态资源文件，可以放置在 static 目录中。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//nuxt.config.js</span></span><br><span class="line">css:[<span class="string">'~assets/css/main.css'</span>]</span><br></pre></td></tr></table></figure><h3 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h3><p>路由和vue中类似，不过Nuxt是根据page目录来动态生成路由表的，不需要我们配置。</p><p><img src="http://img.ywx.store/0073tXM5gy1fy1yaa68s7j309d05lq31.jpg" alt="image"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">nuxt-link</span> <span class="attr">to</span>=<span class="string">"/"</span>&gt;</span>home<span class="tag">&lt;/<span class="name">nuxt-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">nuxt-link</span> <span class="attr">:to</span>=<span class="string">"&#123;name: 'about', params:&#123;id: 1&#125;&#125;"</span>&gt;</span>about<span class="tag">&lt;/<span class="name">nuxt-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">nuxt-link</span> <span class="attr">to</span>=<span class="string">"views"</span>&gt;</span>views<span class="tag">&lt;/<span class="name">nuxt-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><p>在路由里面定义带参数的动态路由。需要创建<em>以下划线为前缀</em>的Vue文件或目录</p><p>写法一：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nuxt-link</span> <span class="attr">:to</span>=<span class="string">"'/community/member/'+ user.id"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>写法二：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nuxt-link</span> <span class="attr">:to</span>=<span class="string">"&#123;name:'news-id', params:&#123;id: 123&#125;&#125;"</span>&gt;</span>新闻1<span class="tag">&lt;/<span class="name">nuxt-link</span>&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>news这里是路由名称后面注意加上 -id,代表传的参数为 id字段，使用_id动态路由文件。</p></blockquote><p>js跳转</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go(id) &#123; </span><br><span class="line">  <span class="keyword">this</span>.$router.push(&#123; <span class="attr">path</span>: <span class="string">'/comments/'</span> + id &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="动态路由参数校验"><a href="#动态路由参数校验" class="headerlink" title="动态路由参数校验"></a>动态路由参数校验</h4><p>对于动态路由传递的参数，进行校验</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  validate(&#123; params &#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/^\d+$/</span>.test(params.id)  <span class="comment">//返回false 跳转到404</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="路由切换动画效果"><a href="#路由切换动画效果" class="headerlink" title="路由切换动画效果"></a>路由切换动画效果</h3><h4 id="全局路由添加动画"><a href="#全局路由添加动画" class="headerlink" title="全局路由添加动画"></a>全局路由添加动画</h4><p>需要添加全局的CSS类,如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.page-enter-active</span>, <span class="selector-class">.page-leave-active</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: opacity <span class="number">2s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.page-enter</span>, <span class="selector-class">.page-leave-active</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="单个动画切换"><a href="#单个动画切换" class="headerlink" title="单个动画切换"></a>单个动画切换</h4><p>添加一个唯一的类，并绑定到组件中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.test-enter-active</span>, <span class="selector-class">.test-leave-active</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">2s</span>;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.test-enter</span>, <span class="selector-class">.test-leave-active</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">40px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在需要动画效果的路由中绑定类<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  transition: <span class="string">'test'</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="默认模板和默认布局"><a href="#默认模板和默认布局" class="headerlink" title="默认模板和默认布局"></a>默认模板和默认布局</h3><p>有时候页面中有一些公共的头部或者尾部，这时候可以考虑使用默认模板，或者默认布局</p><h4 id="默认模板"><a href="#默认模板" class="headerlink" title="默认模板"></a>默认模板</h4><p>使用默认模板，需要在应用的根目录下创建一个 <code>app.html</code> 的文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--app.html--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  &#123;&#123; HEAD &#125;&#125;   <span class="comment">&lt;!--对应nuxt.config.js中的head字段,必须大写--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">P</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">P</span>&gt;</span>  <span class="comment">&lt;!--公共头部--&gt;</span></span><br><span class="line">  &#123;&#123; APP &#125;&#125;   <span class="comment">&lt;!--APP代表page中的组件，必须大写--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="默认布局"><a href="#默认布局" class="headerlink" title="默认布局"></a>默认布局</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!--公共的头部--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nuxt</span>/&gt;</span>    <span class="comment">&lt;!--页面主体内容--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>区别：模板可以定制很多头部信息（比如IE版本判断），默认布局只能定义页面body中的元素</p></blockquote><h3 id="自定义错误页面"><a href="#自定义错误页面" class="headerlink" title="自定义错误页面"></a>自定义错误页面</h3><p>nuxt是有默认的错误页面的，有时间需要自定义就需要在 <code>/layouts/</code> 目录下建立一个<code>error.vue</code> 文件, 它相当于一个显示错误的组件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;h2 v-if=&quot;error.statusCode==404&quot;&gt;404页面不存在&lt;/h2&gt;</span><br><span class="line">      &lt;h2 v-else&gt;500服务器错误&lt;/h2&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">          &lt;li&gt;&lt;nuxt-link to=&quot;/&quot;&gt;HOME&lt;/nuxt-link&gt;&lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props:[&apos;error&apos;],</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="个性meta设置"><a href="#个性meta设置" class="headerlink" title="个性meta设置"></a>个性meta设置</h3><p>在 <code>nuxt.config.js</code> 中 head字段设置的是全局头，如何针对单个页面进行设置？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  hear()&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">      title:<span class="string">'个性标题'</span>,</span><br><span class="line">      meta:[</span><br><span class="line">        &#123;<span class="attr">hid</span>:<span class="string">'description'</span>,<span class="attr">name</span>:<span class="string">'news'</span>,<span class="attr">content</span>:<span class="string">'This is news page'</span>&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>这里<code>hid:&#39;description&#39;</code>是一个唯一标识符，需要和全局的hid值相同，才会覆盖全局的值。</p></blockquote><h3 id="异步请求数据"><a href="#异步请求数据" class="headerlink" title="异步请求数据"></a>异步请求数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">async</span> asyncData() &#123;</span><br><span class="line">      <span class="keyword">let</span> &#123; data &#125; = <span class="keyword">await</span> axios.get(<span class="string">'https://api.myjson.com/bins/8gdmr'</span>)</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">info</span>: data &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>由于请求数据时组件不存在，这里也就没有this，return 的对象会直接合并到 data中, 在模板中直接绑定数据即可。</p><h3 id="Nuxt升级"><a href="#Nuxt升级" class="headerlink" title="Nuxt升级"></a>Nuxt升级</h3><p>使用命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm upgrade</span><br></pre></td></tr></table></figure><p>不能直接只升级nuxt，以上命令出问题，最好删除 lock-package.json 文件</p>]]></content>
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSR </tag>
            
            <tag> Nuxt </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>页面hack</title>
      <link href="/2018/10/10/%E9%A1%B5%E9%9D%A2hack/"/>
      <url>/2018/10/10/%E9%A1%B5%E9%9D%A2hack/</url>
      <content type="html"><![CDATA[<h3 id="弹窗后禁止页面滚动"><a href="#弹窗后禁止页面滚动" class="headerlink" title="弹窗后禁止页面滚动"></a>弹窗后禁止页面滚动</h3><p>首先考虑的是</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">overflow-x</span>: hidden;</span><br><span class="line">  <span class="attribute">overflow-y</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这种方法，在关闭弹窗时页面出现滚动条会导致页面偏移，影响用户体验。</p><p>对于偏移的问题可以设置body的padding-right:15px，来解决。但是在不同的浏览器中的滚动条宽度不一，还是会导致几个像素的偏移。</p><p>完美解决办法：<br>动态的计算滚动条的宽度，然后设置padding值</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fancybox-lock-test</span> &#123;</span><br><span class="line">  <span class="attribute">overflow-y</span>: hidden <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> w1 = $(<span class="built_in">window</span>).width()</span><br><span class="line">Dom.htmlDom.addClass(<span class="string">'fancybox-lock-test'</span>)</span><br><span class="line"><span class="keyword">var</span> w2 = $(<span class="built_in">window</span>).width()</span><br><span class="line">Dom.htmlDom.removeClass(<span class="string">'fancybox-lock-test'</span>)</span><br><span class="line">$(<span class="string">"&lt;style type='text/css'&gt;.fancybox-margin&#123;margin-right:"</span> + (w2 - w1) + <span class="string">"px;&#125;&lt;/style&gt;"</span>).appendTo(<span class="string">"head"</span>)</span><br><span class="line">Dom.bodyDom.addClass(<span class="string">'fancybox-margin'</span>)</span><br><span class="line">$(<span class="string">'body'</span>).css(&#123;</span><br><span class="line">  <span class="string">"overflow-x"</span>: <span class="string">"hidden"</span>,</span><br><span class="line">  <span class="string">"overflow-y"</span>: <span class="string">"hidden"</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h3><p>解决的问题：对于大图首次加载产生白屏的问题。</p><p>解决的思路：把大图压缩到几十KB，也就是当做缩略图来展示，首次加载缩略图，加载完毕之后再加载真实的高清图，减少白屏时间，提升用户体验。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"introduce-1-img thumbnails"</span> <span class="attr">src</span>=<span class="string">"https://i.toydb.cn/1-introduce_1_min.jpg"</span> <span class="attr">data-img</span>=<span class="string">"https://i.toydb.cn/1-introduce_1.png"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.thumbnails</span> &#123;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">blur</span>(4px);  <span class="comment">/*图片产生模糊效果*/</span></span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.7s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> thumbImg = $(<span class="string">'.thumbnails'</span>) <span class="comment">//所有需要懒加载的图片</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; thumbImg.length; i++) &#123;  </span><br><span class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> imgObject = <span class="keyword">new</span> Image();</span><br><span class="line">    <span class="keyword">var</span> currentImg = thumbImg.eq(i);</span><br><span class="line">    <span class="keyword">var</span> img = currentImg.data(<span class="string">'img'</span>);</span><br><span class="line">    imgObject.src = img</span><br><span class="line">    imgObject.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      currentImg.attr(<span class="string">"src"</span>, img)</span><br><span class="line">      currentImg.css(<span class="string">"filter"</span>, <span class="string">"blur(0)"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="移动端rem布局"><a href="#移动端rem布局" class="headerlink" title="移动端rem布局"></a>移动端rem布局</h3><p>对于页面切图不要使用750pxPSD设计图，在dpr=3的高清屏下，图片可能存在不清晰的情况,切完图片后，在把PSD图片调回 750px宽度，加入下面JS代码，计算值为 <code>rem=设计图px/100</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">win, lib</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> doc = win.document;</span><br><span class="line">      <span class="keyword">var</span> docEl = doc.documentElement;</span><br><span class="line">      <span class="keyword">var</span> metaEl = doc.querySelector(<span class="string">'meta[name="viewport"]'</span>);</span><br><span class="line">      <span class="keyword">var</span> flexibleEl = doc.querySelector(<span class="string">'meta[name="flexible"]'</span>);</span><br><span class="line">      <span class="keyword">var</span> dpr = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">var</span> scale = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">var</span> tid;</span><br><span class="line">      <span class="keyword">var</span> flexible = lib.flexible || (lib.flexible = &#123;&#125;);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (metaEl) &#123;</span><br><span class="line">          <span class="keyword">var</span> match = metaEl.getAttribute(<span class="string">'content'</span>).match(<span class="regexp">/initial\-scale=([\d\.]+)/</span>);</span><br><span class="line">          <span class="keyword">if</span> (match) &#123;</span><br><span class="line">              scale = <span class="built_in">parseFloat</span>(match[<span class="number">1</span>]);</span><br><span class="line">              dpr = <span class="built_in">parseInt</span>(<span class="number">1</span> / scale);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (flexibleEl) &#123;</span><br><span class="line">          <span class="keyword">var</span> content = flexibleEl.getAttribute(<span class="string">'content'</span>);</span><br><span class="line">          <span class="keyword">if</span> (content) &#123;</span><br><span class="line">              <span class="keyword">var</span> initialDpr = content.match(<span class="regexp">/initial\-dpr=([\d\.]+)/</span>);</span><br><span class="line">              <span class="keyword">var</span> maximumDpr = content.match(<span class="regexp">/maximum\-dpr=([\d\.]+)/</span>);</span><br><span class="line">              <span class="keyword">if</span> (initialDpr) &#123;</span><br><span class="line">                  dpr = <span class="built_in">parseFloat</span>(initialDpr[<span class="number">1</span>]);</span><br><span class="line">                  scale = <span class="built_in">parseFloat</span>((<span class="number">1</span> / dpr).toFixed(<span class="number">2</span>));</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> (maximumDpr) &#123;</span><br><span class="line">                  dpr = <span class="built_in">parseFloat</span>(maximumDpr[<span class="number">1</span>]);</span><br><span class="line">                  scale = <span class="built_in">parseFloat</span>((<span class="number">1</span> / dpr).toFixed(<span class="number">2</span>));</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!dpr &amp;&amp; !scale) &#123;</span><br><span class="line">          <span class="keyword">var</span> isAndroid = win.navigator.appVersion.match(<span class="regexp">/android/gi</span>);</span><br><span class="line">          <span class="keyword">var</span> isIPhone = win.navigator.appVersion.match(<span class="regexp">/iphone/gi</span>);</span><br><span class="line">          <span class="keyword">var</span> devicePixelRatio = win.devicePixelRatio;</span><br><span class="line">          <span class="keyword">if</span> (isIPhone) &#123;</span><br><span class="line">              <span class="comment">// iOS下，对于2和3的屏，用2倍的方案，其余的用1倍方案</span></span><br><span class="line">              <span class="keyword">if</span> (devicePixelRatio &gt;= <span class="number">3</span> &amp;&amp; (!dpr || dpr &gt;= <span class="number">3</span>)) &#123;</span><br><span class="line">                  dpr = <span class="number">3</span>;</span><br><span class="line">              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (devicePixelRatio &gt;= <span class="number">2</span> &amp;&amp; (!dpr || dpr &gt;= <span class="number">2</span>)) &#123;</span><br><span class="line">                  dpr = <span class="number">2</span>;</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  dpr = <span class="number">1</span>;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">// 其他设备下，仍旧使用1倍的方案</span></span><br><span class="line">              dpr = <span class="number">1</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          scale = <span class="number">1</span> / dpr;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      docEl.setAttribute(<span class="string">'data-dpr'</span>, dpr);</span><br><span class="line">      <span class="keyword">if</span> (!metaEl) &#123;</span><br><span class="line">          metaEl = doc.createElement(<span class="string">'meta'</span>);</span><br><span class="line">          metaEl.setAttribute(<span class="string">'name'</span>, <span class="string">'viewport'</span>);</span><br><span class="line">          metaEl.setAttribute(<span class="string">'content'</span>, <span class="string">'initial-scale='</span> + scale + <span class="string">', maximum-scale='</span> + scale + <span class="string">', minimum-scale='</span> + scale + <span class="string">', user-scalable=no'</span>);</span><br><span class="line">          <span class="keyword">if</span> (docEl.firstElementChild) &#123;</span><br><span class="line">              docEl.firstElementChild.appendChild(metaEl);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">var</span> wrap = doc.createElement(<span class="string">'div'</span>);</span><br><span class="line">              wrap.appendChild(metaEl);</span><br><span class="line">              doc.write(wrap.innerHTML);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">refreshRem</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> width = docEl.getBoundingClientRect().width;</span><br><span class="line">          <span class="comment">// 适配平板</span></span><br><span class="line">          <span class="keyword">if</span> (width / dpr &gt; <span class="number">750</span>) &#123;</span><br><span class="line">              width = <span class="number">750</span> * dpr;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">var</span> rem = <span class="number">100</span> * (width / <span class="number">750</span>);</span><br><span class="line">          docEl.style.fontSize = rem + <span class="string">'px'</span>;</span><br><span class="line">          flexible.rem = win.rem = rem;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      win.addEventListener(<span class="string">'resize'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          clearTimeout(tid);</span><br><span class="line">          tid = setTimeout(refreshRem, <span class="number">300</span>);</span><br><span class="line">      &#125;, <span class="literal">false</span>);</span><br><span class="line">      win.addEventListener(<span class="string">'pageshow'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (e.persisted) &#123;</span><br><span class="line">              clearTimeout(tid);</span><br><span class="line">              tid = setTimeout(refreshRem, <span class="number">300</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (doc.readyState === <span class="string">'complete'</span>) &#123;</span><br><span class="line">          doc.body.style.fontSize = <span class="number">12</span> * dpr + <span class="string">'px'</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          doc.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">              doc.body.style.fontSize = <span class="number">12</span> * dpr + <span class="string">'px'</span>;</span><br><span class="line">          &#125;, <span class="literal">false</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      refreshRem();</span><br><span class="line">      flexible.dpr = win.dpr = dpr;</span><br><span class="line">      flexible.refreshRem = refreshRem;</span><br><span class="line">      flexible.rem2px = <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> val = <span class="built_in">parseFloat</span>(d) * <span class="keyword">this</span>.rem;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">typeof</span> d === <span class="string">'string'</span> &amp;&amp; d.match(<span class="regexp">/rem$/</span>)) &#123;</span><br><span class="line">              val += <span class="string">'px'</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> val;</span><br><span class="line">      &#125;</span><br><span class="line">      flexible.px2rem = <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> val = <span class="built_in">parseFloat</span>(d) / <span class="keyword">this</span>.rem;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">typeof</span> d === <span class="string">'string'</span> &amp;&amp; d.match(<span class="regexp">/px$/</span>)) &#123;</span><br><span class="line">              val += <span class="string">'rem'</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> val;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;)(<span class="built_in">window</span>, <span class="built_in">window</span>[<span class="string">'lib'</span>] || (<span class="built_in">window</span>[<span class="string">'lib'</span>] = &#123;&#125;));</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>小程序基本知识</title>
      <link href="/2018/09/29/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/"/>
      <url>/2018/09/29/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><ul><li>按F1查看快捷键命令(<code>fn + f1</code>)</li><li><code>command + e</code> 查看最近打开的文件</li><li><code>command + p</code> 搜索文件</li></ul><h3 id="小程序尺寸和单位设计原则"><a href="#小程序尺寸和单位设计原则" class="headerlink" title="小程序尺寸和单位设计原则"></a>小程序尺寸和单位设计原则</h3><p>在小程序中单位主要分为两种 <code>px</code> 和 <code>rpx</code>，</p><blockquote><p>rpx（responsive pixel）: 可以根据屏幕宽度进行自适应。规定屏幕宽为750rpx。如在 iPhone6 上，屏幕宽度为375px，共有750个物理像素，则750rpx = 375px = 750物理像素，1rpx = 0.5px = 1物理像素。</p></blockquote><p>微信小程序的设计图最好是以iphone6屏幕尺寸来设计，也就是750 * 1334的尺寸。因为这个尺寸在布局中可以避免计算的麻烦，直接按照设计图的px尺寸来换算, 1rpx = 1px(iphone6 设计图), 如果在小程序中要使用px单位，则需要(设计图px / 2)来计算，因为iphone6的像素密度为 2dpi, 也就是1px等于2倍的物理像素。</p><p>小程序大部分的情况下是使用rpx为单位，好处是尺寸随设备的dpi变化，而变化，不用去考虑响应式。如果不希望放大缩小，就需要使用px为单位。</p><h3 id="page样式的巧妙应用"><a href="#page样式的巧妙应用" class="headerlink" title="page样式的巧妙应用"></a>page样式的巧妙应用</h3><p>有时间需要定义全局的样式时候，可以在根目录 app.wxss 中这么定义</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">page</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"PingFangSC-Thin"</span>;</span><br><span class="line">  <span class="attribute">font-size</span>:<span class="number">32</span>rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为小程序所有组件都是引入到 page页面中，而page页面最顶层是一个page标签，这些属性被后面的标签所继承(如 font-… 、 color ，会从组件外继承到组件内)。</p><blockquote><p>根目录 .wxss 中的类，只能在page中去使用，无法在组件中使用.</p></blockquote><h3 id="相对路径和绝对路径"><a href="#相对路径和绝对路径" class="headerlink" title="相对路径和绝对路径"></a>相对路径和绝对路径</h3><p>在小程序中，组件可以使用绝对路径和相对路径，但是对于自己封装的模块，使用import引入的时候只能使用相对路径</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"usingComponents"</span>:&#123;</span><br><span class="line">    <span class="string">"v-like"</span>: <span class="string">"/components/like/index"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;HTTP&#125; <span class="keyword">from</span> <span class="string">'../../util/http.js'</span></span><br></pre></td></tr></table></figure><h3 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h3><h4 id="自定义组件触发事件"><a href="#自定义组件触发事件" class="headerlink" title="自定义组件触发事件"></a>自定义组件触发事件</h4><p>使用场景：子组件的业务，需要交给父组件去执行。</p><p>为什么要如此？<br>对于一个通用组件来说，把数据请求写组件中是不明智的，如果这个组件在其他的项目中去使用的话，api地址，参数等等，都不一样，没有复用性。就算在同一个项目中，不同的类别可能api也不同。所以最好的方式是，这部分业务逻辑交写在父组件里面，子组件只包含能共用的基本逻辑。</p><p>自定义组件触发事件时，需要使用 triggerEvent 方法，来激活父组件中所绑定自定义的事件，同时传递当前子组件的一些内部状态给父组件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子组件中</span></span><br><span class="line"><span class="keyword">this</span>.triggerEvent(<span class="string">'like'</span>,&#123;behavior&#125;,&#123;&#125;)</span><br></pre></td></tr></table></figure><p>第一个参数为自定义事件名, 第二个参数是传递给父组件的一些参数（子组件的内部状态），在父组件中通过 <code>event.detail</code> 字段来获取, 第三个参数为 触发事件的选项<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/events.html?search-key=this.triggerEvent" target="_blank" rel="noopener">参考</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父组件.wxml，这里v-like为子组件，like为自定义事件名。</span></span><br><span class="line">&lt;v-like bind:like=<span class="string">"onLike"</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父组件.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  onLike: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(event.detail) <span class="comment">//子组件传递过来的参数</span></span><br><span class="line">    <span class="comment">//执行业务逻辑</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="observer"><a href="#observer" class="headerlink" title="observer"></a>observer</h4><p>当组件中的从外部传递进来的属性值值被触发修改时，会执行这个函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">properties: &#123;</span><br><span class="line">  idnex: &#123;</span><br><span class="line">    type: <span class="built_in">String</span>,</span><br><span class="line">    observer: <span class="function"><span class="keyword">function</span>(<span class="params">newVal, oldVal, changedPath</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> val = newVal &lt; <span class="number">10</span>? <span class="string">'0'</span> + newVal: newVal</span><br><span class="line">      <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">        index: val   <span class="comment">//这里会发生内存泄漏...</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.ywx.store/0073tXM5gy1fy1y1cztqaj30jt0dnwfm.jpg" alt="image"></p><h4 id="behaviors组件间代码共享"><a href="#behaviors组件间代码共享" class="headerlink" title="behaviors组件间代码共享"></a>behaviors组件间代码共享</h4><ul><li>behaviors可以包含 properties、data、生命周期方法（和组件所包含的方法、属性一样）。</li><li>每个组件可以引用多个behavior</li><li>behavior可以引用其他behavior</li><li>behavior需要使用 Behavior()构造器定义</li></ul><p>使用示例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//classic-beh.js</span></span><br><span class="line"><span class="keyword">let</span> classicBeh = Behavior(&#123;</span><br><span class="line">  behaviors: [],</span><br><span class="line">  properties: &#123;</span><br><span class="line">    img: <span class="built_in">String</span>,</span><br><span class="line">    content: <span class="built_in">String</span></span><br><span class="line">  &#125;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    myBehaviorData: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  attached: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    myBehaviorMethod: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; classicBeh &#125;</span><br></pre></td></tr></table></figure><h5 id="behaviors覆盖规则"><a href="#behaviors覆盖规则" class="headerlink" title="behaviors覆盖规则"></a>behaviors覆盖规则</h5><p>组件和他引用的behavior 中可以包含同名字段，对这些字段的处理方法如下：</p><ul><li>如果有同名的属性或方法、组件本身的属性或方法是优先使用的。</li><li>如果一个组件引用了了多个 behavior, <code>behaviors: [myBehavior1,myBehavior2]</code>, 数组中越靠后的覆盖前面的属性和方法</li><li>如果同名的数据字段是对象类型，会进行对象合并，如果是非对象类型则会进行相互覆盖</li><li>生命周期函数不会相互覆盖，而是多次被调用。</li></ul><h4 id="slot-插槽"><a href="#slot-插槽" class="headerlink" title="slot 插槽"></a>slot 插槽</h4><p>通俗点来说，就是从组件的外部传递标签，到组件的内部来显示, <code>&lt;slot name=&quot;&quot;&gt;&lt;/slot&gt;</code> 标签在哪，传进来的标签位置就在哪。（可以在组件内部就写好，通过properties来控制显示和隐藏,但是slot更加的灵活）<br>不传递的时候slot就是一组空插槽，并且不会显示。</p><p>使用组件slot插槽</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子组件组件.wxss</span></span><br><span class="line">&lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">"container"</span>&gt;</span><br><span class="line">  &lt;text&gt;&#123;&#123;text&#125;&#125;&lt;<span class="regexp">/text&gt;</span></span><br><span class="line"><span class="regexp">  &lt;slot name="after"&gt;&lt;/</span>slot&gt;</span><br><span class="line">&lt;<span class="regexp">/view&gt;</span></span><br></pre></td></tr></table></figure><p>组件启用slot插槽功能<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子组件.js</span></span><br><span class="line">options: &#123;</span><br><span class="line">  multipleSlots:<span class="literal">true</span> <span class="comment">// 在组件定义时的选项中启用slot支持,单个多个slot都需设置</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父组件</span></span><br><span class="line">&lt;v-tag text=<span class="string">"&#123;&#123;content&#125;&#125;"</span>&gt;</span><br><span class="line">  &lt;text slot=<span class="string">"after"</span>&gt;&#123;&#123;nums&#125;&#125;&lt;<span class="regexp">/text&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>v-tag&gt;</span><br></pre></td></tr></table></figure><h4 id="传递外部样式"><a href="#传递外部样式" class="headerlink" title="传递外部样式"></a>传递外部样式</h4><p>一般写业务代码时候，可以直接通过CSS选择器，来强行修改组件内部的样式，但是如果对于开源的组件，就需要使用小程序传递样式类的这种机制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子组件.js</span></span><br><span class="line">Component(&#123;</span><br><span class="line">  externalClasses: [<span class="string">'tag-class'</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子组件.wxml</span></span><br><span class="line">&lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">"container tag-class"</span>&gt;</span><br><span class="line">  &lt;text&gt;&#123;&#123;text&#125;&#125;&lt;<span class="regexp">/text&gt;</span></span><br><span class="line"><span class="regexp">  &lt;slot name="after"&gt;&lt;/</span>slot&gt;</span><br><span class="line">&lt;<span class="regexp">/view&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>class=”container tag-class” 这里并不会因为.tag-class在.container后面,后面的样式会覆盖前面的情况。小程序目前没有这种机制，需要去增加 .tag-class的权重去覆盖，比如 ！important</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父组件.wxml</span></span><br><span class="line">&lt;v-tag tag-<span class="class"><span class="keyword">class</span></span>=<span class="string">"ex-tag"</span> text=<span class="string">"&#123;&#123;content&#125;&#125;"</span>&gt;</span><br><span class="line">  &lt;text <span class="class"><span class="keyword">class</span></span>=<span class="string">"num"</span> slot=<span class="string">"after"</span>&gt;+&#123;&#123;nums&#125;&#125;&lt;<span class="regexp">/text&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>v-tag&gt;</span><br></pre></td></tr></table></figure><p>父组件.wxss<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.ex-tag</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fffbdd</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="properties和data"><a href="#properties和data" class="headerlink" title="properties和data"></a>properties和data</h3><p>组件中如果打印 <code>this.properties</code> 或 <code>this.data</code> 会发现它们是同一个对象，这是小程序内部的一个机制，他会把这两个对象合并成一个。如出现重名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">properties: &#123;   <span class="comment">//properties会覆盖掉data中的index</span></span><br><span class="line">  index:<span class="built_in">Number</span></span><br><span class="line">&#125;,</span><br><span class="line">data: &#123;</span><br><span class="line">  index: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引用公共的样式"><a href="#引用公共的样式" class="headerlink" title="引用公共的样式"></a>引用公共的样式</h3><p>如果多个组件的样式中有重复的样式，可以提取出来，放在一个单独的<code>.wxss</code>文件中，在组件的 <code>.wxss</code>分别取引入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">"../common.wxss"</span>;</span><br></pre></td></tr></table></figure><h3 id="页面中传递参数"><a href="#页面中传递参数" class="headerlink" title="页面中传递参数"></a>页面中传递参数</h3><p>通过生命周期方法中 ‘onLoad’ 来接收</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//页面跳转传递参数</span></span><br><span class="line">wx.navigateTo(&#123;</span><br><span class="line">  url: <span class="string">`/page/book-detail/book-detail?id=<span class="subst">$&#123;id&#125;</span>`</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接收参数</span></span><br><span class="line">onLoad(option)&#123;</span><br><span class="line">  <span class="keyword">const</span> id = option.id</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="wxs"><a href="#wxs" class="headerlink" title="wxs"></a>wxs</h3><p>wxs是小程序一套脚本语言，可以使wxml具备编写js或调用js的能力，主要是<em>结合wxml</em>来使用，可以写在wxml文件中，或者单独建立一个wxs文件中。</p><p>wxs是借鉴了js的语法，但是和js有很大的不同，无法使用es6的语法。</p><h4 id="建立单个文件"><a href="#建立单个文件" class="headerlink" title="建立单个文件"></a>建立单个文件</h4><p>好处是方便各个组件的wxml来调用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//filter.wxs</span></span><br><span class="line"><span class="keyword">var</span> format = <span class="function"><span class="keyword">function</span>(<span class="params">text</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!text)&#123;  <span class="comment">//会执行两次，第一次undefined报错</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> reg = getRegExp(<span class="string">'\\\\n'</span>, <span class="string">'g'</span>)</span><br><span class="line">  <span class="keyword">return</span> text.replace(reg, <span class="string">'\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;  <span class="comment">//导出函数,无法使用es6语法</span></span><br><span class="line">  format:format, </span><br><span class="line">  limit:limit</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>调用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">wxs</span> <span class="attr">src</span>=<span class="string">"../../util/filter.wxs"</span> <span class="attr">module</span>=<span class="string">"util"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这里的module是自定义的命名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"content"</span> <span class="attr">decode</span>=<span class="string">"&#123;&#123;true&#125;&#125;"</span>&gt;</span>&#123;&#123;util.format(book.summary)&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--decode="&#123;&#123;true&#125;&#125;" 开启转义空格 &amp;nbsp;--&gt;</span></span><br></pre></td></tr></table></figure><h4 id="wxml内编写wxs"><a href="#wxml内编写wxs" class="headerlink" title="wxml内编写wxs"></a>wxml内编写wxs</h4><p>如果在全局只有当前组件使用，可考虑内联的写法。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">wxs</span> <span class="attr">module</span>=<span class="string">"m1"</span>&gt;</span></span><br><span class="line">var msg = "hello world";</span><br><span class="line"></span><br><span class="line">module.exports.message = msg;</span><br><span class="line"><span class="tag">&lt;/<span class="name">wxs</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span> &#123;&#123;m1.message&#125;&#125; <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>面向对象和面向过程</title>
      <link href="/2018/09/29/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%92%8C%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/"/>
      <url>/2018/09/29/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%92%8C%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h3 id="面向过程（Procedure-oriented）"><a href="#面向过程（Procedure-oriented）" class="headerlink" title="面向过程（Procedure-oriented）"></a>面向过程（Procedure-oriented）</h3><p>比如写3个对输入框输入数据校验功能的方法，用了3个函数这是一种面向过程的实现方式。</p><p>弊端：</p><ul><li>无端的在页面中添加了很多全局变量。</li><li>不利于别人重复利用</li><li>一旦别人使用你以前提供的方法，你就不能轻易的去修改这些方法，不利于团队代码维护</li></ul><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p>面向对象：就是将你的需求抽象成一个对象，然后针对这个对象分析其特征（属性）和动作（方法），这个对象我们称之为类</p><p>封装：就是把你需要的功能放在一个对象里</p><h4 id="通过-this-添加的属性和方法同在prototype中添加的属性和方法有什么区别？"><a href="#通过-this-添加的属性和方法同在prototype中添加的属性和方法有什么区别？" class="headerlink" title="通过 this 添加的属性和方法同在prototype中添加的属性和方法有什么区别？"></a>通过 this 添加的属性和方法同在prototype中添加的属性和方法有什么区别？</h4><p>通过this 添加的属性和方法是在当前对象添加的，prototype中添加的属性和方法不是对象自身的，而是对象继承而来的，也就是每个对象通过prototype访问到的，所以我们我们每次通过类创建一个新对象时，这些属性和方法不会再次创建</p><h3 id="类的私有变量和私有方法"><a href="#类的私有变量和私有方法" class="headerlink" title="类的私有变量和私有方法"></a>类的私有变量和私有方法</h3><p>由于JS的函数级作用域，声明在函数内部的变量以及方法在外界是访问不到的，通过这个特性来创建类的私有变量和私有方法。</p><h3 id="类的公有变量和公有方法"><a href="#类的公有变量和公有方法" class="headerlink" title="类的公有变量和公有方法"></a>类的公有变量和公有方法</h3><p>在函数内部通过this创建的属性和方法，在类创建对象时，每个对象都拥有一份并且可以在外部访问到。 <strong>因此通过对象创建的属性可看做是对象的共有属性和共有方法</strong></p><h3 id="类的特权方法"><a href="#类的特权方法" class="headerlink" title="类的特权方法"></a>类的特权方法</h3><p>通过this创建的方法，不但能访问对象的公有属性和公有方法，而且还能访问到 <strong>父类或者对象自身</strong> 的私有属性和私有方法，由于这些方法权利比较大，所以称之为特权方法</p><h3 id="类的构造器"><a href="#类的构造器" class="headerlink" title="类的构造器"></a>类的构造器</h3><p>在对象创建时通过使用 特权方法 我们可以初始化实例对象的一些属性，因此这些在创建对象时调用的特权方法还可以看作是类的构造器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Book = <span class="function"><span class="keyword">function</span>(<span class="params">id, name, price</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">1</span>;         <span class="comment">//私有属性</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">checkId</span>(<span class="params"></span>)</span>&#123;&#125; <span class="comment">//私有方法</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.id = id;               <span class="comment">//公有属性</span></span><br><span class="line">  <span class="keyword">this</span>.copy = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;    <span class="comment">//公有方法</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;   <span class="comment">//特权方法</span></span><br><span class="line">      <span class="comment">//在函数内能访问创建出来对象的公有属性和公有方法，还能访问到父类或者对象自身的私有属性和私有方法</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.getName(name)   <span class="comment">//构造器</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类的静态共有属性和类的共有静态方法"><a href="#类的静态共有属性和类的共有静态方法" class="headerlink" title="类的静态共有属性和类的共有静态方法"></a>类的静态共有属性和类的共有静态方法</h3><p>静态共有属性和类的共有静态方法： 通过类在外面通过点语法定义的属性以及方法</p><p>通过new关键字创建新的对象时，由于类外面通过点语法添加的属性和方法没有执行到，所以新创建的对象中无法获取他们，但是可以通过类来使用。</p><h3 id="类的共有属性和共有方法"><a href="#类的共有属性和共有方法" class="headerlink" title="类的共有属性和共有方法"></a>类的共有属性和共有方法</h3><p>类通过prototype 创建的属性或者方法，在类实例的对象中是可以通过this访问到的，所以把prototype对象中的属性和方法称为共有属性和共有方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Book.isChinese = <span class="literal">true</span>;  <span class="comment">//类静态共有属性（子类对象不能访问）</span></span><br><span class="line">Book.resetTime = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">//类静态共有方法（子类对象不能访问）</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'new Time'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Book.proptype = &#123;</span><br><span class="line">  isJSBook:<span class="literal">false</span>,         <span class="comment">//共有属性</span></span><br><span class="line">  display:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;    <span class="comment">//共有方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>通过new 关键字创建的对象实质是对新对象this的不断赋值，并将prototype指向类的prototype 所指的对象。</p></blockquote><h3 id="创建对象的安全模式"><a href="#创建对象的安全模式" class="headerlink" title="创建对象的安全模式"></a>创建对象的安全模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Book = funtion(title,name,type)&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span> <span class="keyword">instanceof</span> Book)&#123;  <span class="comment">//判断执行过程中this是否指向当前对象（如果是说明是当前对象，如果没有使用new，this指向的是window对象）</span></span><br><span class="line">    <span class="keyword">this</span>.title = title;</span><br><span class="line">    <span class="keyword">this</span>.time = time;</span><br><span class="line">    <span class="keyword">this</span>.type = type;</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Book(title,name,type)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>生成器Generators</title>
      <link href="/2018/09/29/%E7%94%9F%E6%88%90%E5%99%A8Generators/"/>
      <url>/2018/09/29/%E7%94%9F%E6%88%90%E5%99%A8Generators/</url>
      <content type="html"><![CDATA[<h3 id="什么是生成器"><a href="#什么是生成器" class="headerlink" title="什么是生成器?"></a>什么是生成器?</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">quips</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">`你好<span class="subst">$&#123;name&#125;</span>!`</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="string">`这是一个生成器Generators`</span></span><br><span class="line">  <span class="keyword">if</span>(name.startsWith(<span class="string">'y'</span>))&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">`你的名字<span class="subst">$&#123;name&#125;</span>首字母是y`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'我们下次再见'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码称为生成器函数，与普通函数的区别：</p><ul><li>普通函数使用<code>function</code>声明,生成器函数使用 <code>function*</code>声明</li><li>在生成器函数内部，关键字 <code>yield</code> 类似于普通函数的 <code>return</code> 。普通函数只能 <code>return</code> 一次，而生成器函数可以 <code>yield</code> 一次或者多次。在生成器执行的过程中，遇到 <code>yield</code>表达式立即暂停，后续可恢复执行状态</li></ul><blockquote><p>最大区别：普通函数不能自暂停，生成器函数可以。</p></blockquote><h3 id="生成器做了什么？"><a href="#生成器做了什么？" class="headerlink" title="生成器做了什么？"></a>生成器做了什么？</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> value = quips(<span class="string">'yewenxiang'</span>)   <span class="comment">//返回一个已暂停的生成器对象</span></span><br><span class="line"><span class="built_in">console</span>.log(value.next())</span><br><span class="line"><span class="comment">//&#123;value: "你好yewenxiang!", done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(value.next())</span><br><span class="line"><span class="comment">//&#123;value: "这是一个生成器Generators", done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(value.next())</span><br><span class="line"><span class="comment">//&#123;value: "你的名字yewenxiang首字母是y", done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(value.next())</span><br><span class="line"><span class="comment">//&#123;value: "我们下次再见", done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(value.next())</span><br><span class="line"><span class="comment">//&#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><p>上面调用 <code>quips(&#39;yewenxiang&#39;)</code>时，并非立即执行，而是返回一个已暂停的生成器对象，并且赋值给了 <code>value</code> 每当你调用生成器对象的 <code>.next()</code> 方法时，函数调用将其自身解冻并一直运行到下一个yield表达式，再次暂停。</p><blockquote><p>专业术语描述: 每当生成器执行yields语句，生成器的堆栈结构（本地变量、参数、临时值、生成器内部当前执行的位置）被移出堆栈。然而，生成器对象保留了这个堆栈结构的引用，所以后面调用 .next() 可以重新激活堆栈结构并且继续执行。</p></blockquote>]]></content>
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Symbol的理解</title>
      <link href="/2018/09/29/Symbol%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/2018/09/29/Symbol%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h3 id="Symbol是什么"><a href="#Symbol是什么" class="headerlink" title="Symbol是什么"></a>Symbol是什么</h3><ul><li>它是JavaScript的第七种原始类型（ES6新特性，Symbol也是值，不是字符串，也不是对象。）</li></ul><h3 id="Symbol-为什么会出现？"><a href="#Symbol-为什么会出现？" class="headerlink" title="Symbol 为什么会出现？"></a>Symbol 为什么会出现？</h3><ul><li>它能避免命名冲突</li></ul><h3 id="获取Symbol的三种方式"><a href="#获取Symbol的三种方式" class="headerlink" title="获取Symbol的三种方式"></a>获取Symbol的三种方式</h3><ul><li>调用Symbol()<ul><li>这种方式每次调用都会返回一个新的唯一Symbol</li></ul></li><li>调用Smybol.for(string)<ul><li>这种方式会访问Symbol注册表，其中储存了已经存在的一系列Symbol。这种方式与Symbol()定义的独立Symbol不同，Symbol()每次调用都返回一个新的并且唯一的Symbol。如果连续调用 Symbol.for(‘ye’),每次都会返回相同的Symbol。</li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>this的理解</title>
      <link href="/2018/09/29/this%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/2018/09/29/this%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h3 id="this的定义"><a href="#this的定义" class="headerlink" title="this的定义"></a>this的定义</h3><ul><li>this的定义<ul><li>this是在 <strong>执行上下文</strong> 创建时确定的一个在执行过程中不可更改的变量**</li></ul></li><li>执行上下文<ul><li>执行上下文就是JavaScript引擎在执行一段代码之前将代码内部会用到的一些变量、函数、this提前声明然后保存在变量对象中的过程。</li></ul></li></ul><p>this只在 <strong>函数调用阶段确定</strong> ，也就是执行上下文创建的阶段进行赋值，保存在变量对象中。这个特性也导致了this的多变性:函数在不同的调用方式下都可能会导致this的值不同</p><h3 id="严格模式和非严格模式的区别"><a href="#严格模式和非严格模式的区别" class="headerlink" title="严格模式和非严格模式的区别"></a>严格模式和非严格模式的区别</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">   'use strict'</span>;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.a;</span><br><span class="line">&#125;</span><br><span class="line">fun();<span class="comment">//😨报错 Cannot read property 'a' of undefined</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.a;</span><br><span class="line">&#125;</span><br><span class="line">fun();<span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>结论：<strong>当函数独立调用的时候，在严格模式下它的this指向undefined，在非严格模式下，当this指向undefined的时候，自动指向全局对象(浏览器中就是window)</strong></p><h3 id="在对象中使用this"><a href="#在对象中使用this" class="headerlink" title="在对象中使用this"></a>在对象中使用this</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a:<span class="number">1</span>,</span><br><span class="line">  b:<span class="keyword">this</span>.a + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">    c:<span class="keyword">this</span>.a + <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj.c</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(func()); <span class="comment">//1002</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.b); <span class="comment">//1001</span></span><br></pre></td></tr></table></figure><p>结论: <strong>当obj在全局声明的时候,obj内部属性中的this指向全局对象，当obj在一个函数中声明时，严格模式下this指向undefined,非严格模式自动转为window</strong></p><h3 id="一个例子加强理解"><a href="#一个例子加强理解" class="headerlink" title="一个例子加强理解"></a>一个例子加强理解</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a:<span class="number">2</span>,</span><br><span class="line">  b:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(fun())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.b();<span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>解析:这个例子中 fun函数在obj.b方法中定义,为什么结果为1呢，开始我觉得很奇怪，想通后就理解了,上面的结论, <strong>(当函数独立调用的时候，在严格模式下它的this指向undefined，在非严格模式下，当this指向undefined的时候，自动指向window)</strong> , fun函数是在 obj.b 函数中独立调用的，所以这里的this是指向window的</p><h3 id="作为对象的方法"><a href="#作为对象的方法" class="headerlink" title="作为对象的方法"></a>作为对象的方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">2</span>,</span><br><span class="line">  b: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.a;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj.b())<span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>另一个例子加强理解</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">2</span>,</span><br><span class="line">  b: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.a;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> t = obj.b;</span><br><span class="line"><span class="built_in">console</span>.log(t());<span class="comment">//1</span></span><br></pre></td></tr></table></figure><blockquote><p>解释: obj.b属性储存的是对该匿名函数的一个引用（一个地址）,当赋值给t时，直接把地址复制给了t，调用t()  相当于直接调用了那个匿名函数</p></blockquote><h3 id="作为构造函数"><a href="#作为构造函数" class="headerlink" title="作为构造函数"></a>作为构造函数</h3><ul><li>如果函数作为构造函数使用，那么其中的this就代表它即将new出来的对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'yewenxiang'</span>;</span><br><span class="line">  <span class="keyword">this</span>.age = <span class="number">24</span>;</span><br><span class="line">  <span class="keyword">this</span>.sex = <span class="string">'man'</span>;</span><br><span class="line">  <span class="keyword">this</span>.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="string">'正在跑步'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span> : Person,</span><br><span class="line">  say:function ()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="string">'正在说话'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span>  person1 = <span class="keyword">new</span> Person()</span><br><span class="line">person1.run()</span><br><span class="line">person1.say()</span><br></pre></td></tr></table></figure><blockquote><p>new 其实是一个语法糖</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//伪代码来看看new 做了什么</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//new 做的事情</span></span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">  obj.__proto__ = Person.prototype <span class="comment">//继承原型上的方法和属性</span></span><br><span class="line"></span><br><span class="line">  obj.name = <span class="string">'yewenxiang'</span>;</span><br><span class="line">  ...     <span class="comment">//对于构造函数中的this 一系列赋值,</span></span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.创建一个临时的对象</span></span><br><span class="line"><span class="comment">//2.给临时对象绑定原型</span></span><br><span class="line"><span class="comment">//3.给临时对象对应的属性赋值</span></span><br><span class="line"><span class="comment">//4.返回一个临时对象</span></span><br></pre></td></tr></table></figure><blockquote><p>prototype对象的方法中的this指向实例对象，因为实例对象的<strong>proto</strong>已经指向了构造函数的prototype,方法会沿着原型链进行查找</p></blockquote><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><ul><li>箭头函数的this不是在调用时候确定的，这是箭头函数的好处之一，因为他的this不会变来变去。箭头函数会捕获其所在上下文的this的值,箭头函数this在词法层面就完成了绑定。apply,call方法只是传入参数，却改变不了this。</li></ul>]]></content>
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>js继承的几种方式</title>
      <link href="/2018/09/29/js%E7%BB%A7%E6%89%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>/2018/09/29/js%E7%BB%A7%E6%89%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="类式继承（通过把父类的实例赋值给子类的原型来实现）"><a href="#类式继承（通过把父类的实例赋值给子类的原型来实现）" class="headerlink" title="类式继承（通过把父类的实例赋值给子类的原型来实现）"></a>类式继承（通过把父类的实例赋值给子类的原型来实现）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperClass</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">SuperClass.prototype.book = [<span class="string">'JavaScript'</span>,<span class="string">'HTML'</span>,<span class="string">'CSS'</span>]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubClass</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">SubClass.prototype = <span class="keyword">new</span> SuperClass()</span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubClass()</span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubClass()</span><br><span class="line"><span class="built_in">console</span>.log(instance1.book)</span><br><span class="line">instance2.book.push(<span class="string">'yewenxiang'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(instance1.book)</span><br></pre></td></tr></table></figure><p>缺点:</p><ul><li>1.如果父类中共有属性要是有引用类型，在一个子类的实例更改了子类原型从父类构造函数，或者父类原型中继承来的共有属性，就会直接影响到其他子类</li><li>2.由于子类实现的继承是靠其原型prototype对父类的实例化实现的，因此在创建父类时，无法向父类传递参数，因而在实例化父类的时候也无法对父类构造函数内的属性传递参数初始化</li></ul><h3 id="构造函数继承-（通过在子类的构造函数调用父类的构造函数执行环境来实现继承）"><a href="#构造函数继承-（通过在子类的构造函数调用父类的构造函数执行环境来实现继承）" class="headerlink" title="构造函数继承 （通过在子类的构造函数调用父类的构造函数执行环境来实现继承）"></a>构造函数继承 （通过在子类的构造函数调用父类的构造函数执行环境来实现继承）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperClass</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.book = [<span class="string">'JavaScript'</span>,<span class="string">'HTML'</span>,<span class="string">'CSS'</span>]</span><br><span class="line">  <span class="keyword">this</span>.id = id</span><br><span class="line">&#125;</span><br><span class="line">SuperClass.prototype.showBook = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.book)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubClass</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">  SuperClass.call(<span class="keyword">this</span>,id)  <span class="comment">//call可以更改函数的执行环境，因此在子类中，对superClass调用这个方法就是在子类中的变量在父类中执行一遍，由于父类中是给this绑定的属性，因此子类自然也继承了父类共有的属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubClass(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubClass(<span class="number">11</span>);</span><br><span class="line">instance1.book.push(<span class="string">'yewenxiang'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(instance1.book)    <span class="comment">//["JavaScript", "HTML", "CSS", "yewenxiang"]</span></span><br><span class="line"><span class="built_in">console</span>.log(instance1.id)      <span class="comment">//10</span></span><br><span class="line"><span class="built_in">console</span>.log(instance2.book)    <span class="comment">//["JavaScript", "HTML", "CSS"]</span></span><br><span class="line"><span class="built_in">console</span>.log(instance2.id)      <span class="comment">//11</span></span><br><span class="line">instance1.showBook()           <span class="comment">//TypeError</span></span><br></pre></td></tr></table></figure><p>缺点:</p><ul><li>这种类型的继承没有涉及原型，所以父类的原型方法自然不会被子类继承，如果想要被子类继承就必须放在构造函数中，这样创建出来的每个实例都会单独拥有一份而不能共用，违背了代码复用的原则</li></ul><h3 id="组合继承-结合了类式继承和构造函数继承的优点"><a href="#组合继承-结合了类式继承和构造函数继承的优点" class="headerlink" title="组合继承(结合了类式继承和构造函数继承的优点)"></a>组合继承(结合了类式继承和构造函数继承的优点)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperClass</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">      <span class="keyword">this</span>.book = [<span class="string">'HTML'</span>,<span class="string">'JavaScript'</span>,<span class="string">'CSS'</span>]</span><br><span class="line">&#125;</span><br><span class="line">SuperClass.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubClass</span>(<span class="params">name,time</span>)</span>&#123;</span><br><span class="line">  SuperClass.call(<span class="keyword">this</span>,name)</span><br><span class="line">  <span class="keyword">this</span>.time = time;</span><br><span class="line">&#125;</span><br><span class="line">SubClass.prototype = <span class="keyword">new</span> SuperClass()</span><br><span class="line">SubClass.prototype.getTime = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.time)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubClass(<span class="string">'js book'</span>,<span class="number">2014</span>)</span><br><span class="line">instance1.book.push(<span class="string">'yewenxiang'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(instance1.book)   <span class="comment">//["HTML", "JavaScript", "CSS", "yewenxiang"]</span></span><br><span class="line">instance1.getName()           <span class="comment">//js book</span></span><br><span class="line">instance1.getTime()           <span class="comment">//2014</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubClass(<span class="string">'css book'</span>,<span class="number">2015</span>)</span><br><span class="line"><span class="built_in">console</span>.log(instance2.book)   <span class="comment">//["HTML", "JavaScript", "CSS"]</span></span><br><span class="line">instance2.getName()           <span class="comment">//css book</span></span><br><span class="line">instance2.getTime()           <span class="comment">//2015</span></span><br></pre></td></tr></table></figure><p>缺点:</p><ul><li>在使用构造函数式继承时执行了一遍父类的构造函数，而实现子类原型的类式继承又调用了一遍父类的构造函数，因此父类构造函数调用了两遍，不是最完美的方式。</li></ul><h3 id="原型式继承（对类式继承的一个封装）"><a href="#原型式继承（对类式继承的一个封装）" class="headerlink" title="原型式继承（对类式继承的一个封装）"></a>原型式继承（对类式继承的一个封装）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritObject</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">        F.prototype = o;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">  name:<span class="string">'js book'</span>,</span><br><span class="line">  alikeBook:[<span class="string">'css book'</span>,<span class="string">'html book'</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> newBook = inheritObject(book)</span><br><span class="line">newBook.name = <span class="string">'ajax book'</span>;</span><br><span class="line">newBook.alikeBook.push(<span class="string">'xml book'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> otherBook = inheritObject(book)</span><br><span class="line">otherBook.name = <span class="string">'flash book'</span>;</span><br><span class="line">otherBook.alikeBook.push(<span class="string">'as book'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(book.name)             <span class="comment">//js book</span></span><br><span class="line"><span class="built_in">console</span>.log(book.alikeBook)        <span class="comment">//["css book", "html book", "xml book", "as book"]</span></span><br><span class="line"><span class="built_in">console</span>.log(newBook.name)          <span class="comment">//ajax book</span></span><br><span class="line"><span class="built_in">console</span>.log(newBook.alikeBook)     <span class="comment">//["css book", "html book", "xml book", "as book"]</span></span><br><span class="line"><span class="built_in">console</span>.log(otherBook.name)        <span class="comment">//flash book</span></span><br><span class="line"><span class="built_in">console</span>.log(otherBook.alikeBook)   <span class="comment">//["css book", "html book", "xml book", "as book"]</span></span><br></pre></td></tr></table></figure><p>优点:</p><ul><li>和类式继承类似，不过由于F过渡类的构造函数无内容，开销比较小</li></ul><p>缺点:</p><ul><li>类式继承的缺点</li></ul><h3 id="寄生式继承-（对原型继承的二次封装）"><a href="#寄生式继承-（对原型继承的二次封装）" class="headerlink" title="寄生式继承 （对原型继承的二次封装）"></a>寄生式继承 （对原型继承的二次封装）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">        name:<span class="string">'js book'</span>,</span><br><span class="line">        alikeBook:[<span class="string">'css book'</span>,<span class="string">'html book'</span>]</span><br><span class="line">      &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createBook</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = <span class="keyword">new</span> inheritObject(obj)</span><br><span class="line">  o.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> o</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释:</p><ul><li>对原型继承的二次封装,并在二次封装的过程中对继承的对象进行扩展，新创建的对象不仅有父类的属性和方法，而且添加了新的属性和方法</li></ul><h3 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritObject</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">      F.prototype = o;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">subClass, superClass</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> p = inheritObject(superClass.prototype)</span><br><span class="line">  <span class="comment">//复制一份父类的原型副本保存在变量中</span></span><br><span class="line">  p.constructor = subClass</span><br><span class="line">  <span class="comment">//修正因为重写子类原型导致子类的constructor属性被修改</span></span><br><span class="line">  subClass.prototype = p</span><br><span class="line">  <span class="comment">//设置子类的原型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperClass</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.color=[<span class="string">'red'</span>,<span class="string">'blue'</span>,<span class="string">'green'</span>];</span><br><span class="line">&#125;</span><br><span class="line">SuperClass.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubClass</span>(<span class="params">name, time</span>)</span>&#123;</span><br><span class="line">  SuperClass.call(<span class="keyword">this</span>,name)</span><br><span class="line">  <span class="keyword">this</span>.time = time;</span><br><span class="line">&#125;</span><br><span class="line">inheritPrototype(SubClass,SuperClass)</span><br><span class="line">SubClass.prototype.getTime  = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.time)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubClass(<span class="string">'js book'</span>, <span class="number">2014</span>)</span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubClass(<span class="string">'js book'</span>, <span class="number">2015</span>)</span><br><span class="line"></span><br><span class="line">instance1.color.push(<span class="string">'black'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(instance1.color)   <span class="comment">//["red", "blue", "green", "black"]</span></span><br><span class="line"><span class="built_in">console</span>.log(instance2.color)   <span class="comment">//["red", "blue", "green"]</span></span><br><span class="line">instance1.getTime()            <span class="comment">//2014</span></span><br><span class="line">instance2.getName()            <span class="comment">//js book</span></span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是:子类想添加原型和方法必须通过 .prototype 来添加，直接赋予对象会覆盖掉从父类原型继承的对象了</p></blockquote><h3 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h3><ul><li>单继承</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> extend = <span class="function"><span class="keyword">function</span>(<span class="params">target, source</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> property <span class="keyword">in</span> source)&#123;</span><br><span class="line">    target[property] = source[property]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> target</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：就是对对象中的属性的一个复制过程，extends方法只是一个浅复制，只能复制值类型的属性，对于引用类型的无能为力，复制成功后，在新对象中修改了引用对象的值，原来的值也会改变。</p><ul><li>多继承<ul><li>实际上是在单继承的基础上多传入几个对象，做一些改变就实现了</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mix = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">1</span>,            <span class="comment">//从第二个参数起为被继承的对象，第一个参数为需要继承的对象</span></span><br><span class="line">      len = <span class="built_in">arguments</span>.length,  <span class="comment">//获取所有被继承的对象数组</span></span><br><span class="line">      target = <span class="built_in">arguments</span>[<span class="number">0</span>],</span><br><span class="line">      arg;</span><br><span class="line">    <span class="comment">//遍历被继承的对象数组</span></span><br><span class="line">  <span class="keyword">for</span>(;i &lt; len; i++)&#123;</span><br><span class="line">    arg = <span class="built_in">arguments</span>[i];      <span class="comment">//缓存当前对象</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> property <span class="keyword">in</span> arg)&#123;</span><br><span class="line">      target[property] = arg[property];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> target</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以绑定到原生对象Object上,这样所有的对象都拥有这个方法了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.mix = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span>,              <span class="comment">//从第一个参数起为被继承对象</span></span><br><span class="line">      len = <span class="built_in">arguments</span>.length,</span><br><span class="line">      arg,</span><br><span class="line">      <span class="keyword">for</span>(;i &lt; len; i++)&#123;</span><br><span class="line">        arg = <span class="built_in">arguments</span>[i]</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> property <span class="keyword">in</span> arg)&#123;</span><br><span class="line">          <span class="keyword">this</span>[property] = arg[property]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">otherBook.mix(book1,book2)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js继承 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>react-native添加自定义图标</title>
      <link href="/2018/09/29/react-native%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9B%BE%E6%A0%87/"/>
      <url>/2018/09/29/react-native%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9B%BE%E6%A0%87/</url>
      <content type="html"><![CDATA[<h3 id="首先下载图标文件"><a href="#首先下载图标文件" class="headerlink" title="首先下载图标文件"></a>首先下载图标文件</h3><ul><li><a href="http://www.iconfont.cn/" target="_blank" rel="noopener">阿里图标库</a></li></ul><p>下载完毕后，只需要 <code>iconfont.ttf</code> 这个文件就行了。</p><h3 id="IOS配置"><a href="#IOS配置" class="headerlink" title="IOS配置"></a>IOS配置</h3><ul><li>首先建立一个 <code>font</code> 文件夹,里面放入 <code>iconfont.ttf</code></li><li>打开 <code>toydb.xcodeproj</code> 文件</li></ul><p><img src="http://img.ywx.store/0073tXM5gy1fy1xu4xoc8j307f076jro.jpg" alt="image"></p><p><img src="http://img.ywx.store/0073tXM5gy1fy1xn9m29aj308o04k0tq.jpg" alt="image"></p><p><img src="http://img.ywx.store/0073tXM5gy1fy1xsorl2pj30ei02idg6.jpg" alt="image"></p><h3 id="android-配置"><a href="#android-配置" class="headerlink" title="android 配置"></a>android 配置</h3><p>直接把 <code>iconfont.ttf</code> 放在 <code>项目根目录/android/app/src/main/assets/fonts/</code> 中就行了</p><h3 id="下一步使用"><a href="#下一步使用" class="headerlink" title="下一步使用"></a>下一步使用</h3><ul><li>首先项目需要重新打包 <code>react-native run-ios</code></li><li>然后，添加如下代码就OK了</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;&#123;fontFamily:</span>'<span class="attr">iconfont</span>'&#125;&#125;&gt;</span>&amp;#xe603;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>图标字符可以点击下载的图标文件 <code>demo_unicode.html</code> 来查看</p></blockquote>]]></content>
      
      <categories>
          
          <category> react-native </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react-native </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>常用的command</title>
      <link href="/2018/09/29/%E5%B8%B8%E7%94%A8%E7%9A%84bash%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/09/29/%E5%B8%B8%E7%94%A8%E7%9A%84bash%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<ul><li>查看端口是否被占用 <code>lsof -n -i4TCP:8081</code></li><li>杀死端口被占用的进程 <code>sudo kill -9 7763</code></li><li>升级react-native <code>react-native-git-upgrade</code>,直接升级到最新版本。升级到指定的版本 <code>react-native-git-upgrade X.Y.Z</code>。<ul><li>升级时遇到的<a href="https://github.com/facebook/react-native/issues/11578" target="_blank" rel="noopener">问题</a> ,删除掉 <code>&quot;react-native-camera&quot;: &quot;git+https://github.com/lwansbrough/react-native-camera.git&quot;,</code> 更新完成后，再安装 <code>react-native-camera</code></li></ul></li><li><code>npm outdated</code> 查看有哪些包可更新</li><li><code>npm-check -u</code> 查看有哪些包可更新</li><li><code>npm list -g --depth 0</code> 查看全局安装的包(<code>depth 0</code> 是只显示最顶层的包，不显示下面的依赖包)</li><li><code>npm update</code> 升级所有更新包,npm 2.6.1后才支持</li><li><code>yarn upgrade react-native-modalbox</code> 升级包</li><li><code>which react-native</code> 查看包的路径</li><li><code>mono --arch=32 Fiddler.exe</code> 打开exe文件</li><li><code>lsof -i:端口号</code> <code>kill -9 PID</code>杀死进程</li><li>git 版本回滚 <code>git reset --hard HEAD~0</code></li></ul>]]></content>
      
      
        <tags>
            
            <tag> command </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>react-native-vector-icons用法</title>
      <link href="/2018/09/29/react-native-vector-icons%E7%94%A8%E6%B3%95/"/>
      <url>/2018/09/29/react-native-vector-icons%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>react-native-vector-icons 是一个字体图标的库。</p><ul><li><a href="https://oblador.github.io/react-native-vector-icons/" target="_blank" rel="noopener">react-native-vector-icons</a></li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="首先进入到项目目录"><a href="#首先进入到项目目录" class="headerlink" title="首先进入到项目目录"></a>首先进入到项目目录</h4><ul><li>npm install react-native-vector-icons –save</li><li>npm install rnpm -g</li><li>rnpm link</li><li>然后在项目目录 打开demo/ios/demo.xcodeproj 文件，弹出xcode，右键工程文件<code>Add Files to ..</code></li><li>选择 deno_modules/react-native-ver-icons/Fonts文件夹。</li></ul><p>在xcode的Info.plist文件中,加入: <code>Fonts provided by application</code>数组,并根据需要加入以下9项:</p><ul><li><a href="http://entypo.com/" target="_blank" rel="noopener">Entypo</a></li><li><a href="http://evil-icons.io/" target="_blank" rel="noopener">EvilIcons</a></li><li><a href="http://fontawesome.io/icons/" target="_blank" rel="noopener">FontAwesome</a></li><li><a href="http://zurb.com/playground/foundation-icon-fonts-3" target="_blank" rel="noopener">Foundation</a></li><li><a href="http://ionicframework.com/docs/ionicons/" target="_blank" rel="noopener">Ionicons</a></li><li><a href="https://www.google.com/design/icons/" target="_blank" rel="noopener">MaterialIcons</a></li><li><a href="https://materialdesignicons.com/" target="_blank" rel="noopener">MaterialCommunityIcons</a></li><li><a href="http://octicons.github.com" target="_blank" rel="noopener">Octicons</a></li><li><a href="http://zocial.smcllns.com/" target="_blank" rel="noopener">Zocial</a></li><li><a href="http://simplelineicons.com/" target="_blank" rel="noopener">SimpleLineIcons</a></li></ul>]]></content>
      
      <categories>
          
          <category> react-native </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react-native </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>redux</title>
      <link href="/2018/09/29/redux/"/>
      <url>/2018/09/29/redux/</url>
      <content type="html"><![CDATA[<h1 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h1><p>数据流是什么？为什么要用数据流？</p><ul><li>数据流是我们的行为与响应的抽象</li><li>使用数据流可以帮助我们明确行为对应的响应</li></ul><p>React与数据流的关系</p><ul><li>React 是纯V层的框架，不涉及任何的数据和控制，需要数据流进行支撑</li></ul><p>主流数据流框架</p><ul><li><p>Flux</p><ul><li>facebook 官方出的一个配合React来实现数据流的框架，属于单向数据流绑定，非常的大和重，实用性不强。</li></ul></li><li><p>reFlux</p><ul><li>属于 Flux 的一个第三方的框架。</li></ul></li><li><p>redux</p><ul><li>属于 Flux 的一个第三方的框架，简单 / 单一的状态树</li></ul></li></ul><h1 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h1><p>不只是前端，很多系统开发的时候遵从的都是MVC分离，也就是数据放在Model里面，View来控制显示，Controler做整体的管理。但是随着系统的庞大，它会产生一系列问题。比如举个例子，我们上网shopping，提交订单，那么用户的账号，优惠信息，物流信息，库存等等的Model都会发生更新变化，然后View上的显示也会随之变化，反过来，View的有些变化也会对Model产生影响，这样就使用户下了一个订单以后界面会变得什么样变得不可预测。</p><p><img src="http://img.ywx.store/0073tXM5gy1fy1y3p6z9aj30ii0egn1j.jpg" alt="image"></p><p>所以在React出现的同时Facebook也搞出了一个Flux <code>单向数据流</code> (React是纯V层框架，需要数据流进行支撑)，它的思想如下:它认为用户有各种各样的Action,然后所有的Action由一个统一的Dispacher分发到若干个Store里去，这个Store保存着数据也保存着页面的状态，根据数据和页面的状态，一个store只能向视图层传递信息，而不允许视图层再返回来作用到Store上，然后视图就发生更新，然后再由用户传入新的操作。这样子我们就能预测到Action作用到Store上时，View发生什么变化。</p><p><img src="http://img.ywx.store/0073tXM5gy1fy1xuzt7gmj30t20jw49j.jpg" alt="image"></p><p>Redux是Flux的一种实现方法，但是也有些许不一样，它的思想如下</p><p><img src="http://img.ywx.store/0073tXM5gy1fy1xnw7yczj30v00mqwjd.jpg" alt="image"></p><p><img src="http://img.ywx.store/0073tXM5gy1fy1y0vh8xej30qm0p6al6.jpg" alt="image"></p><p>当页面渲染完，UI就出现了，然后用户触发UI上的Action，然后Action被送到Reducer这个方法里去，然后Reducer更新了Store，Store里包含react开发的State，最后State决定UI层的展现。这就是Redux的一个完整过程。</p><h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><p>四个重要的文件夹</p><ul><li>actions:用户的行为</li><li>components:</li><li>container:</li><li>reducer:负责分发axtions行为，根据用户的行为作出一个响应</li><li>index.html</li><li>server.js</li><li>webpack</li></ul><p><img src="http://img.ywx.store/0073tXM5gy1fy1xm14jlqj31760lagsc.jpg" alt="image"></p><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add --save redux react-redux</span><br></pre></td></tr></table></figure><p>redux本身就是一个工具流，而react-redux则是对redux的绑定。类似的还有ng2-redux、backbone-redux等</p><h1 id="action"><a href="#action" class="headerlink" title="action"></a>action</h1><ul><li>是行为的抽象</li><li>是普通的JS对象</li><li>一般由方法生成</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> addTodo = <span class="function">(<span class="params">text</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type: <span class="string">'ADD_TODO'</span>,</span><br><span class="line">    id:nextTodoId++,</span><br><span class="line">    text</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="reducer"><a href="#reducer" class="headerlink" title="reducer"></a>reducer</h1><ul><li>是响应的抽象</li><li>是纯方法 ： 可以完全的根据我们的输入来得到输出，非纯方法指的是，比如需要依赖系统的时间，依赖系统的状态。reducer里面只能是纯方法</li><li>传入旧状态state和action,返回新状态</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> todo = <span class="function">(<span class="params">state,action</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'ADD_TODO'</span>:</span><br><span class="line">      <span class="keyword">return</span>&#123;</span><br><span class="line">        id:action.id,</span><br><span class="line">        text:action.text,</span><br><span class="line">        completed:<span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'TOGGLE_TODO'</span>:</span><br><span class="line">      <span class="keyword">if</span>(state.id !== action.id)&#123;</span><br><span class="line">        <span class="keyword">return</span> state</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;,state,&#123;<span class="attr">completed</span>:!state.completed&#125;)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="store"><a href="#store" class="headerlink" title="store"></a>store</h1><p>store 可以看做是 state 和 reducer 的集合，state是运行的时候才会有的，我们定义好的只有 reducer ,</p><ul><li>store 可以看做是所有数据和状态的存储</li><li>action 作用于 store</li><li>reducer 根据store 响应</li><li>store 是唯一的</li><li>store 包括了完整的 state</li><li>state 完全可预测</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createStore&#125; <span class="keyword">from</span> <span class="string">"redux"</span></span><br><span class="line"><span class="keyword">import</span> todoApp <span class="keyword">from</span> <span class="string">"./reducers"</span></span><br><span class="line"><span class="keyword">let</span> store = createStore(todoApp)</span><br><span class="line"><span class="comment">//调用 createStore来生成 store，需要传 reducers</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>pug</title>
      <link href="/2018/09/29/pug/"/>
      <url>/2018/09/29/pug/</url>
      <content type="html"><![CDATA[<h3 id="命令行中的pug"><a href="#命令行中的pug" class="headerlink" title="命令行中的pug"></a>命令行中的pug</h3><p><img src="http://img.ywx.store/0073tXM5gy1fy1y2q710qj30ni0cftfy.jpg" alt="image"></p><h3 id="安装pug"><a href="#安装pug" class="headerlink" title="安装pug"></a>安装pug</h3><p>全局安装pug<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --global pug</span><br><span class="line">$ npm install --global pug-cli</span><br></pre></td></tr></table></figure></p><p>编译pug文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pug -P -w index.pug</span><br></pre></td></tr></table></figure><ul><li><code>-P</code> 编译后的html便于查看，保留空白节点</li><li><code>-w</code> 持续监控文件修改，修改马上编译</li></ul><p><img src="http://img.ywx.store/0073tXM5gy1fy1y7qp6kyj30kf07lt9v.jpg" alt="image"></p><h3 id="类、ID、属性"><a href="#类、ID、属性" class="headerlink" title="类、ID、属性"></a>类、ID、属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">h1#title(class=&apos;title2&apos;).title pug stydy</span><br><span class="line">#test.test</span><br><span class="line">input(checked,value=&apos;ye&apos;)</span><br></pre></td></tr></table></figure><p>编译后<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"title2 title"</span> <span class="attr">id</span>=<span class="string">"title"</span>&gt;</span>pug stydy<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">checked</span> <span class="attr">value</span>=<span class="string">"ye"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ul><li>属性一般在标签后的括号里面，用逗号隔开。</li><li>类和ID有点特殊，可以直接在标签后面以链接的形式来写，当然由于也属于属性，也可以使用括号包裹的写法</li><li>div标签可以省略， <code>div#test.test</code> 等价于 <code>#test.test</code> 。</li><li>对于没有属性值的直接写就行了，比如 input 里面的checked.</li></ul><h3 id="多行文本"><a href="#多行文本" class="headerlink" title="多行文本"></a>多行文本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p</span><br><span class="line">  | 1. aa</span><br><span class="line">  | 2. bb</span><br><span class="line">  | 3. cc</span><br></pre></td></tr></table></figure><p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p.</span><br><span class="line">  1. aa</span><br><span class="line">  2. bb</span><br><span class="line">  3. cc</span><br></pre></td></tr></table></figure></p><p>编译后<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  1. aa</span><br><span class="line">  2. bb</span><br><span class="line">  3. cc</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="多行文本中标签的写法分成两种"><a href="#多行文本中标签的写法分成两种" class="headerlink" title="多行文本中标签的写法分成两种"></a>多行文本中标签的写法分成两种</h4><p>第一种是带点的纯文本的方式<br><img src="http://img.ywx.store/0073tXM5gy1fy1xs3bvz5j30iq047mxl.jpg" alt="image"></p><p>第二种采用缩进的节点方式来写，把文本看做一个文本节点<br><img src="http://img.ywx.store/0073tXM5gy1fy1y1l7j0sj30q0049aaq.jpg" alt="image"></p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p><img src="http://img.ywx.store/0073tXM5gy1fy1xr1ktmmj30qg04jq4f.jpg" alt="image"></p><p>对于IE的条件注释<br>)![pug5](./someImg/pug5.png</p><h3 id="行内的style和script写法"><a href="#行内的style和script写法" class="headerlink" title="行内的style和script写法"></a>行内的style和script写法</h3><p><img src="http://img.ywx.store/0073tXM5gy1fy1y61yqgbj30rf08n40d.jpg" alt="image"></p><h3 id="声明变量和替换数据"><a href="#声明变量和替换数据" class="headerlink" title="声明变量和替换数据"></a>声明变量和替换数据</h3><h4 id="在html中声明变量"><a href="#在html中声明变量" class="headerlink" title="在html中声明变量"></a>在html中声明变量</h4><p>括号里面可以对变量做一些js的处理<br><img src="http://img.ywx.store/0073tXM5gy1fy1y3gyuznj30rs06sq4i.jpg" alt="image"></p><h4 id="命令行中传值"><a href="#命令行中传值" class="headerlink" title="命令行中传值"></a>命令行中传值</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pug -P -w index.pug --obj <span class="string">'&#123;"name":"xiangwang"&#125;'</span></span><br></pre></td></tr></table></figure><p>可以看到页面中接收到了 name 这个变量的值</p><blockquote><p>如果html中声明的变量和命令行中的变量同名，则html中的变量优先级高</p></blockquote><h4 id="通过json文件传变量"><a href="#通过json文件传变量" class="headerlink" title="通过json文件传变量"></a>通过json文件传变量</h4><p>创建一个json文件然后命令行中执行以下代码:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pug -P -w index.pug --O data.json</span><br></pre></td></tr></table></figure></p><h3 id="安全转义与非转义"><a href="#安全转义与非转义" class="headerlink" title="安全转义与非转义"></a>安全转义与非转义</h3><p><code>安全转义</code> 也就是有时候我们希望页面中显示标签，也就是html中是转义后的字符。<br><img src="http://img.ywx.store/0073tXM5gy1fy1xob48z8j30st05pgn5.jpg" alt="image"></p><p><code>非安全转义</code> 有时候我们就是希望html中显示的就是标签<br><img src="http://img.ywx.store/0073tXM5gy1fy1y8qdtjaj30ur03qdgt.jpg" alt="image"></p><h4 id="其他的方式"><a href="#其他的方式" class="headerlink" title="其他的方式"></a>其他的方式</h4><p>和上面的结果一样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p= htmlData</span><br><span class="line">p!= htmlData</span><br></pre></td></tr></table></figure></p><p>如果我们有时候想页面中输出 <code>#{}</code>和<code>!{}</code> 怎么办呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p \#&#123;htmlData&#125;</span><br><span class="line">p !#&#123;htmlData&#125;</span><br></pre></td></tr></table></figure><p>就显示成了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>#&#123;htmlData&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>!&#123;htmlData&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="流程代码-for-each-while"><a href="#流程代码-for-each-while" class="headerlink" title="流程代码 for-each-while"></a>流程代码 for-each-while</h3><h4 id="for和each的使用方式"><a href="#for和each的使用方式" class="headerlink" title="for和each的使用方式"></a>for和each的使用方式</h4><p><img src="http://img.ywx.store/0073tXM5gy1fy1xqrmd6lj30qb0ftn1j.jpg" alt="image"></p><h4 id="white使用方式"><a href="#white使用方式" class="headerlink" title="white使用方式"></a>white使用方式</h4><p><img src="http://img.ywx.store/0073tXM5gy1fy1y2yt5wsj30g805a0td.jpg" alt="image"></p><h3 id="流程代码-if-else-unless-swic"><a href="#流程代码-if-else-unless-swic" class="headerlink" title="流程代码 if-else-unless-swic"></a>流程代码 if-else-unless-swic</h3><h4 id="if-else-的使用方式"><a href="#if-else-的使用方式" class="headerlink" title="if-else 的使用方式"></a>if-else 的使用方式</h4><p><img src="http://img.ywx.store/0073tXM5gy1fy1xufv2gzj30o608djsu.jpg" alt="image"></p><h4 id="unless（除非）"><a href="#unless（除非）" class="headerlink" title="unless（除非）"></a>unless（除非）</h4><p>如果是 false 就会往先执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unless !what</span><br><span class="line">  p #&#123;what.length&#125;</span><br></pre></td></tr></table></figure></p><h4 id="case-when"><a href="#case-when" class="headerlink" title="case-when"></a>case-when</h4><p>switch 语句是if-else-if 的兄弟语句,我们在 pug中可以使用 cass-when 来实现的<br><img src="http://img.ywx.store/0073tXM5gy1fy1xxvdq0oj30iq08xmys.jpg" alt="image"></p><h3 id="mixin"><a href="#mixin" class="headerlink" title="mixin"></a>mixin</h3><p>使用 <code>mixin</code> 可以让pug的代码块重用,编译时会转换 javascript 中的函数，可以看做是一个函数，既然是函数，就可以传递参数<br><img src="http://img.ywx.store/0073tXM5gy1fy1y09jd83j30ky0bf76k.jpg" alt="image"></p><h4 id="mixin的嵌套"><a href="#mixin的嵌套" class="headerlink" title="mixin的嵌套"></a>mixin的嵌套</h4><p><img src="http://img.ywx.store/0073tXM5gy1fy1y00ktpaj30rn083wgr.jpg" alt="image"></p><h4 id="内联mixin代码块"><a href="#内联mixin代码块" class="headerlink" title="内联mixin代码块"></a>内联mixin代码块</h4><p><img src="http://img.ywx.store/0073tXM5gy1fy1xsd3owhj30ge07tt9t.jpg" alt="image"></p><p>解释：调用 <code>team</code>函数的时候，下面包含一个 <code>p Good job!</code> 就代表代码块<code>block</code>，注意缩进关系。函数中说明的是，如果有代码块就执行代码块，否则执行<code>p no team</code>。</p><p>除了代码块和文本，mixin还支持传递属性，比如传递classname<br><img src="http://img.ywx.store/0073tXM5gy1fy1y2gu38bj30ri0cpq6t.jpg" alt="image"></p><h3 id="pug模板的继承"><a href="#pug模板的继承" class="headerlink" title="pug模板的继承"></a>pug模板的继承</h3><p>pug通过 <code>block</code> 和 <code>extends</code> 这两个关键字来实现模板的继承，一个块可以看做是一个block，它在子模板中来实现，同时支持递归。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//- layout.pug</span><br><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    title My Site - #&#123;title&#125;</span><br><span class="line">    block scripts</span><br><span class="line">      script(src=&apos;/jquery.js&apos;)</span><br><span class="line">  body</span><br><span class="line">    block content</span><br><span class="line">    block foot</span><br><span class="line">      #footer</span><br><span class="line">        p some footer content</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//- pet.pug</span><br><span class="line">p= petName</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//- page-a.pug</span><br><span class="line">extends layout.pug</span><br><span class="line"></span><br><span class="line">block scripts</span><br><span class="line">  script(src=&apos;/jquery.js&apos;)</span><br><span class="line">  script(src=&apos;/pets.js&apos;)</span><br><span class="line"></span><br><span class="line">block content</span><br><span class="line">  h1= title</span><br><span class="line">  - var pets = [&apos;cat&apos;, &apos;dog&apos;]</span><br><span class="line">  each petName in pets</span><br><span class="line">    include pet.pug</span><br></pre></td></tr></table></figure><blockquote><p>include pet.pug 就相当于把 pet.pug中的内容放在了这里</p></blockquote><p>编译 <code>page-a.pug</code> 后 page-a.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My Site - <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/pets.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>cat<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>dog<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>some footer content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>block</code> 默认是替换<code>replace</code>，也就是不写的时候，当同名的时候会替换掉继承过来的 <code>block</code>，可以添加 <code>prepend</code> 或者 <code>append</code> 来实现 <code>block</code> 的合并</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//- layout.pug</span><br><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    block head</span><br><span class="line">      script(src=&apos;/vendor/jquery.js&apos;)</span><br><span class="line">      script(src=&apos;/vendor/caustic.js&apos;)</span><br><span class="line">  body</span><br><span class="line">    block content</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//- page.pug</span><br><span class="line">extends layout.pug</span><br><span class="line"></span><br><span class="line">block append head</span><br><span class="line">  script(src=&apos;/vendor/three.js&apos;)</span><br><span class="line">  script(src=&apos;/game.js&apos;)</span><br></pre></td></tr></table></figure><p>编译 <code>page.pug</code> 后，生成 <code>page.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/vendor/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/vendor/caustic.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/vendor/three.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/game.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="pug-api"><a href="#pug-api" class="headerlink" title="pug api"></a>pug api</h3><p>有五个核心的API：</p><ul><li>pug.compile(source,options)<ul><li>source:string  pug模板的字符</li><li>返回的是一个函数，这个函数是来生成HTML的，对这个函数也可以传入本地变量 eg <code>pug.compile(&#39;div #{course}&#39;,{})({course:&#39;pug&#39;})</code></li></ul></li><li>pug.compileFile(path,options)</li><li>pug.compileClient(source,options)</li><li>pug.render(source,options)<ul><li>source:string  pug模板的字符</li><li>options 可以直接传入一个变量对象 例如 <code>{course:&#39;pug&#39;}</code></li></ul></li><li>pug.renderFile(filename,options)<ul><li>source:string pug模板的路径</li><li>options 可以直接传入一个变量对象 例如 <code>{course:&#39;pug&#39;}</code></li></ul></li></ul><p>options参数是一个对象，可以设置以下属性，更多参考<a href="https://pugjs.org/api/reference.html#pugcompileclientsource-options" target="_blank" rel="noopener">pugAPI</a></p><ul><li>filename:string  正在编译的文件的名称,默认为pug。</li><li>self:boolean 保持一个变量到 self 的 locals (命名空间)</li><li>debug:boolean 开启调试模式</li></ul>]]></content>
      
      
        <tags>
            
            <tag> pug </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>gulp</title>
      <link href="/2018/09/29/gulp/"/>
      <url>/2018/09/29/gulp/</url>
      <content type="html"><![CDATA[<h3 id="gulp的安装"><a href="#gulp的安装" class="headerlink" title="gulp的安装"></a>gulp的安装</h3><p>第一步安装gulp自动化工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g gulp</span><br></pre></td></tr></table></figure><p>第二步初始化项目仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br><span class="line">在项目文件夹中输入，生成一个package.json</span><br></pre></td></tr></table></figure><p>第三步在项目的文件中安装一个gulp</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i --save-dev gulp</span><br><span class="line">等价于  npm i -D gulp</span><br></pre></td></tr></table></figure><p>第四步安装gulp-sass编译插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D gulp-sass</span><br></pre></td></tr></table></figure><h3 id="gulp-的一些常用的插件"><a href="#gulp-的一些常用的插件" class="headerlink" title="gulp 的一些常用的插件"></a>gulp 的一些常用的插件</h3><ul><li>gulp-autoprefixer<ul><li>主要给CSS文件中添加厂商前缀。</li></ul></li><li>gulp-sass<ul><li>把.scss或者.sass编译成.css文件。</li></ul></li><li>gulp-imagemin<ul><li>图片压缩工具，转换后大小变为原来的一般，图片质量不会损失。</li></ul></li><li>gulp-browsersync<ul><li>可以在本地搭建一个http服务器来，同时http开放链接，可以在手机等各个设备打开调试的页面，页面是的操作可以在各个设备上同步。</li><li>页面自动加载，也就是源码修改之后，页面不需要刷新就可以页面自动加载，可以同时在多个设备上完成。</li></ul></li><li>gulp-wrap<ul><li>把页面中一样的部分抽离出来，如 header footer 部分，我们只写页面主体内容，最后通过 gulp 加上 header footer。</li></ul></li><li>gulp-minify-css<ul><li>压缩css代码</li></ul></li><li>gulp-purifycss<ul><li>可以帮我们去除 html/js 页面中根本就没有用到的 CSS 代码（死代码？），想想，如果咱们的项目中用了 bootstrap.css ，肯定会有很多 css 代码是没用的。</li></ul></li></ul><h3 id="gulp自动化脚本的写法"><a href="#gulp自动化脚本的写法" class="headerlink" title="gulp自动化脚本的写法"></a>gulp自动化脚本的写法</h3><p>脚本代码写在gulpfile.js文件中。可以使用 gulp.src 来选取文件，这样里面的数据就会形式“流”，沿着“管道”（ pipe ）一直向前，管道上的每个节点上我们都可以让一个插件发挥作用，然后处理后的数据最终通过 gulp.dest 导出到一个文件夹中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gulp.src(<span class="string">'src/*.scss'</span>)</span><br><span class="line"><span class="comment">//锁定我们要处理的一些文件</span></span><br><span class="line">.pipe(sass())</span><br><span class="line"><span class="comment">//pipe（管道） 把文件交给工具流 sass 处理这些sass文件变成css文件</span></span><br><span class="line">.pipe(prefix())</span><br><span class="line"><span class="comment">//接上一步的文件，添加厂商前缀</span></span><br><span class="line">.pipe(gulp.dest(<span class="string">'css/'</span>));</span><br><span class="line"><span class="comment">//把最后处理好的文件导出到目标文件夹里面</span></span><br></pre></td></tr></table></figure><h3 id="gulp-gulpfile-js-文件中常用写法"><a href="#gulp-gulpfile-js-文件中常用写法" class="headerlink" title="gulp gulpfile.js 文件中常用写法"></a>gulp <code>gulpfile.js</code> 文件中常用写法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>);</span><br><span class="line"><span class="keyword">var</span> prefix = <span class="built_in">require</span>(<span class="string">'gulp-autoprefixer'</span>);</span><br><span class="line"><span class="keyword">var</span> minifyCss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'sass'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  gulp.src(<span class="string">'src/main.scss'</span>)</span><br><span class="line">  .pipe(sass())      <span class="comment">//scss或者sass转化为 css 文件</span></span><br><span class="line">  .pipe(prefix())    <span class="comment">// css文件中添加前缀</span></span><br><span class="line">  .pipe(minifyCss()) <span class="comment">// css文件压缩</span></span><br><span class="line">  .pipe(gule.dest(<span class="string">'dist/'</span>));</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//各个指令封装在 gulp.task之中，第一个参数为名字。</span></span><br><span class="line"><span class="comment">//然后到命令行中打开有 gulpfile.js 文件的位置，执行 gulp sass 命令，会发现，main.scss 文件转化成了 main.css 放在 dist文件夹下了。</span></span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'copy-file'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  gulp.src(<span class="string">'src/*.html'</span>)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist/'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//定义一个拷贝文件的指令，把src文件夹下的所有 .html 文件拷贝到 dist文件夹下。</span></span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>,[<span class="string">'sass'</span>,<span class="string">'copy-file'</span>])</span><br><span class="line"><span class="comment">//同时执行sass copy-file 两个动作,在 bash 中只用输入 gulp 或者 gulp default 就行了</span></span><br></pre></td></tr></table></figure><h3 id="使用-imagemin-来压缩图片"><a href="#使用-imagemin-来压缩图片" class="headerlink" title="使用 imagemin 来压缩图片"></a>使用 imagemin 来压缩图片</h3><p>需要安装两个包，一个是 gulp-imagemin ，另一个是 imagemin-pngquant(专门用来压缩PNG图片的 两个包配合使用)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i -D  gulp-imagemin imagemin-pngquant</span><br></pre></td></tr></table></figure><p>gulpfile.js 中的内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//code</span></span><br><span class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>);</span><br><span class="line"><span class="keyword">var</span> pngquant = <span class="built_in">require</span>(<span class="string">'imagemin-pngquant'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'imagemin'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'src/images/*'</span>)</span><br><span class="line">    .pipe(imagemin(&#123;</span><br><span class="line">      progressive: <span class="literal">true</span>,</span><br><span class="line">      svgoPlugins: [&#123;<span class="attr">removeViewBox</span>: <span class="literal">false</span>&#125;],</span><br><span class="line">      use: [pngquant()]</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist/images'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//code</span></span><br></pre></td></tr></table></figure><p>在命令行中输入 <code>gulp imagemin</code> 就可以压缩图片了。它会把 <code>src/images</code> 文件夹下面的所有图片全部压缩，放在了 <code>dist/images</code> 文件夹中。</p><p>更多文档参考github上的教程 <a href="https://github.com/imagemin/imagemin" target="_blank" rel="noopener">imagemin</a></p>]]></content>
      
      <categories>
          
          <category> 自动化工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gulp </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>同步加载、异步加载、延迟加载</title>
      <link href="/2018/09/29/%E5%90%8C%E6%AD%A5%E5%8A%A0%E8%BD%BD%E3%80%81%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD%E3%80%81%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD/"/>
      <url>/2018/09/29/%E5%90%8C%E6%AD%A5%E5%8A%A0%E8%BD%BD%E3%80%81%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD%E3%80%81%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD/</url>
      <content type="html"><![CDATA[<h3 id="同步加载"><a href="#同步加载" class="headerlink" title="同步加载"></a>同步加载</h3><p>平常默认用的都是<code>同步加载</code>。如：<code>&lt;script src=&quot;http://XXX.com/script.js&quot;&gt;&lt;/script&gt;</code><br><code>同步模式</code>又称<code>阻塞模式</code>，会阻止浏览器的后续处理，停止了后续的文件的解析，执行，如图像的渲染。</p><p>一般的script标签（不带async等属性）加载时会阻塞浏览器，也就是说，浏览器在下载或执行该js代码块时，后面的标签不会被解析，例如在head中添加一个script，但这个script下载时网络不稳定，很长时间没有下载完成对应的js文件，那么浏览器此时一直等待这个js文件下载，此时页面不会被渲染，用户看到的就是白屏。</p><p>流览器之所以会采用同步模式，是因为加载的js文件中有对dom的操作，重定向，输出document等默认行为，所以同步才是最安全的。通常会把要加载的js放到body结束标签之前，使得js可在页面最后加载，尽量减少阻塞页面的渲染。这样可以先让页面显示出来。</p><h3 id="异步加载-async-loading"><a href="#异步加载-async-loading" class="headerlink" title="异步加载 (async loading)"></a>异步加载 (async loading)</h3><p>常见异步加载举例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> s = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">s.type = <span class="string">'text/javascript'</span>;</span><br><span class="line">s.async = <span class="literal">true</span>;</span><br><span class="line">s.src = <span class="string">'http://XXX.com/script.js'</span>;</span><br><span class="line"><span class="keyword">var</span> x = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'script'</span>)[<span class="number">0</span>];</span><br><span class="line"> x.parentNode.insertBefore(s, x);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><p><code>异步加载</code>也叫<code>非阻塞模式加载</code>，浏览器在下载js的同时，同时还会执行后续的页面处理。<br>在script标签内，用js创建一个script元素并插入到document中，这种就是异步加载js文件了。</p><p>同步加载流程是瀑布模型，异步加载流程是并发模型。</p><h3 id="延迟加载-lazy-loading"><a href="#延迟加载-lazy-loading" class="headerlink" title="延迟加载 (lazy loading)"></a>延迟加载 (lazy loading)</h3><p>有些 js 代码并不是页面初始化的时候就立刻需要的，而稍后的某些情况才需要的。延迟加载就是一开始并不加载这些暂时不用的js，而是在需要的时候或稍后再通过js 的控制来异步加载。<br>也就是将 js 切分成许多模块，页面初始化时只加载需要立即执行的 js ，然后其它 js 的加载延迟到第一次需要用到的时候再加载。<br>特别是页面有大量不同的模块组成，很多可能暂时不用或根本就没用到。<br>就像图片的延迟加载，在图片出现在可视区域内时（在滚动条下拉）才加载显示图片。</p><h3 id="预加载"><a href="#预加载" class="headerlink" title="预加载"></a>预加载</h3><p>预加载是一种浏览器机制，使用浏览器空闲时间来预先下载/加载用户接下来很可能会浏览的页面/资源，当用户访问某个预加载的链接时，如果从缓存命中,页面就得以快速呈现。</p><h3 id="HTML页面加载和解析流程"><a href="#HTML页面加载和解析流程" class="headerlink" title="HTML页面加载和解析流程"></a>HTML页面加载和解析流程</h3><ul><li>用户输入网址访问静态的资源文件（假设是个html页面，并且是第一次访问，此时确保文件不是从缓存里取出），浏览器向服务器发出请求，服务器返回html文件。</li><li>浏览器开始载入html代码，发现<head>标签内有一个<link>标签引用外部CSS文件。</head></li><li>浏览器又发出CSS文件的请求，服务器返回这个CSS文件。</li><li>浏览器继续载入html中<body>部分的代码，并且CSS文件已经拿到手了，可以开始渲染页面了。</body></li><li>浏览器在代码中发现一个<img>标签引用了一张图片，向服务器发出请求。此时浏览器不会等到图片下载完，而是继续渲染后面的代码。</li><li>服务器返回图片文件，由于图片占用了一定面积，影响了后面段落的排布，因此浏览器需要回过头来重新渲染这部分代码。</li><li>浏览器发现了一个包含一行JavaScript代码的<script>标签，赶快运行它。</li><li>Javascript脚本执行了这条语句，它命令浏览器隐藏掉代码中的某个<style>（style.display=”none”）。</li><li>当遇到</html>代码时，渲染结束。</li></ul><h3 id="加载方式"><a href="#加载方式" class="headerlink" title="加载方式"></a>加载方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// some code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码会在 <strong>整个页面的document全部加载完成以后执行</strong>。不幸的这种方式不仅要求页面的DOM tree全部加载完成，而且要求所有的外部图片和资源全部加载完成。更不幸的是，如果外部资源，例如图片需要很长时间来加载，那么这个js效果就会让用户感觉失效了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//some code</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>简写形式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//some code</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>就仅仅 <strong>只需要加载所有的DOM结构</strong>，在浏览器把所有的HTML放入DOM树之前就执行js效果。包括在加载外部图片和资源之前。</p></script></li></ul>]]></content>
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js加载方式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>flexbox弹性布局</title>
      <link href="/2018/09/29/flexbox%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/"/>
      <url>/2018/09/29/flexbox%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/</url>
      <content type="html"><![CDATA[<p><strong>任何一个容器都可以指定 Flex 布局</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>行内元素也可以使用 Flex 布局</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Webkit 内核的浏览器要加上 <code>-webkit</code> 前缀</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-flex;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>设为 Flex 布局后，子项目的 <code>float</code> , <code>clear</code> 和 <code>vertical-align</code> 属性都将失效。</p></blockquote><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>采用 Flex 布局的元素(display:flex)，称为 Flex 容器（flex container），它的所有子元素自动成为容器成员，称为子项目。<br><img src="http://img.ywx.store/0073tXM5gy1fy1xxnssw4j30fe08zjs0.jpg" alt="image"></p><p>容器默认存在两根主轴: <code>水平的主轴(main axis)</code> 和 <code>垂直的交叉轴(cross axis)</code>。</p><p>主轴的开始位置(与边框的交叉点)叫做 <code>main start</code> , 结束位置叫做 <code>main end</code> ;交叉轴的开始位置叫做 <code>cross start</code> , 结束位置叫做 <code>cross end</code> 。</p><p>项目默认沿着主轴排列,单个子项目占据的主轴空间叫做 <code>main size</code> ,占据的交叉轴空间叫做 <code>cross size</code> 。</p><hr><h3 id="Flex-容器的六个属性"><a href="#Flex-容器的六个属性" class="headerlink" title="Flex 容器的六个属性"></a>Flex 容器的六个属性</h3><blockquote><ul><li>flex-direction : row  row-reverse  column  column-reverse</li><li>flex-warp : nowrap  wrap  wrap-reverse</li><li>flex-flow : <code>&lt;flex-direction&gt;</code> 和 <code>&lt;flex-wrap&gt;</code></li><li>justify-content : flex-start  flex-end  center  space-beteen  space-around</li><li>align-items : flex-start  flex-end  center  baseline  stretch</li><li>align-content : flex-start  flex-end  center  space-beteen  space-around  stretch</li></ul></blockquote><h4 id="flex-direction-属性"><a href="#flex-direction-属性" class="headerlink" title="flex-direction 属性"></a>flex-direction 属性</h4><p><code>flex-direction</code> 属性决定主轴的方向(即子项目的排列方向),它可能有4个值:</p><blockquote><ul><li>row(默认值) : 主轴为水平方向，起点在左端。</li><li>row-reverse : 主轴为水平方向，起点在右端。</li><li>column : 主轴为垂直方向，起点在顶部(top)。</li><li>column-reverse : 主轴为垂直方向，起点在底部(bottom)。</li></ul></blockquote><p><img src="http://img.ywx.store/0073tXM5gy1fy1xvdvtpnj30lk05d0so.jpg" alt="image"></p><h4 id="flex-wrap-属性"><a href="#flex-wrap-属性" class="headerlink" title="flex-wrap 属性"></a>flex-wrap 属性</h4><p>默认情况下，子项目都排在一条轴线上。 <code>flex-wrap</code> 属性定义了如果一条轴线排不下如何换行。</p><blockquote><ul><li>nowrap(默认值) : 不换行</li><li>wrap : 换行，第一行在上方</li><li>wrap-reverse : 换行，第一行在下方。如下图</li></ul></blockquote><p><img src="http://img.ywx.store/0073tXM5gy1fy1y1tskbdj30jh04xacg.jpg" alt="image"></p><h4 id="flex-flow-属性"><a href="#flex-flow-属性" class="headerlink" title="flex-flow 属性"></a>flex-flow 属性</h4><p><code>flex-flow</code> 属性是 <code>flex-direction</code> 属性和 <code>flex-wrap</code> 属性的简写形式，默认值为 <code>row nowrap</code></p><h4 id="justify-content-属性"><a href="#justify-content-属性" class="headerlink" title="justify-content 属性"></a>justify-content 属性</h4><p><code>justify-content</code> 属性定义了子项目在主轴上的对齐方式，他可能取五个值，具体对齐方式与轴的方向有关，下面假设主轴从左到右。</p><blockquote><ul><li>flex-start(默认值) : 左对齐</li><li>flex-end : 右对齐</li><li>center : 居中</li><li>space-beteen : 两段对齐，子项目之间的间隔都相等</li><li>space-around : 每个子项目两侧的间隔相等。所以，子项目之间的间隔比项目与容器边框的间隔大一倍</li></ul></blockquote><p><img src="http://img.ywx.store/0073tXM5gy1fy1xy9nqanj30bs0dmq3e.jpg" alt="image"></p><h4 id="align-items-属性"><a href="#align-items-属性" class="headerlink" title="align-items 属性"></a>align-items 属性</h4><p><code>align-items</code> 属性定义子项目在交叉轴上如何对齐,默认情况下是垂直方向,从上到下。</p><blockquote><ul><li>flex-start : 交叉轴的起点对齐</li><li>flex-end : 交叉轴的终点对齐</li><li>center : 交叉轴的中点对齐</li><li>baseline : 项目的第一行文字的基线对齐</li><li>stretch(默认值) : 如果子项目未设置高或者设置为auto,将占满整个容器的高度</li></ul></blockquote><p><img src="http://img.ywx.store/0073tXM5gy1fy1y44cx9nj30bg0e23z4.jpg" alt="image"></p><h4 id="align-content-属性"><a href="#align-content-属性" class="headerlink" title="align-content 属性"></a>align-content 属性</h4><p><code>align-content</code> 属性定义了多根轴线的对齐方式，如果项目只有一根轴线，该属性不起作用。</p><blockquote><ul><li>flex-start : 与交叉轴的起点对齐</li><li>flex-end : 与交叉轴的终点对齐</li><li>center : 与交叉轴的终点对齐</li><li>space-beteen : 与交叉轴两端对齐，轴线之间的间隔平均分布</li><li>space-around : 每根轴线两侧的间隔都相等，所以，轴线之间的间隔比轴线与容器边框的间隔大一倍</li></ul></blockquote><p><img src="http://img.ywx.store/0073tXM5gy1fy1y7ioetpj30bh0e1t9g.jpg" alt="image"></p><hr><h3 id="Flex-子项目的6个属性"><a href="#Flex-子项目的6个属性" class="headerlink" title="Flex 子项目的6个属性"></a>Flex 子项目的6个属性</h3><blockquote><ul><li>order : <code>&lt;integer&gt;</code> (整数)</li><li>flex-grow : <code>&lt;number&gt;</code> (正整数)</li><li>flex-shrink : <code>&lt;number&gt;</code>(正整数)</li><li>flex-basis : <code>&lt;length&gt;</code> (子项目固定长度或者auto)</li><li>flex : 是 <code>flex-grow</code> <code>flex-shrink</code> <code>flex-basis</code> 的简写,默认值为 <code>0 1 auto</code> ,后两个属性可选</li><li>align-self : auto  flex-start  flex-end  center  baseline stretch</li></ul></blockquote><h4 id="order-属性"><a href="#order-属性" class="headerlink" title="order 属性"></a>order 属性</h4><p><code>order</code> 属性定义子项目的排列顺序。数值越小，排列越靠前，默认为0。</p><p><img src="http://img.ywx.store/0073tXM5gy1fy1xrhj6haj30dn08pdfz.jpg" alt="image"></p><h4 id="flex-grow-属性"><a href="#flex-grow-属性" class="headerlink" title="flex-grow 属性"></a>flex-grow 属性</h4><p><code>flex-grow</code> 属性定义项目的放大比例，默认值为0，即存在剩余空间也不放大。</p><p>如果所有的子项目 <code>flex-grow</code> 属性都为1，存在剩余空间则它们将等分剩余空间，如果一个子项目的 <code>flex-grow</code> 属性为2，其他子项目都为1，则前者占据的剩余空间将比其他子项目多一倍，如下图。</p><p><img src="http://img.ywx.store/0073tXM5gy1fy1xvx7prej30ej03l0so.jpg" alt="image"></p><h4 id="flex-shrink-属性"><a href="#flex-shrink-属性" class="headerlink" title="flex-shrink 属性"></a>flex-shrink 属性</h4><p><code>flex-shrink</code> 属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p><p>如果所有子项目的  <code>flex-shrink</code> 属性都为1，当空间不足时，都将等比例缩小，如果一个子项目的 <code>flex-shrink</code> 属性为0，其他子项目都为1，则空间不足时，前者不缩小，如下图。</p><p><img src="http://img.ywx.store/0073tXM5gy1fy1xt3a5uvj30d302o0tl.jpg" alt="image"> </p><h4 id="flex-basis-属性"><a href="#flex-basis-属性" class="headerlink" title="flex-basis 属性"></a>flex-basis 属性</h4><p><code>flex-basis</code> 属性定义了在分配多余空间之前，子项目占据的主轴空间，浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为 <code>auto</code> ，即子项目的本来大小。</p><p>它可以设为跟 <code>width</code> 或 <code>height</code> 属性一样的值(比如100px)，则项目将占据固定空间。</p><p><strong>flex-basis 取值情况:</strong></p><ul><li><code>auto</code> :首选检索该子项目的主尺寸（是否设置了width），如果 <code>width</code> 不等于 <code>auto</code>,则使用值 <code>width</code> 的值。如果也是 <code>auto</code>，则使用值为 <code>content</code> 的大小。</li><li><code>content</code> :指根据该子项目的内容自动布局。有的用户代理没有实现取 <code>content</code>的值，等效的替代方案是 <code>flex-basis</code> 和 <code>width</code> 都取 <code>auto</code> 。</li><li>百分比:根据其包含块(即伸缩父容器)的 <code>width</code> 计算。如果包含块的 <code>width</code> 未定义(即父容器的主尺寸取决于子元素)，则计算结果和设为 <code>auto</code> 一样。</li></ul><p><strong>举一个例子：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="undefined">        display: flex;</span></span><br><span class="line"><span class="undefined">        width: 600px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.parent</span> &gt; <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="undefined">        height: 100px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.item-1</span> &#123;</span></span><br><span class="line"><span class="undefined">        width: 140px;</span></span><br><span class="line"><span class="undefined">        flex: 2 1 0%;</span></span><br><span class="line"><span class="undefined">        background: blue;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.item-2</span> &#123;</span></span><br><span class="line"><span class="undefined">        width: 100px;</span></span><br><span class="line"><span class="undefined">        flex: 2 1 auto;</span></span><br><span class="line"><span class="undefined">        background: darkblue;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.item-3</span> &#123;</span></span><br><span class="line"><span class="undefined">        flex: 1 1 200px;</span></span><br><span class="line"><span class="undefined">        background: lightblue;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>主轴上父容器的总尺寸为600px</li><li>子元素的总基准值是:0% + auto + 200px = 300px,其中<ul><li>0% 即 0</li><li>auto 对应取 width=100px</li></ul></li><li>故剩余空间为: 600px - 300px = 300px</li><li>伸缩放大系数之和为: 2+2+1=5</li><li>剩余空间分配如下<ul><li>item-1 和 item-2 各分配 2/5,各得 120px</li><li>item-3 分配 1/5,得60px</li></ul></li><li>各项目最终的宽度为:<ul><li>item-1 = 0% + 120px = 120px</li><li>item-2 = auto +120px =220px</li><li>item-3 = 200px + 60px = 260px</li></ul></li><li>当 item-1 基准值取 0% 的时候，是把该项目视为零尺寸的，故即便声明其尺寸为 140px，也并没有什么用，形同虚设</li><li>而 item-2 基准值取 <code>auto</code> 的时候，根据规则基准值使用值是主尺寸值即 100px，故这 100px 不会纳入剩余空间.</li></ul><h4 id="flex-属性"><a href="#flex-属性" class="headerlink" title="flex 属性"></a>flex 属性</h4><p><code>flex</code> 属性是 <code>flex-grow</code> <code>flex-shrink</code> <code>flex-basis</code> 的简写，默认值为 <code>0 1 auto</code> ,后两个属性可选。</p><p>该属性的快捷键说明：</p><ul><li><code>flex:auto</code> 等价于 <code>flex:1 1 auto</code></li><li><code>flex:none</code> 等价于 <code>flex:0 0 auto</code></li><li><code>flex:1</code> 等价于 <code>flex:1 1 0%</code></li><li><code>flex:0%</code> 等价于 <code>flex:1 1 0%</code></li><li><code>flex:24px</code> 等价于 <code>flex:1 1 24px</code></li><li><code>flex:2 3</code> 等价于 <code>flex:2 3 0%</code></li><li><code>flex:2 23px</code> 等价于 <code>flex:2 1 23px</code></li></ul><p>建议优先使用这个属性，而不是单独写三个分离属性，因为浏览器会推算相关值。</p><h4 id="align-self-属性"><a href="#align-self-属性" class="headerlink" title="align-self 属性"></a>align-self 属性</h4><p><code>align-self</code> 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 <code>align-items</code> 属性。默认值为 <code>auto</code> ，表示继承父元素的 <code>align-items</code> 属性，如果没有父元素，则等同于 <code>stretch</code> 。</p><p><img src="http://img.ywx.store/0073tXM5gy1fy1y5cpedbj30d706nq35.jpg" alt="image"></p><hr><p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool" target="_blank" rel="noopener">—摘自阮一峰的个人博客</a></p>]]></content>
      
      
        <tags>
            
            <tag> flex </tag>
            
            <tag> 布局 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>响应式设计</title>
      <link href="/2018/09/27/%E5%93%8D%E5%BA%94%E5%BC%8F%E8%AE%BE%E8%AE%A1/"/>
      <url>/2018/09/27/%E5%93%8D%E5%BA%94%E5%BC%8F%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<h3 id="为何移动设备优先？"><a href="#为何移动设备优先？" class="headerlink" title="为何移动设备优先？"></a>为何移动设备优先？</h3><p>移动优先当代响应式设计的最佳流程：在制作响应式网站的时候，先搞定手机版，然后再去为更大设备去设计和开发。<br>无论从界面设计还是代码执行效率的角度而言，移动优先都有明显优势。</p><ul><li>由简入繁</li></ul><h3 id="定制自己的色盘"><a href="#定制自己的色盘" class="headerlink" title="定制自己的色盘"></a>定制自己的色盘</h3><ul><li><a href="https://www.materialpalette.com/cyan/pink" target="_blank" rel="noopener">Material Design Color Palette</a> 选择两种颜色，第一种为主色，第二种为强调色。然后下载 SASS版本。</li><li>色盘上各颜色的作用:<ul><li>primary color:主色,一般和白色和灰色混用，来显示页面的主体背景.他和白色灰色加起来要占到页面百分之八九十的面积。</li><li>accent color:强调色,来强调最重要的一些按钮或者是表单的位置，来突出显示。</li><li>text/icons:字体和图片颜色。</li><li>primary text:主要的字体颜色。</li><li>secondary text:从属内容字体颜色。</li><li>divider color:分割线的颜色。</li><li>dark primary color 和 light primary color:深主色和浅主色</li></ul></li></ul><h3 id="什么是响应式？"><a href="#什么是响应式？" class="headerlink" title="什么是响应式？"></a>什么是响应式？</h3><p><em>简单定义</em></p><p>一份代码能够适应全部屏幕尺寸</p><p><em>响应式的三要素</em></p><ul><li>弹性布局</li><li>弹性图片</li><li>media 查询</li></ul><h3 id="四中常见的响应式模式"><a href="#四中常见的响应式模式" class="headerlink" title="四中常见的响应式模式"></a>四中常见的响应式模式</h3><h4 id="Column-Drop列下沉"><a href="#Column-Drop列下沉" class="headerlink" title="Column Drop列下沉"></a>Column Drop列下沉</h4><p>手机上每一个大块单独占据一行，随着屏幕尺寸拉伸会在同一行上形成多个 column 列<br><img src="http://img.ywx.store/0073tXM5gy1fy1xoycemdj30dk08emy9.jpg" alt="image"></p><h4 id="Mostly-Fuild"><a href="#Mostly-Fuild" class="headerlink" title="Mostly Fuild"></a>Mostly Fuild</h4><p>基本上跟 Column Drop 一样，但是有一点点“固定布局“的特点：当到达一定宽度后，主体内容部分不再变宽，成为固定宽度。<br><img src="http://img.ywx.store/0073tXM5gy1fy1xyhd99zj30hq08i0uj.jpg" alt="image"></p><h4 id="Layout-Shifter"><a href="#Layout-Shifter" class="headerlink" title="Layout Shifter"></a>Layout Shifter</h4><p>变换式，也就是不必遵循原有内容顺序，可以根据最佳展示需要来调整大块顺序。<br><img src="http://img.ywx.store/0073tXM5gy1fy1y14m8xhj30f308dgmu.jpg" alt="image"></p><h4 id="Off-Canvas"><a href="#Off-Canvas" class="headerlink" title="Off Canvas"></a>Off Canvas</h4><p>抽屉式，屏幕不够宽的时候，隐藏，通过按钮呼出。足够宽的屏幕上，始终显示。<br><img src="http://img.ywx.store/0073tXM5gy1fy1y86txcsj30gb09ewgf.jpg" alt="image"></p><h3 id="viewport-设置"><a href="#viewport-设置" class="headerlink" title="viewport 设置"></a>viewport 设置</h3><h4 id="问题是什么？"><a href="#问题是什么？" class="headerlink" title="问题是什么？"></a>问题是什么？</h4><p>手机上任何设备都按照 960 的宽度来显示，造成很多设备上字体变成了原来的 1/3 。</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>viewport 就是浏览器窗口。这个设置翻译成大白话就是：浏览器呀，你就按照你的自然宽度来来给我显示网站就行了，不要自作聪明。</p><p>这样就解决了上面所说的问题了。意思是把我的视窗 viewport 的宽度，设置为设备的实际宽度，比如说前面提到的 iphone5 ，本来默认视窗宽度是 960px ，那么有了这一行设置之后，视窗宽度就变成了设备实际宽度了 320px 。这样后面再来显示页面元素，当然就不会缩小了。</p><p>更为常见的设置:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>设备在水平放置的时候（手机横屏），字体会无缘无故的变的很大，所以需要加上 <code>initial-scale=1.0</code> (初始化缩放等于1) 这个设置。</p><h3 id="像素尺寸"><a href="#像素尺寸" class="headerlink" title="像素尺寸"></a>像素尺寸</h3><p>iphone5 对外宣传像素 640*1136像素 是物理像素，而我们实际开发中px是逻辑像素，两则之间的关系是不一样的。</p><ul><li>px: css pixels 逻辑像素，浏览器使用的抽象单位。<ul><li>可以根据不同的设备来变大变小。</li></ul></li><li>dp,pt: device independent pixels 设备无关像素<ul><li>物理像素的大小是固定的</li></ul></li><li>dpr: devicePixelRatio 设备像素缩放比<ul><li>来控制px 与 dp pt 之间的关系，计算公式 1px = dpr<sup>2</sup> * dp</li></ul></li></ul><blockquote><p>为什么iphone5是320px*568px? ==&gt; 因为 dpr = 2</p></blockquote><p><img src="http://img.ywx.store/0073tXM5gy1fy1y247tedj30cr06cwez.jpg" alt="image"></p><p><em>平面上</em>:1px = (2)<sup>2</sup> * dp</p><ul><li>也就是1个css像素等于4个物理像素，如上图。</li></ul><p><em>纬度上</em>:1px = 2 * dp</p><p><em>因此</em>: 640dp<em>1136dp ==&gt; 320px</em>568px</p><h3 id="为什么iphone5-的dpr为2？"><a href="#为什么iphone5-的dpr为2？" class="headerlink" title="为什么iphone5 的dpr为2？"></a>为什么iphone5 的dpr为2？</h3><ul><li>DPI:打印机每英寸可以喷的墨汁点（印刷行业）</li><li>PPI:屏幕每英寸的像素数量，即单位英寸内的像素密度<ul><li>目前，在计算机显示设备参数描述上，二者意思表达的是一样的。</li></ul></li></ul><p><em>计算公式</em> :以 iphone5 为例子</p><p>ppi= &radic;(1136<sup>2</sup>dp + 640<sup>2</sup>dp) / 4 = 326ppi (视网膜Retina屏)</p><blockquote><p>PPI越高，像素越高，图像越清晰，但可视度越低，系统默认设置缩放比越大</p></blockquote><p><img src="http://img.ywx.store/0073tXM5gy1fy1y4cqj4zj30qd052dhq.jpg" alt="image"></p><p>Retina 屏（高清屏）:dpr都是大于等于2</p><p><em>整个换算流程以 iphone5 为例子 :</em></p><p>设备分辨率 <em>1136*640 dp</em> ==&gt;</p><p><em>&radic;(1136<sup>2</sup>dp + 640<sup>2</sup>dp) / 4 = 326ppi</em> ==&gt;</p><p>326 ppi属于 retina屏幕, <em>dpr=2</em> ==&gt;</p><p><em>1px = dpr<sup>2</sup> * dp</em> ==&gt;</p><p><em>iphone5</em> 的屏幕为 <em>320 * 568 px</em></p>]]></content>
      
      <categories>
          
          <category> 布局 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 响应式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mongoDB如何搭建数据库</title>
      <link href="/2018/09/27/mongoDB%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2018/09/27/mongoDB%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      <content type="html"><![CDATA[<h3 id="MongoDB-基本概念"><a href="#MongoDB-基本概念" class="headerlink" title="MongoDB 基本概念"></a>MongoDB 基本概念</h3><ul><li><a href="https://www.mongodb.com/" target="_blank" rel="noopener"> MongoDB 的官网</a></li><li><a href="http://www.mongoing.com/" target="_blank" rel="noopener"> MongoDB 中文社区</a></li><li><a href="http://www.mongodb.org.cn/" target="_blank" rel="noopener"> MongoDB 中文网</a></li><li>MongoDB：是一个数据库软件，有时候我们简称它叫一个数据库，但是其实一个 MongoDB 运行起来 可以里面同时运行多个数据库</li><li>Database: 数据库。一般做法是，一个项目对应一个数据库。</li><li>Collection: 集合。类似于关系型数据库下的表的概念，例如全班同学信息。</li><li>Document：文档。一个集合中会包含多个文档（一个文档中存储一个同学的信息）。文档对应关系型数据库中的 记录 这个概念。</li></ul><p><img src="http://img.ywx.store/0073tXM5gy1fy1xq46c96j30aq064glv.jpg" alt="image"></p><p><img src="http://img.ywx.store/0073tXM5gy1fy1xpnvjt8j30gg07jmxx.jpg" alt="image"></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install mongodb</span><br></pre></td></tr></table></figure><p>查看安装目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> mongod</span><br></pre></td></tr></table></figure></p><h3 id="MongoDB启动与使用"><a href="#MongoDB启动与使用" class="headerlink" title="MongoDB启动与使用"></a>MongoDB启动与使用</h3><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p data/db</span><br><span class="line">mongod --dbpath=./data/db</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew services start mongodb</span><br><span class="line">//使用homeBrew安装的 启动命令. </span><br><span class="line">brew services stop mongodb</span><br></pre></td></tr></table></figure><p>一般在项目文件夹主目录建立一个  <code>data/db</code> 文件夹来当做数据库地址。<br><code>mkdir -p</code>  创建一个目录的时候，若其父目录不存在，则自动创建，而不是默认的报错,例如： <code>mkdir /home/a/b</code> 若<code>/home</code>目录下不存在a目录，则会报错。加上-p选项后，就会先建立a目录，然后在a目录下再建立b目录。</p><ul><li>注意：<code>--dbpath</code>后的值表示数据库文件的存储路径,而且后面的路径必须事先创建好，必须已经 <strong>存在</strong> ，否则服务开启失败。</li><li>注意：这个命令窗体绝对不能关,关闭这个窗口就相当于停止了mongodb服务</li><li>也可以在命令后面加上参数 <code>--port 27017</code> 来指定端口</li></ul><p>一直处于运行状态，说明 MongoDB 数据库可以使用了。查看 mongod 命令的帮助文档，可以在命令行中输入命令 <code>mongod -h</code></p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>既然 MongoDB 已经启动了，那如何操作它呢？通过 MongoDB 提供的 mongo shell 工具，可以很方便的和 MongoDB 数据库进行通信，也可以使用图形化的界面。</p><h3 id="使用-mongo-shell-工具操作数据库"><a href="#使用-mongo-shell-工具操作数据库" class="headerlink" title="使用 mongo shell 工具操作数据库"></a>使用 mongo shell 工具操作数据库</h3><p>首先要确保在MongoDB 数据库运行的状态下，才能启动 mongo shell，在命令行中输入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo</span><br></pre></td></tr></table></figure><p>切换到 mongo shell 运行环境，在这里可以调用 MongoDB 提供的接口操作数据库中存储的数据</p><ul><li><code>show dbs</code> 查看所有的数据库名称</li><li><code>db 或 db.getName()</code> 查看当前使用的数据库,db代表的是当前数据库。</li><li><code>use react-express-api</code> 创建新的数据库 react-express-api,但是<code>react-express-api</code>数据库并不存在，只有当数据存入数据库时候才会真正的创建数据库,如果此数据库存在，则切换到此数据库下。</li><li><code>db.createCollection(&#39;posts&#39;)</code> 在数据库中创建一个新的 <code>collection</code>,例子中的是 <code>posts</code> 集合。</li><li>往posts 集合存入数据</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.posts.insert(&#123;<span class="attr">category</span>: <span class="string">'db'</span>, <span class="attr">title</span>: <span class="string">'learning mongodb'</span>, <span class="attr">content</span>: <span class="string">'mongodb is a nosql database'</span>&#125;)</span><br></pre></td></tr></table></figure><ul><li><code>db.posts.find()</code> 查找 posts 集合中的所有记录</li><li>更新 posts 集合中的一条记录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.posts.update(&#123;_id: ObjectId(&apos;xxx&apos;)&#125;, &#123;$set: &#123;title: &apos;mongodb&apos;&#125;&#125;)</span><br></pre></td></tr></table></figure><ul><li><code>db.posts.remove({_id: ObjectId(&#39;xxx&#39;)})</code> 删除 posts 集合中的一条记录</li><li><code>db.posts.remove({})</code> 删除 posts 集合中的所有记录</li><li>删除数据库 react-express-api</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use react-express-api</span><br><span class="line">db.dropDatabase()</span><br></pre></td></tr></table></figure><h3 id="使用图形化界面"><a href="#使用图形化界面" class="headerlink" title="使用图形化界面"></a>使用图形化界面</h3><ul><li>是一个用 express 技术开发的，MongoDB 的 GUI (图形界面)。可以方便美观的 操作 MongoDB 中的数据。</li><li>参考：<a href="http://haoqicat.com/hand-in-hand-react/4-mongo-express" target="_blank" rel="noopener">http://haoqicat.com/hand-in-hand-react/4-mongo-express</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g mongo-express</span><br></pre></td></tr></table></figure><p>mongo-express 装好之后，我们需要通知它到底要连接到哪个数据库，通过修改 mongo-express 的配置文件来搞定。</p><p>首先下面的这个命令可以帮我们找到 mongo-express 的安装位置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm list -g mongo-express</span><br><span class="line">/Users/wenxiangye/.nvm/versions/node/v7.4.0/lib</span><br></pre></td></tr></table></figure><p>找到后就可以进入安装文件夹来修改配置文件了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /Users/wenxiangye/.nvm/versions/node/v7.4.0/lib</span><br><span class="line"><span class="built_in">cd</span> node_modules</span><br><span class="line"><span class="built_in">cd</span> mongo-express</span><br><span class="line">cp config.default.js config.js</span><br></pre></td></tr></table></figure><p>最后一步，就是把示例配置文件 config.defualt.js（这个名字程序是不会读的） ，改名为真实的配置文件　config.js , 也就是说是程序会自动读到的配置文件。<br>打开配置文件，把</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mongo = &#123;</span><br><span class="line">  db:       <span class="string">'db'</span>,</span><br><span class="line">  username: <span class="string">'admin'</span>,</span><br><span class="line">  password: <span class="string">'pass'</span>,</span><br><span class="line">  ...</span><br><span class="line">  url:      <span class="string">'mongodb://localhost:27017/db'</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mongo = &#123;</span><br><span class="line">  db:       <span class="string">'digicity'</span>,</span><br><span class="line">  username: <span class="string">''</span>,</span><br><span class="line">  password: <span class="string">''</span>,</span><br><span class="line">  ...</span><br><span class="line">  url:      <span class="string">'mongodb://localhost:27017/digicity'</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面的　digicity 就是我们要操作的数据库的名字，这个是通过　mongo shell 中，执行 <code>show dbs</code> 看到的。由于我们的 digicity 这个数据库本身没有设置密码，所以上面 username 和 password 两项都改成空字符串就可以了。<br>同时，mongo-express 这个软件自己还有自己登陆的用户名和密码，并且有默认值，通过　config.js 中这几行：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">basicAuth: &#123;</span><br><span class="line">  username: process.env.ME_CONFIG_BASICAUTH_USERNAME || <span class="string">'admin'</span>,</span><br><span class="line">  password: process.env.ME_CONFIG_BASICAUTH_PASSWORD || <span class="string">'pass'</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>默认的用户名是　admin ，密码是　pass 。<br>在命令行中启动 mongo-express</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mongo-express</span><br></pre></td></tr></table></figure><p>浏览器中打开 <a href="http://localhost:8081" target="_blank" rel="noopener">http://localhost:8081</a> 可以开始使用 mongo-express 了。</p>]]></content>
      
      <categories>
          
          <category> mongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongoDB </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>react路由</title>
      <link href="/2018/09/27/react%E8%B7%AF%E7%94%B1/"/>
      <url>/2018/09/27/react%E8%B7%AF%E7%94%B1/</url>
      <content type="html"><![CDATA[<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>使用时首先需要安装 <code>react-router</code> 这个包，<code>Router</code> 组件本身只是一个容器，真正的路由则需要通过 <code>Route</code> 组件定义。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Router, Route, hashHistory &#125; <span class="keyword">from</span> <span class="string">'react-router'</span>;</span><br><span class="line"></span><br><span class="line">render((</span><br><span class="line">  &lt;Router history=&#123;hashHistory&#125;&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"/"</span> component=&#123;App&#125;/&gt;</span><br><span class="line">  &lt;<span class="regexp">/Router&gt;</span></span><br><span class="line"><span class="regexp">), document.getElementById('app'));</span></span><br></pre></td></tr></table></figure><p>访问 <code>/</code> (例如 localhost:8080/),组件 <code>App</code> 就会加载到 <code>document.getElementById(&#39;app&#39;)</code> 这个节点上。<br>当设置 <code>history:{hashHistory}</code> 时，路由的切换由 URL的hash变化决定的，即URL的 <code>#</code> 部分发生变化，举个例子:访问 <code>localhost:8080</code> 时，实际会看到的是 <code>localhost:8080/#/</code>.</p><h4 id="Route组件定义了URL路径与组件的对应关系，可以同时使用多个-Route-组件"><a href="#Route组件定义了URL路径与组件的对应关系，可以同时使用多个-Route-组件" class="headerlink" title="Route组件定义了URL路径与组件的对应关系，可以同时使用多个 Route 组件"></a><code>Route</code>组件定义了URL路径与组件的对应关系，可以同时使用多个 <code>Route</code> 组件</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Router</span> <span class="attr">history</span>=<span class="string">&#123;hashHistory&#125;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">component</span>=<span class="string">&#123;App&#125;/</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/repos"</span> <span class="attr">component</span>=<span class="string">&#123;Repos&#125;/</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/about"</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;/</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面代码中，用户访问 <code>/repos</code>（比如 <a href="http://localhost:8080/#/repos）时，加载" target="_blank" rel="noopener">http://localhost:8080/#/repos）时，加载</a> <code>Repos</code> 组件；访问 <code>/about</code>（<a href="http://localhost:8080/#/about）时，加载" target="_blank" rel="noopener">http://localhost:8080/#/about）时，加载</a> <code>About</code> 组件。</p><h3 id="路由的嵌套"><a href="#路由的嵌套" class="headerlink" title="路由的嵌套"></a>路由的嵌套</h3><p><code>Route</code> 组件还可以嵌套。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Router</span> <span class="attr">history</span>=<span class="string">&#123;hashHistory&#125;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">component</span>=<span class="string">&#123;App&#125;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/repos"</span> <span class="attr">component</span>=<span class="string">&#123;Repos&#125;/</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/about"</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;/</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的嵌套 ,当用户访问 <code>/repos</code> 时，会首先加载 <code>App</code> 组件然后在它的内部再加载 <code>Repos</code>组件，实际上就变成了下面这种关系.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">App</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Repos</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">App</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要注意的是 <code>App</code> 组件需要写成下面的样子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.createClass(&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;this.props.children&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面的代码， <code>App</code> 组件的 <code>this.props.children</code> 属性就代表子组件，正常的组件嵌套不也是需要这样定义吗，这样就比较好理解了。</p><h4 id="另一种定义嵌套路由的方式"><a href="#另一种定义嵌套路由的方式" class="headerlink" title="另一种定义嵌套路由的方式"></a>另一种定义嵌套路由的方式</h4><p>可以不写在 <code>Router</code> 组件里面，单独传入 <code>Router</code> 组件的 <code>router</code> 属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> routes = <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">component</span>=<span class="string">&#123;App&#125;</span>&gt;</span></span></span><br><span class="line">                &lt;Route path="/repos" component=&#123;Repos&#125;/&gt;</span><br><span class="line">                &lt;Route path="/about" component=&#123;About&#125;/&gt;</span><br><span class="line">             &lt;/Route&gt;;</span><br><span class="line"></span><br><span class="line">&lt;Router routes=&#123;routes&#125; history=&#123;browserHistory&#125;/&gt;</span><br></pre></td></tr></table></figure><h3 id="path属性"><a href="#path属性" class="headerlink" title="path属性"></a>path属性</h3><p><code>Route</code> 组件的 <code>path</code> 属性指定路由的匹配规则，这个属性是可以省略的，但是只能是父级省略(父级省不省略都会加载父级，没什么意义)。同级省略也不会加载。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Router</span> <span class="attr">history</span>=<span class="string">&#123;browserHistory&#125;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/about"</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/blog"</span> <span class="attr">component</span>=<span class="string">&#123;Blog&#125;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父级省略了 <code>path=&quot;/&quot;</code> 效果一样，访问<code>/about</code>路由时，父级同样会加载，但是如果 <code>path=&quot;/blog&quot;</code> 省略，当访问 <code>/</code>时 ，Blog组件不会加载。</p><h4 id="path-属性可以使用通配符"><a href="#path-属性可以使用通配符" class="headerlink" title="path 属性可以使用通配符"></a><code>path</code> 属性可以使用通配符</h4><ul><li><code>:name</code> 匹配URL的一个部分，直到遇到 <code>/</code> <code>?</code> <code>#</code> 为止，这个路径参数可以通过 <code>this.props.params.name</code> 取出，举个例子</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;Router history=&#123;browserHistory&#125;&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"/"</span> component=&#123;Home&#125;&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"/about"</span> component=&#123;About&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"/blog/:name"</span> component=&#123;Blog&#125; /&gt;</span><br><span class="line">    &lt;<span class="regexp">/Route&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>Router&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Home.js</span></span><br><span class="line">render()&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      &lt;div style=&#123;&#123;<span class="attr">border</span>:<span class="string">"5px solid green"</span>&#125;&#125;&gt;</span><br><span class="line">        &lt;ul role=<span class="string">"nav"</span>&gt;</span><br><span class="line">          &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/about"</span>&gt;</span>About<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">          &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/blog/yewenxiang"</span>&gt;</span>Blog<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">        我是Home组件.</span></span><br><span class="line"><span class="regexp">        &#123;this.props.children&#125;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Blog.js</span></span><br><span class="line">render()&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      &lt;div style=&#123;&#123;<span class="attr">border</span>:<span class="string">"5px solid red"</span>&#125;&#125;&gt;</span><br><span class="line">        我是Blog组件.</span><br><span class="line">        &lt;h3&gt;&#123;<span class="keyword">this</span>.props.params.name&#125;&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样在 <code>Blog</code>组件中就可以通过 <code>this.props.params.name</code> 拿到 <code>yewenxiang</code> 这个值了。<br>在 <code>Router</code> 定义的是匹配的规则，在 <code>Link</code> 中定义的就是传入 <code>Blog</code>组件的值了。</p><ul><li><code>()</code> 表示URL的这个部分是可选的</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=&quot;/hello(/:name)&quot;&gt;</span><br><span class="line">// 匹配 /hello</span><br><span class="line">// 匹配 /hello/yewenxiang</span><br></pre></td></tr></table></figure><ul><li><code>*</code>匹配任意字符，直到模式里面的下一个字符为止。匹配方式是<code>非贪婪模式</code>。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=&quot;/files/*&quot;&gt;</span><br><span class="line">// 匹配 /files/</span><br><span class="line">// 匹配 /files/a</span><br><span class="line">// 匹配 /files/a/b</span><br><span class="line"></span><br><span class="line">&lt;Route path=&quot;/files/*.*&quot;&gt;</span><br><span class="line">// 匹配 /files/hello.jpg</span><br><span class="line">// 匹配 /files/hello.html</span><br></pre></td></tr></table></figure><ul><li><code>**</code> 匹配任意字符，直到下一个<code>/</code>、<code>?</code>、<code>#</code> 为止。匹配方式是<code>贪婪模式</code>。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=&quot;/**/*.jpg&quot;&gt;</span><br><span class="line">// 匹配 /files/hello.jpg</span><br><span class="line">// 匹配 /files/path/to/file.jpg</span><br></pre></td></tr></table></figure><h3 id="什么是正则表达式的贪婪与非贪婪匹配"><a href="#什么是正则表达式的贪婪与非贪婪匹配" class="headerlink" title="什么是正则表达式的贪婪与非贪婪匹配"></a>什么是正则表达式的贪婪与非贪婪匹配</h3><ul><li>贪婪匹配:正则表达式一般趋向于最大长度匹配，也就是所谓的贪婪匹配。</li><li>非贪婪匹配：就是匹配到结果就好。</li></ul><h3 id="路由的匹配规则"><a href="#路由的匹配规则" class="headerlink" title="路由的匹配规则"></a>路由的匹配规则</h3><ul><li>path属性也可以使用相对路径（不以/开头），匹配时就会相对于父组件的路径。</li><li>路由匹配规则是从上到下执行，一旦发现匹配，就不再其余的规则了。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Router</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/:userName/:id"</span> <span class="attr">component</span>=<span class="string">&#123;UserPage&#125;/</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/about/me"</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;/</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面代码中，用户访问<code>/about/me</code>时，不会触发第二个路由规则，因为它会匹配<code>/:userName/:id</code>这个规则。因此，带参数的路径一般要写在路由规则的底部。</p><h3 id="IndexRoute-指定根路由的默认子组件"><a href="#IndexRoute-指定根路由的默认子组件" class="headerlink" title="IndexRoute 指定根路由的默认子组件"></a>IndexRoute 指定根路由的默认子组件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Router</span> <span class="attr">history</span>=<span class="string">&#123;browserHistory&#125;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/about"</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/blog/:name"</span> <span class="attr">component</span>=<span class="string">&#123;Blog&#125;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的代码，当访问根路径 <code>/</code> 时候没有加载任何的子组件，这是正常的现象，但是如果我们需要访问 <code>/</code> 加载一个默认的组件如何去解决呢。<br><code>IndexRoute</code> 就是来解决这个问题的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Router</span> <span class="attr">history</span>=<span class="string">&#123;browserHistory&#125;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">IndexRoute</span> <span class="attr">component</span>=<span class="string">&#123;In&#125;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/about"</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/blog/:name"</span> <span class="attr">component</span>=<span class="string">&#123;Blog&#125;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// Home.js</span><br><span class="line">&#123;this.props.children || <span class="tag">&lt;<span class="name">In</span> /&gt;</span>&#125;</span><br></pre></td></tr></table></figure><p>这样定义后，当访问 <code>/</code>(根路由),时就会默认加载 <code>In</code> 这个组件了,加载的组件结构如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Home</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">In</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Home</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以把<code>IndexRoute</code>想象成某个路径的<code>index.html</code>。<br>这种组件结构就很清晰了：<code>Home</code>只包含下级组件的共有元素，本身的展示内容则由<code>In</code>组件定义。这样有利于代码分离，也有利于使用React Router提供的各种API。</p><h3 id="路由嵌套和组件嵌套的一个误区"><a href="#路由嵌套和组件嵌套的一个误区" class="headerlink" title="路由嵌套和组件嵌套的一个误区"></a>路由嵌套和组件嵌套的一个误区</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Router</span> <span class="attr">history</span>=<span class="string">&#123;browserHistory&#125;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/about"</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/blog/:name"</span> <span class="attr">component</span>=<span class="string">&#123;Blog&#125;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我在 <code>Home</code> 组件中定义了 <code>{this.props.children}</code>,访问 <code>/</code> 时，以为 <code>About</code> 和 <code>Blog</code>组件也会显示，其实不会，拿上面的代码来说。 <code>/</code> 只会加载 <code>Home</code>组件，而不会加载 <code>About</code>,<code>Blog</code>。结构如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;Home&gt;</span><br><span class="line">&lt;/Home&gt;</span><br></pre></td></tr></table></figure><p>我错误的想成了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//这是我错误的想法</span><br><span class="line"><span class="tag">&lt;<span class="name">Home</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">About</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Blog</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Home</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Redirect-路由的跳转组件"><a href="#Redirect-路由的跳转组件" class="headerlink" title="Redirect 路由的跳转组件"></a>Redirect 路由的跳转组件</h3><p><code>&lt;Redirect&gt;</code>组件用于路由的跳转，即用户访问一个路由，会自动跳转到另一个路由。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Router</span> <span class="attr">history</span>=<span class="string">&#123;browserHistory&#125;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">IndexRoute</span> <span class="attr">component</span>=<span class="string">&#123;In&#125;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/about"</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/me"</span> <span class="attr">component</span>=<span class="string">&#123;Me&#125;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">from</span>=<span class="string">"/messages"</span> <span class="attr">to</span>=<span class="string">"/about"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/blog/:name"</span> <span class="attr">component</span>=<span class="string">&#123;Blog&#125;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span><br></pre></td></tr></table></figure><p>访问 <code>/messages</code> 时会跳转到 <code>/about</code>,结构如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Home</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">About</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Home</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意 <code>&lt;IndexRoute component={In} /&gt;</code> 这个组件没加载,只有访问 <code>/</code>时会加载。</p><h3 id="IndexRedirect-组件"><a href="#IndexRedirect-组件" class="headerlink" title="IndexRedirect 组件"></a>IndexRedirect 组件</h3><p>用于访问根路由的时候，将用户重定向到某个子组件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Router</span> <span class="attr">history</span>=<span class="string">&#123;browserHistory&#125;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">IndexRedirect</span> <span class="attr">to</span>=<span class="string">"/me"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/about"</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/me"</span> <span class="attr">component</span>=<span class="string">&#123;Me&#125;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">"/blog/:name"</span> <span class="attr">component</span>=<span class="string">&#123;Blog&#125;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的代码中，用户访问<code>/</code>根目录时，将重定向到子组件 <code>/me</code>，重定向后页面中渲染的组件结构如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Home&gt;</span><br><span class="line">  &lt;About&gt;</span><br><span class="line">    &lt;Me /&gt;</span><br><span class="line">  &lt;<span class="regexp">/About&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>Home&gt;</span><br></pre></td></tr></table></figure><h3 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h3><p><code>Link</code>组件用于取代<code>&lt;a&gt;</code>元素，生成一个链接，允许用户点击后跳转到另一个路由。它基本上就是<code>&lt;a&gt;</code>元素的React 版本，可以接收<code>Router</code>的状态。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;ul role="nav"&gt;</span><br><span class="line">      &lt;li&gt;&lt;Link to="/about"&gt;About&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;&lt;Link to="/repos"&gt;Repos&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要当前的路由链接与其他路由链接有不同的样式，来突出当前的位置，可以使用 <code>Link</code> 组件的 <code>activeStyle</code> 属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;Link to=&quot;/about&quot; activeStyle=&#123;&#123;color: &apos;red&apos;&#125;&#125;&gt;About&lt;/Link&gt;</span><br><span class="line">&lt;Link to=&quot;/repos&quot; activeStyle=&#123;&#123;color: &apos;red&apos;&#125;&#125;&gt;Repos&lt;/Link&gt;</span><br></pre></td></tr></table></figure><p>上面的代码，当前的链接会显示红色，这种定义方法可以想象成HTML里面定义行内的样式，另外一种更好的方式是，使用<code>activeClassName</code> 指定当前路由链接的 <code>Class</code>，也就是当前页面的路由链接才会添加上这个类，可以想象成外联样式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;Link to=&quot;/about&quot; activeClassName=&quot;active&quot;&gt;About&lt;/Link&gt;</span><br><span class="line">&lt;Link to=&quot;/repos&quot; activeClassName=&quot;active&quot;&gt;Repos&lt;/Link&gt;</span><br></pre></td></tr></table></figure><h4 id="在Router组件之外，导航到路由页面，可以使用浏览器的History-API，像下面这样写。"><a href="#在Router组件之外，导航到路由页面，可以使用浏览器的History-API，像下面这样写。" class="headerlink" title="在Router组件之外，导航到路由页面，可以使用浏览器的History API，像下面这样写。"></a>在Router组件之外，导航到路由页面，可以使用浏览器的History API，像下面这样写。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import &#123; browserHistory &#125; from &apos;react-router&apos;;</span><br><span class="line">browserHistory.push(&apos;/some/path&apos;);</span><br></pre></td></tr></table></figure><h3 id="IndexLink"><a href="#IndexLink" class="headerlink" title="IndexLink"></a>IndexLink</h3><p>如果链接到根路由<code>/</code>，不要使用<code>Link</code>组件，而要使用<code>IndexLink</code>组件。<br>这是因为对于根路由来说，<code>activeStyle</code>和<code>activeClassName</code>会失效，或者说总是生效一直会显示样式，因为<code>/</code>会匹配任何子路由。而<code>IndexLink</code>组件会使用路径的精确匹配。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;IndexLink to=&quot;/&quot; activeClassName=&quot;active&quot;&gt;Home&lt;/IndexLink&gt;</span><br></pre></td></tr></table></figure><p>另一种方式使用<code>Link</code>组件的<code>onlyActiveOnIndex</code>属性，也能达到同样效果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Link to=&quot;/&quot; activeClassName=&quot;active&quot; onlyActiveOnIndex=&#123;true&#125;&gt;Home&lt;/Link&gt;</span><br></pre></td></tr></table></figure><p>实际上，<code>IndexLink</code>就是对<code>Link</code>组件的<code>onlyActiveOnIndex</code>属性的包装。</p><h3 id="histroy-属性"><a href="#histroy-属性" class="headerlink" title="histroy 属性"></a>histroy 属性</h3><p><code>Router</code>组件的<code>history</code>属性，用来监听浏览器地址栏的变化，并将URL解析成一个地址对象，供 React Router 匹配。<br><code>history</code>属性，一共可以设置三种值:</p><ul><li>browserHistory 路由将通过URL的hash部分（#）切换，URL的形式类似example.com/#/some/path。</li><li>hashHistory 浏览器的路由就不再通过Hash完成了，而显示正常的路径example.com/some/path，背后调用的是浏览器的History API。但是，这种情况需要对服务器改造。否则用户直接向服务器请求某个子路由，会显示网页找不到的404错误。如果开发服务器使用的是webpack-dev-server，加上–history-api-fallback参数就可以了。</li><li>createMemoryHistory 主要用于服务器渲染。它创建一个内存中的history对象，不与浏览器URL互动。<code>const history = createMemoryHistory(location)</code></li></ul><p><a href="https://github.com/ReactTraining/react-router/blob/master/docs/guides/Histories.md#configuring-your-server" target="_blank" rel="noopener">官方文档</a></p><h3 id="表单处理"><a href="#表单处理" class="headerlink" title="表单处理"></a>表单处理</h3><p><code>Link</code>组件用于正常的用户点击跳转，但是有时还需要表单跳转、点击按钮跳转等操作。这些情况怎么跟React Router对接呢？<br>下面是一个表单。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form onSubmit=&#123;<span class="keyword">this</span>.handleSubmit&#125;&gt;</span><br><span class="line">  &lt;input type=<span class="string">"text"</span> placeholder=<span class="string">"userName"</span>/&gt;</span><br><span class="line">  &lt;input type=<span class="string">"text"</span> placeholder=<span class="string">"repo"</span>/&gt;</span><br><span class="line">  &lt;button type=<span class="string">"submit"</span>&gt;Go&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>form&gt;</span><br></pre></td></tr></table></figure><p>第一种方法是使用<code>browserHistory.push</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; browserHistory &#125; <span class="keyword">from</span> <span class="string">'react-router'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">  handleSubmit(event) &#123;</span><br><span class="line">    event.preventDefault()</span><br><span class="line">    <span class="keyword">const</span> userName = event.target.elements[<span class="number">0</span>].value</span><br><span class="line">    <span class="keyword">const</span> repo = event.target.elements[<span class="number">1</span>].value</span><br><span class="line">    <span class="keyword">const</span> path = <span class="string">`/repos/<span class="subst">$&#123;userName&#125;</span>/<span class="subst">$&#123;repo&#125;</span>`</span></span><br><span class="line">    browserHistory.push(path)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>第二种方法是使用<code>context</code>对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.createClass(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ask for `router` from context</span></span><br><span class="line">  contextTypes: &#123;</span><br><span class="line">    router: React.PropTypes.object</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  handleSubmit(event) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">this</span>.context.router.push(path)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="路由的钩子"><a href="#路由的钩子" class="headerlink" title="路由的钩子"></a>路由的钩子</h3><p>每个路由都有Enter和Leave钩子，用户进入或离开该路由时触发。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=<span class="string">"about"</span> component=&#123;About&#125; /&gt;</span><br><span class="line">＜Route path=<span class="string">"inbox"</span> component=&#123;Inbox&#125;&gt;</span><br><span class="line">  ＜Redirect <span class="keyword">from</span>=<span class="string">"messages/:id"</span> to=<span class="string">"/messages/:id"</span> /&gt;</span><br><span class="line">&lt;<span class="regexp">/Route&gt;</span></span><br></pre></td></tr></table></figure><p>上面的代码中，如果用户离开<code>/messages/:id</code>，进入<code>/about</code>时，会依次触发以下的钩子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/messages/:id 的 onLeave</span><br><span class="line">/inbox 的 onLeave</span><br><span class="line">/about 的 onEnter</span><br></pre></td></tr></table></figure><p>下面是一个例子，使用<code>onEnter</code>钩子替代<code>&lt;Redirect&gt;</code>组件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=<span class="string">"inbox"</span> component=&#123;Inbox&#125;&gt;</span><br><span class="line">  &lt;Route</span><br><span class="line">    path=<span class="string">"messages/:id"</span></span><br><span class="line">    onEnter=&#123;</span><br><span class="line">      (&#123;params&#125;, replace) =&gt; replace(<span class="string">`/messages/<span class="subst">$&#123;params.id&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  /&gt;</span><br><span class="line">&lt;<span class="regexp">/Route&gt;</span></span><br></pre></td></tr></table></figure><p><code>onEnter</code>钩子还可以用来做认证。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> requireAuth = <span class="function">(<span class="params">nextState, replace</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!auth.isAdmin()) &#123;</span><br><span class="line">        <span class="comment">// Redirect to Home page if not an Admin</span></span><br><span class="line">        replace(&#123; <span class="attr">pathname</span>: <span class="string">'/'</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> AdminRoutes = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">     &lt;Route path=<span class="string">"/admin"</span> component=&#123;Admin&#125; onEnter=&#123;requireAuth&#125; /&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是一个高级应用，当用户离开一个路径的时候，跳出一个提示框，要求用户确认是否离开。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Home = withRouter(</span><br><span class="line">  React.createClass(&#123;</span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">      <span class="keyword">this</span>.props.router.setRouteLeaveHook(</span><br><span class="line">        <span class="keyword">this</span>.props.route,</span><br><span class="line">        <span class="keyword">this</span>.routerWillLeave</span><br><span class="line">      )</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    routerWillLeave(nextLocation) &#123;</span><br><span class="line">      <span class="comment">// 返回 false 会继续停留当前页面，</span></span><br><span class="line">      <span class="comment">// 否则，返回一个字符串，会显示给用户，让其自己决定</span></span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.state.isSaved)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'确认要离开？'</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>上面代码中，<code>setRouteLeaveHook</code>方法为<code>Leave</code>钩子指定<code>routerWillLeave</code>函数。该方法如果返回<code>false</code>，将阻止路由的切换，否则就返回一个字符串，提示用户决定是否要切换。</p><p>–<a href="http://www.ruanyifeng.com/blog/2016/05/react_router.html?utm_source=tool.lu" target="_blank" rel="noopener">整理自阮一峰的博客</a></p><p>–<a href="https://github.com/reactjs/react-router-tutorial/tree/master/lessons" target="_blank" rel="noopener">官方demo</a></p>]]></content>
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react-router </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>react表单</title>
      <link href="/2018/09/27/react%E8%A1%A8%E5%8D%95/"/>
      <url>/2018/09/27/react%E8%A1%A8%E5%8D%95/</url>
      <content type="html"><![CDATA[<h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><p>表单不同于其他 HTML 元素，因为它要响应用户的交互，显示不同的状态，所以在 React 里面会有点特殊。</p><h3 id="状态属性"><a href="#状态属性" class="headerlink" title="状态属性"></a>状态属性</h3><p>表单元素有这么几种状态属性：</p><ul><li><code>value</code> 对应 <code>&lt;input&gt;</code> 和 <code>&lt;textarea&gt;</code></li><li><code>checked</code> 对应 <code>checkbox</code> 和 <code>radio</code> 的 <code>&lt;input&gt;</code> 所有</li><li><code>selected</code> 对应 <code>&lt;option&gt;</code> 所有</li></ul><p>在 HTML 中 <code>&lt;textarea&gt;</code> 的值可以由子节点（文本）赋值，但是在 React 中，要用 <code>value</code> 来设置。<br>表单元素包含以上任意一种状态属性都支持 <code>onChange</code> 事件监听状态值的更改。<br>针对这些状态属性不同的处理策略，表单元素在 React 里面有两种表现形式。</p><h3 id="受控组件"><a href="#受控组件" class="headerlink" title="受控组件"></a>受控组件</h3><p>设置了 <code>value</code> 的<code>&lt;input&gt;</code> 是一个受限组件。 对于受限的 <code>&lt;input&gt;</code>，渲染出来的 HTML 元素始终保持 value 属性的值。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"Hello!"</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p>上面的代码将渲染出一个值为 Hello! 的 input 元素。用户在渲染出来的元素里输入任何值都不起作用，因为 React 已经赋值为 Hello!。如果想响应更新用户输入的值，就得使用 onChange 事件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">From</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>()&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      inputValue:<span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  handle(e) &#123;</span><br><span class="line">        e.preventDefault();</span><br><span class="line">        <span class="keyword">this</span>.refs.form.reset();</span><br><span class="line">        <span class="comment">//点击提交按钮也会被重置表单</span></span><br><span class="line">    &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">            &lt;div id=<span class="string">"text"</span>&gt;</span><br><span class="line">                &lt;form action=<span class="string">""</span> method=<span class="string">"GET"</span> onSubmit=&#123;<span class="keyword">this</span>.handle.bind(<span class="keyword">this</span>)&#125; ref=<span class="string">"form"</span> id=<span class="string">"ye"</span>&gt;</span><br><span class="line">                    &lt;input type=<span class="string">"text"</span> value=&#123;<span class="keyword">this</span>.state.inputValue&#125; onChange=&#123;(event)=&gt;</span><br><span class="line">                      <span class="keyword">this</span>.setState(&#123;<span class="attr">inputValue</span>:event.target.inputValue&#125;)&#125;&gt; <span class="xml"><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span></span><br><span class="line">                &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">      )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>React 将用户输入的值更新到 <code>&lt;input&gt;</code> 组件的 value 属性,这样页面会重新被渲染显示出输入的值。</p><h3 id="非受控组件"><a href="#非受控组件" class="headerlink" title="非受控组件"></a>非受控组件</h3><p>没有设置 value(或者设为 null) 的 <code>&lt;input&gt;</code> 组件是一个不受限组件，对于不受限的 <code>&lt;input&gt;</code> 组件，渲染出来的元素直接反应用户输入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br></pre></td></tr></table></figure><p>上面的代码将渲染出一个空值的输入框，用户输入将立即反应到元素上。和受限元素一样，使用 onChange 事件可以监听值的变化。<br>如果想给组件设置一个非空的初始值，可以使用 defaultValue 属性。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ender: function() &#123;</span><br><span class="line">    return &lt;input type=&quot;text&quot; defaultValue=&quot;Hello!&quot; /&gt;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>上面的代码渲染出来的元素和受限组件一样有一个初始值，但这个值用户可以改变并会反应到界面上。</p><ul><li><code>radio</code> 、 <code>checkbox</code> 的 <code>&lt;input&gt;</code> 支持 <code>defaultChecked</code>属性</li><li><code>&lt;select&gt;</code> 支持 <code>defaultValue</code> 属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Form</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            inputValue: <span class="string">""</span>,</span><br><span class="line">            textareaValue: <span class="string">"我是文本域"</span>,</span><br><span class="line">            selectValue:<span class="string">""</span>,</span><br><span class="line">            radio:<span class="string">"woman"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    handle(e) &#123;</span><br><span class="line">        e.preventDefault();</span><br><span class="line">        <span class="keyword">this</span>.refs.form.reset();</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div id=<span class="string">"text"</span>&gt;</span><br><span class="line">                &lt;form action=<span class="string">""</span> method=<span class="string">"GET"</span> onSubmit=&#123;<span class="keyword">this</span>.handle.bind(<span class="keyword">this</span>)&#125; ref=<span class="string">"form"</span>&gt;</span><br><span class="line">                    &lt;input type=<span class="string">"text"</span> value=&#123;<span class="keyword">this</span>.state.inputValue&#125; onChange=&#123;(e)=&gt;</span><br><span class="line">                    <span class="keyword">this</span>.setState(&#123;<span class="attr">inputValue</span>:e.target.value&#125;)&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    &lt;textarea value=&#123;<span class="keyword">this</span>.state.textareaValue&#125; onChange=&#123;(e)=&gt;</span><br><span class="line">                    <span class="keyword">this</span>.setState(&#123;<span class="attr">textareaValue</span>:e.target.value&#125;)&#125;/&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;input type=<span class="string">"radio"</span> value=<span class="string">"man"</span> name=<span class="string">"sex1"</span> defaultChecked/&gt;男</span><br><span class="line">                    &lt;input type=<span class="string">"radio"</span> value=<span class="string">"woman"</span> name=<span class="string">"sex2"</span> checked=&#123;<span class="keyword">this</span>.state.radio===<span class="string">"woman"</span>&#125; onChange=&#123;(e)=&gt;</span><br><span class="line">                    <span class="keyword">this</span>.setState(&#123;<span class="attr">radio</span>:e.target.value&#125;)&#125;/&gt;女</span><br><span class="line"></span><br><span class="line">                    &lt;button type=<span class="string">"submit"</span>&gt;提交&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;button type="reset"&gt;重置&lt;/</span>button&gt;</span><br><span class="line">                &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="为什么使用受控组件？"><a href="#为什么使用受控组件？" class="headerlink" title="为什么使用受控组件？"></a>为什么使用受控组件？</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">""</span> value=<span class="string">"ye"</span> /&gt;</span><br></pre></td></tr></table></figure><p>在React中使用表单组件时。上面的代码在HTML 中将渲染初始值为 <code>ye</code> 的输入框。用户改变输入框的值时，节点的 <code>value</code> 属性（property）将随之变化，但是 <code>node.getAttribute(&#39;value&#39;)</code> 还是会返回初始设置的值 <code>ye</code>,与 HTML 不同，React 组件必须在任何时间点描绘视图的状态，而不仅仅是在初始化时。</p><h3 id="为什么-lt-textarea-gt-使用value-属性？"><a href="#为什么-lt-textarea-gt-使用value-属性？" class="headerlink" title="为什么 &lt;textarea&gt; 使用value 属性？"></a>为什么 <code>&lt;textarea&gt;</code> 使用<code>value</code> 属性？</h3><p>在 HTML 中， <code>&lt;textarea&gt;</code>的值通常使用子节点设置：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 反例：在 React 中不要这样使用！ --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"description"</span>&gt;</span>This is the description.<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对 HTML 而言，让开发者设置多行的值很容易。但是，React 是 JavaScript，没有字符限制，可以使用 \n 实现换行。简言之，React 已经有 value、defaultValue 属性， 组件的子节点扮演什么角色就有点模棱两可了。基于此， 设置 <code>&lt;textarea&gt;</code> 值时不应该使用子节点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea name=&quot;description&quot; value=&quot;This is a description.&quot; /&gt;</span><br></pre></td></tr></table></figure><h3 id="为什么-lt-select-gt-使用-value-属性"><a href="#为什么-lt-select-gt-使用-value-属性" class="headerlink" title="为什么 &lt;select&gt; 使用 value 属性"></a>为什么 <code>&lt;select&gt;</code> 使用 <code>value</code> 属性</h3><p>HTML 中 <code>&lt;select&gt;</code> 通常使用 <code>&lt;option&gt;</code> 的 selected 属性设置选中状态；React 为了更方面的控制组件，采用以下方式代替：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;select onChange=&#123;(e)=&gt;&#123;</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;<span class="attr">selectValue</span>: e.target.value&#125;);</span><br><span class="line">&#125;&#125; defaultValue=<span class="string">"2"</span>&gt;</span><br><span class="line">  &lt;option value=<span class="string">"1"</span>&gt;<span class="number">1</span>&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">  &lt;option value="2"&gt;2&lt;/</span>option&gt;</span><br><span class="line">  &lt;option value=<span class="string">"3"</span>&gt;<span class="number">3</span>&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">  &lt;option value="4"&gt;4&lt;/</span>option&gt;</span><br><span class="line">&lt;<span class="regexp">/select&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：给 value 属性传递一个数组，可以选中多个选项：<code>&lt;select multiple={true} value={[&#39;B&#39;, &#39;C&#39;]}&gt;</code>。</p></blockquote><h3 id="复选框如何实现受控组件？"><a href="#复选框如何实现受控组件？" class="headerlink" title="复选框如何实现受控组件？"></a>复选框如何实现受控组件？</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Form</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            checkboxValue:[<span class="string">"apple"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    handleCheckbox(e)&#123;</span><br><span class="line">      <span class="keyword">let</span> ckValue = <span class="keyword">this</span>.state.checkboxValue;</span><br><span class="line">      <span class="keyword">let</span> clickValue = e.target.value;</span><br><span class="line">      <span class="keyword">let</span> index = ckValue.findIndex(<span class="function"><span class="params">num</span>=&gt;</span>num===clickValue);</span><br><span class="line">      <span class="comment">// 或者使用 indexOf()</span></span><br><span class="line">      <span class="comment">// let index = ckValue.indexOf(clickValue );</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(index === <span class="number">-1</span>)&#123;</span><br><span class="line">        ckValue.push(clickValue);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        ckValue.splice(index,<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;<span class="attr">checkboxValue</span>:ckValue&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                  &lt;input type=<span class="string">"checkbox"</span> value=<span class="string">"apple"</span> name=<span class="string">"fruits"</span> onChange=&#123;<span class="keyword">this</span>.handleCheckbox.bind(<span class="keyword">this</span>)&#125; defaultChecked/&gt;苹果</span><br><span class="line">                  &lt;input type=<span class="string">"checkbox"</span> value=<span class="string">"banana"</span> name=<span class="string">"fruits"</span> onChange=&#123;<span class="keyword">this</span>.handleCheckbox.bind(<span class="keyword">this</span>)&#125;/&gt;香蕉</span><br><span class="line">                  &lt;input type=<span class="string">"checkbox"</span> value=<span class="string">"pear"</span> name=<span class="string">"fruits"</span> onChange=&#123;<span class="keyword">this</span>.handleCheckbox.bind(<span class="keyword">this</span>)&#125;/&gt;梨子</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>表单定义 <code>value</code> 属性和值之后，用户无法在表单输入值或者点击 <code>radio</code> 。</li><li>受控组件 定义了 <code>onchange()</code> 方法，value的值交给state来控制。</li><li>非受空组件 定义了 <code>defaultValue</code> 不受state管理数据 不能跟新value的值，但是用户可以在表单中输入数据。</li></ul>]]></content>
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ref如何去使用</title>
      <link href="/2018/09/27/ref%E5%A6%82%E4%BD%95%E5%8E%BB%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/09/27/ref%E5%A6%82%E4%BD%95%E5%8E%BB%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h3 id="ref的作用"><a href="#ref的作用" class="headerlink" title="ref的作用"></a>ref的作用</h3><p>获取DOM后可以方便结合现有非 react 类库的使用，通过 ref/refs 可以取得组件实例，进而取得原生节点，不过尽量通过 state/props 更新组件，不要使用该功能去更新组件的DOM</p><ul><li>用来调用子组件里面的方法。</li><li>用来获取页面的节点</li></ul><h3 id="ref的使用方式"><a href="#ref的使用方式" class="headerlink" title="ref的使用方式"></a>ref的使用方式</h3><p>三种方法都可以获取DOM</p><ul><li>ReactDOM.findDOMNode(this.refs.xxx);</li><li>this.refs.xxx(官方不推荐)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HandleDOMComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  componentDidMount()&#123;</span><br><span class="line">    <span class="comment">// 两种方式都可以获取到元素</span></span><br><span class="line">    <span class="keyword">let</span> ele = ReactDOM.findDOMNode(<span class="keyword">this</span>.refs.content);</span><br><span class="line">    <span class="keyword">let</span> ele2 = <span class="keyword">this</span>.refs.content;</span><br><span class="line">    <span class="comment">// 如果想用 jquery，那么这是个好时机</span></span><br><span class="line">    <span class="built_in">console</span>.log( ele );</span><br><span class="line">    <span class="built_in">console</span>.log( ele.innerHTML );</span><br><span class="line">    <span class="built_in">console</span>.log( ele2.innerHTML );</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div ref=<span class="string">'content'</span>&gt;这是我DOM元素里面的内容&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> HandleDOMComponent;</span><br></pre></td></tr></table></figure><p>另外一种官方推荐的方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class App extends React.Component&#123;</span><br><span class="line">  componentDidMount()&#123;</span><br><span class="line">    console.log(this.newAttr);</span><br><span class="line">  &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div ref=&#123;(jiedian)=&gt;this.newAttr=jiedian&#125;&gt;aaa&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ref直接等于一个函数，把节点当做参数传递进去，并且给当前组件绑定  <code>newAttr</code> 属性上，后面直接 <code>this.newAttr</code> 这样使用就行了。</p><h3 id="使用ref调用子组件里面的方法"><a href="#使用ref调用子组件里面的方法" class="headerlink" title="使用ref调用子组件里面的方法"></a>使用ref调用子组件里面的方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//App.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> Test <span class="keyword">from</span> <span class="string">"./Test"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">  componentDidMount()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.refs.aaa.getValue());</span><br><span class="line">  &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div ref=<span class="string">"text"</span>&gt;</span><br><span class="line">        hellow</span><br><span class="line">        &lt;Test ref=<span class="string">"aaa"</span>/&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Test.js</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">  getValue()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.refs.input.value;</span><br><span class="line">  &#125;</span><br><span class="line">render()&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input ref=<span class="string">"input"</span> type=<span class="string">"text"</span> defaultValue=<span class="string">"yewenxiang"</span> /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>react生命周期</title>
      <link href="/2018/09/27/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2018/09/27/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      <content type="html"><![CDATA[<h3 id="什么是组件的生命周期？"><a href="#什么是组件的生命周期？" class="headerlink" title="什么是组件的生命周期？"></a>什么是组件的生命周期？</h3><p>一个 React 组件的各个生命阶段会自动触发一些函数，这些被称为生命周期函数。<br>具体如下图：</p><p><img src="http://img.ywx.store/0073tXM5gy1fy1xx8d4jjj30o40h7gn6.jpg" alt="image"></p><h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化:"></a>初始化:</h5><ul><li>获取默认属性值 <code>getDefaultProps()</code> :在组件挂载之前调用一次。</li><li>获取实例初始状态 <code>getInitialState()</code> :在组件类创建的时候调用一次，然后返回值被缓存下来。</li><li>首次渲染之前 <code>componentWillMount()</code> :服务器端和客户端都只调用一次，在初始化渲染执行之前立即调用。</li><li>渲染 <code>render()</code> 。</li><li>首次渲染之后 <code>componentDidMount()</code> :在初始化渲染执行之后立刻调用一次，仅客户端有效(服务器端不会调用)。</li></ul><h5 id="更新"><a href="#更新" class="headerlink" title="更新:"></a>更新:</h5><ul><li>属性被修改前 <code>componentWilReceiveProps()</code> :在组件接收到新的props的时候调用，在初始化渲染的时候，该方法不会调用。</li><li>判断是否需要更新 <code>shouldComponentUpdate()</code> :在接收到新的 <code>props</code> 或者 <code>state</code> ， 将要渲染之前调用。</li><li>更新之前 <code>componentWillUpdate()</code> :在接收到新的 <code>props</code> 或者 <code>state</code>时立刻调用。</li><li>渲染 <code>render()</code> 。</li><li>更新之后 <code>componentDidUpdate()</code> :在组件的更新同步到DOM之后立刻调用。</li></ul><h5 id="销毁"><a href="#销毁" class="headerlink" title="销毁:"></a>销毁:</h5><ul><li>销毁前 <code>componentWillUnmount()</code> :在组件从DOM中被移除时立刻调用，一般在该方法中执行必要的清理。</li></ul><h3 id="一个demo"><a href="#一个demo" class="headerlink" title="一个demo"></a>一个demo</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//App.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> Test <span class="keyword">from</span> <span class="string">"./Test"</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>()&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">num</span>:<span class="number">0</span>,<span class="attr">show</span>:<span class="literal">true</span>&#125;;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"App 初始化获取state值"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  componentWillMount()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"App 组件将要挂载"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  componentWilReceiveProps(nextProps)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"App Props改变后,组件将要更新"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  shouldComponentUpdate(nextProps,nextState)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'App 组件是否应该跟新,改变后Props的值：'</span>,nextProps,<span class="string">'改变后state的值：'</span>,nextState);</span><br><span class="line">    <span class="keyword">if</span>(nextState.num&lt;<span class="number">5</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  componentWillUpdate(nextProps,nextState)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'App 组件将要跟新,改变后Props的值：'</span>,nextProps,<span class="string">'改变后state的值：'</span>,nextState);</span><br><span class="line">  &#125;</span><br><span class="line">  componentDidUpdate(prevProps,prevState)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'App 组件跟新完毕,Props的上一个值：'</span>,prevProps,<span class="string">'state的上一个值：'</span>,prevState);</span><br><span class="line">  &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"App 渲染"</span>);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line"></span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          数值：&#123;<span class="keyword">this</span>.state.num&#125;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button onClick=&#123;()=&gt;this.setState(&#123;num:this.state.num+1&#125;)&#125;&gt;加一&lt;/</span>button&gt;</span><br><span class="line">        &lt;Test childNum = &#123;<span class="keyword">this</span>.state.num&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  componentDidMount()&#123;</span></span><br><span class="line"><span class="regexp">    console.log("App 组件挂载完毕");</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Test.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>()&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Test 初始化获取state值"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillMount()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Test 组件将要挂载"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  componentWilReceiveProps(nextProps)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Test Props改变后,组件将要更新"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  componentWillUpdate(nextProps,nextState)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Test 组件将要跟新,改变后Props的值：'</span>,nextProps,<span class="string">',改变后state的值：'</span>,nextState);</span><br><span class="line">  &#125;</span><br><span class="line">  componentDidUpdate(prevProps,prevState)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Test 组件跟新完毕,Props上一个的值：'</span>,prevProps ,<span class="string">'，state上一个的值：'</span>,prevState);</span><br><span class="line">  &#125;</span><br><span class="line">  componentWillUnmount()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`我要被销毁了`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Test 渲染"</span>);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;我是test组件：&#123;<span class="keyword">this</span>.props.childNum&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  componentDidMount()&#123;</span></span><br><span class="line"><span class="regexp">    console.log("Test 组件挂载完毕");</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>刷新后初始化，console中输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">App 初始化获取state值</span><br><span class="line">App 组件将要挂载</span><br><span class="line">App 渲染</span><br><span class="line">Test 初始化获取state值</span><br><span class="line">Test 组件将要挂载</span><br><span class="line">Test 渲染</span><br><span class="line">Test 组件挂载完毕</span><br><span class="line">App 组件挂载完毕</span><br></pre></td></tr></table></figure><p>点击加1按钮，改变了 <code>this.state.num</code> 的值后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">App 组件是否应该跟新,改变后Props的值： Object &#123;&#125; 改变后state的值： Object &#123;num: 1, show: true&#125;</span><br><span class="line">App 组件将要跟新,改变后Props的值： Object &#123;&#125; 改变后state的值： Object &#123;num: 1, show: true&#125;</span><br><span class="line">App 渲染</span><br><span class="line">Test 组件将要跟新,改变后Props的值： Object &#123;childNum: 1&#125; ,改变后state的值： null</span><br><span class="line">Test 渲染</span><br><span class="line">Test 组件跟新完毕,Props上一个的值： Object &#123;childNum: 0&#125; ，state上一个的值： null</span><br><span class="line">App 组件跟新完毕,Props的上一个值： Object &#123;&#125; state的上一个值： Object &#123;num: 0, show: true&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>nextProps</code> 和 <code>nextState</code> 两个参数是接收的一个对象。<br>componentDidUpdate(prevProps,prevState)拿到的是上一个值。</p></blockquote>]]></content>
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>react组件之间通信</title>
      <link href="/2018/09/27/react%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E9%80%9A%E4%BF%A1/"/>
      <url>/2018/09/27/react%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</url>
      <content type="html"><![CDATA[<h3 id="组件之间如何通信"><a href="#组件之间如何通信" class="headerlink" title="组件之间如何通信"></a>组件之间如何通信</h3><p>一个组件如果无法做到通信是无法得到很好的复用的，因为有时候组件复用我们希望组件的UI会有点点区别,下来实现一个简单的通信来说明。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//Btn.js</span><br><span class="line">import React from &apos;react&apos;;</span><br><span class="line">class Btn extends React.Component&#123;</span><br><span class="line">  render()&#123;</span><br><span class="line">    let styles = &#123;</span><br><span class="line">      padding:this.props.padd,</span><br><span class="line">      fontSize:&quot;18px&quot;,</span><br><span class="line">      backgroundColor:this.props.bg</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(this.props);</span><br><span class="line">    return (</span><br><span class="line">      &lt;button style=&#123;styles&#125;&gt;&#123;this.props.title&#125;&lt;/button&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default Btn;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//App.js</span><br><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import Btn from &quot;./Btn&quot;;</span><br><span class="line">class App extends React.Component&#123;</span><br><span class="line">  render()&#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Btn title=&quot;叶文翔&quot; bg=&apos;yellow&apos; padd=&apos;20px 30px&apos;/&gt;</span><br><span class="line">        &lt;Btn title=&quot;向往&quot; bg=&apos;#777&apos;/&gt;</span><br><span class="line">        &lt;Btn title=&quot;田冬雪&quot;/&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure><p>上面 <code>Btn.js组件</code> 导出到 <code>App.js组件</code> 中，那么App组件就是Btn组件的父组件，我们在父组件App自定义标签中插入我们自定义的属性，然后在 <code>Btn.js</code> 文件的 <code>render()</code> 函数中打印 <code>this.props</code> 发现得到下图:</p><p><img src="./4-react-img/1.png" alt="this.props-img"></p><p>说明 <code>this.props</code> 可以拿到我们自定义属性的一个对象，然后在我们的 <code>Btn.js</code> 文件中，把需要自定义的属性全部用 <code>this.props.自定义属性名</code> 替换掉就行了，能够极大的提高组件的复用率。</p><h3 id="组件中的默认属性"><a href="#组件中的默认属性" class="headerlink" title="组件中的默认属性"></a>组件中的默认属性</h3><p>上面有个问题，如果没有传入相应的属性和属性值，组件可能会得不到正确的显示，这时候我们需要定义组件的默认属性了。定义方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//Btn.js</span><br><span class="line">Btn.defaultProps = &#123;</span><br><span class="line">  title:&apos;defaultTitle&apos;,</span><br><span class="line">  bg:&apos;#00bcd4&apos;,</span><br><span class="line">  padd:&apos;10px 20px&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样当我们忘记传对应的属性的时候，组件就会显示默认的属性。</p><h3 id="组件通信更好的方式"><a href="#组件通信更好的方式" class="headerlink" title="组件通信更好的方式"></a>组件通信更好的方式</h3><p>如果我们定义的属性很多，或者从后台传过来的属性来渲染，就会使用下面的方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//Card.js</span><br><span class="line">import React from &apos;react&apos;;</span><br><span class="line">class Card extends React.Component&#123;</span><br><span class="line">  render()&#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div className=&quot;card&quot;&gt;</span><br><span class="line">        &lt;div className=&quot;card-index&quot;&gt;&#123;this.props.index&#125;&lt;/div&gt;</span><br><span class="line">        &lt;div className=&quot;card-desc&quot;&gt;</span><br><span class="line">          &lt;h3&gt;&#123;this.props.title&#125;&lt;/h3&gt;</span><br><span class="line">          &lt;p&gt;&#123;this.props.data&#125;&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Card.defaultProps = &#123;</span><br><span class="line">  index:1,</span><br><span class="line">  title:&quot;默认的一个标题&quot;,</span><br><span class="line">  data:&quot;2017.2.20&quot;</span><br><span class="line">&#125;</span><br><span class="line">export default Card;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">//App.js</span><br><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import Card from &quot;./Card&quot;;</span><br><span class="line">import &quot;./main&quot;;</span><br><span class="line">let arr = [</span><br><span class="line">  &#123;index:1,title:&quot;标题一&quot;,date:&quot;2017.2.22&quot;&#125;,</span><br><span class="line">  &#123;index:2,title:&quot;标题二&quot;,date:&quot;2017.2.23&quot;&#125;,</span><br><span class="line">  &#123;index:3,title:&quot;标题三&quot;,date:&quot;2017.2.24&quot;&#125;,</span><br><span class="line">  &#123;index:4,title:&quot;标题四&quot;,date:&quot;2017.2.25&quot;&#125;,</span><br><span class="line">  &#123;index:5,title:&quot;标题五&quot;,date:&quot;2017.2.26&quot;&#125;</span><br><span class="line">]</span><br><span class="line">class App extends React.Component&#123;</span><br><span class="line">  constructor()&#123;</span><br><span class="line">    super();</span><br><span class="line">    this.state=&#123;</span><br><span class="line">      date:arr</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;</span><br><span class="line">          this.state.date.map( item =&gt; &lt;Card key=&#123;Math.random()&#125; title=&#123;item.title&#125; index=&#123;item.index&#125; date=&#123;item.date&#125; /&gt;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#123;/* 或者使用下面的方式 */&#125;</span><br><span class="line">        &#123;/* &#123;arr.map(</span><br><span class="line">          item =&gt; &lt;Card key=&#123;Math.random()&#125; &#123;...item&#125; /&gt;</span><br><span class="line">        )&#125; */&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure><ul><li>组件属性的数组最好交给 <code>state</code> 属性来统一管理。</li><li><code>{...item}</code> 这种写法更加的简便，<code>arr</code> 数组中每个对象都被当做了参数来传递，使用 <code>.map()</code> 方法，把属性插入了 <code>&lt;Card /&gt;</code> 这个组件中。Spread 扩展操作符: <code>{...item}</code> ,直接把对象铺开放在了 <code>&lt;Card /&gt;</code> 组件中。</li></ul><h3 id="子组件设置属性验证"><a href="#子组件设置属性验证" class="headerlink" title="子组件设置属性验证"></a>子组件设置属性验证</h3><p>通过 <code>Btn.propTypes = {}</code> 来设置属性的格式，当父组件传的值不符时，浏览器会报错。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//Btn.js</span><br><span class="line">Btn.propTypes = &#123;</span><br><span class="line">  title:React.PropTypes.string,</span><br><span class="line">  bg:React.PropTypes.string,</span><br><span class="line">  padd:React.PropTypes.string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="子组件传递函数和参数"><a href="#子组件传递函数和参数" class="headerlink" title="子组件传递函数和参数"></a>子组件传递函数和参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//父组件 App.js</span><br><span class="line">class App extends React.Component&#123;</span><br><span class="line">  constructor()&#123;</span><br><span class="line">    super();</span><br><span class="line">    this.state=&#123;</span><br><span class="line">      num:0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  addNum(num2)&#123;</span><br><span class="line">    this.setState(&#123;num:this.state.num + num2&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        数值是：&#123;this.state.num&#125; &lt;br /&gt;</span><br><span class="line">        &lt;Btn title=&quot;减1&quot; bg=&quot;#666&quot; padd=&apos;20px 30px&apos; addNum = &#123;this.addNum.bind(this,-1)&#125;/&gt;</span><br><span class="line">        &lt;Btn title=&quot;加1&quot; bg=&quot;pink&quot; padd=&apos;20px 30px&apos; addNum = &#123;this.addNum.bind(this,1)&#125;/&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//子组件 Btn.js</span><br><span class="line">class Btn extends React.Component&#123;</span><br><span class="line">  // handleClick()&#123;</span><br><span class="line">  //   this.props.addNum();</span><br><span class="line">  // &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line">    let styles = &#123;</span><br><span class="line">      padding:this.props.padd,</span><br><span class="line">      fontSize:&quot;18px&quot;,</span><br><span class="line">      backgroundColor:this.props.bg</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(this.props);</span><br><span class="line">    return (</span><br><span class="line">      // &lt;button style=&#123;styles&#125; onClick = &#123;this.handleClick.bind(this)&#125;&gt;&#123;this.props.title&#125;&lt;/button&gt;</span><br><span class="line">      // 或者</span><br><span class="line">      &lt;button style=&#123;styles&#125; onClick = &#123;() =&gt; this.props.addNum()&#125;&gt;&#123;this.props.title&#125;&lt;/button&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="子组件设置函数的验证"><a href="#子组件设置函数的验证" class="headerlink" title="子组件设置函数的验证"></a>子组件设置函数的验证</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//Btn.js</span><br><span class="line">Btn.propTypes = &#123;</span><br><span class="line">  addNum:React.PropTypes.func.isRequired</span><br><span class="line">  //必须传一个函数，否则报错。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如何在组件中嵌套组件-this-props-children"><a href="#如何在组件中嵌套组件-this-props-children" class="headerlink" title="如何在组件中嵌套组件(this.props.children)"></a>如何在组件中嵌套组件(this.props.children)</h3><p><code>this.props.children</code> 表示组件所有的子节点，也就是在父组件中包含的标签。<br>它有三种可能的值：</p><ul><li>如果当前组件没有子节点，它就是 <code>undefined</code></li><li>如果有一个子节点，数据类型是 <code>object</code></li><li>如果有多个子节点，数据类型是 <code>array</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//Children.js</span><br><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import ReactDOM from &quot;react-dom&quot;;</span><br><span class="line">import Son from &quot;./Son&quot;;</span><br><span class="line">import Test from &quot;./Test&quot;;</span><br><span class="line"></span><br><span class="line">class App extends React.Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                aaa</span><br><span class="line">                &lt;Son&gt;</span><br><span class="line">                  bbb</span><br><span class="line">                    &lt;Test&gt;&lt;/Test&gt;</span><br><span class="line">                    &lt;Test&gt;&lt;/Test&gt;</span><br><span class="line">                    &lt;Test&gt;&lt;/Test&gt;</span><br><span class="line">                    &lt;Test&gt;&lt;/Test&gt;</span><br><span class="line">                    &lt;Test&gt;&lt;/Test&gt;</span><br><span class="line">                &lt;/Son&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//Son.js</span><br><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import ReactDOM from &quot;react-dom&quot;;</span><br><span class="line">class Son extends React.Component&#123;</span><br><span class="line">  componentDidMount()&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line">    console.log(this.props.children); //打印出 [&quot;bbb&quot;, Object, Object, Object, Object, Object]</span><br><span class="line">    return(</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;this.props.children&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default Son;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//Test.js</span><br><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import ReactDOM from &quot;react-dom&quot;;</span><br><span class="line">class Test extends React.Component&#123;</span><br><span class="line">  render()&#123;</span><br><span class="line">    console.log(this.props.children); //输出5个 undefined</span><br><span class="line">    return(</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        我是Test组件</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Test;</span><br></pre></td></tr></table></figure><p>React 提供一个工具方法 <code>React.Children</code> 来处理 <code>this.props.children</code> 。我们可以用 <code>React.Children.map</code> 来遍历子节点，而不用担心 <code>this.props.children</code> 的数据类型是 <code>undefined</code> 还是 <code>object</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">return (</span><br><span class="line">      &lt;ol&gt;</span><br><span class="line">      &#123;</span><br><span class="line">        React.Children.map(this.props.children, function (child) &#123;</span><br><span class="line">          return &lt;li&gt;&#123;child&#125;&lt;/li&gt;;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      &lt;/ol&gt;</span><br><span class="line">    );</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bind和super的理解</title>
      <link href="/2018/09/27/bind%E5%92%8Csuper%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/2018/09/27/bind%E5%92%8Csuper%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><p>this 在不同的执行上下文中指向不同的对象，这样往往会造成 undefined 错误，bind 要解决的就是明确函数在执行的时候 this 的指向。<br>不使用bind,下面的函数执行会报错</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = &#123;</span><br><span class="line">  name: <span class="string">'yewenxiang'</span>,</span><br><span class="line">  talk: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`My name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.talk();</span><br><span class="line"><span class="keyword">let</span> plzTalk = Person.talk;</span><br><span class="line">plzTalk();</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------等价于</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> plzTalk = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`My name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line">plzTalk();</span><br></pre></td></tr></table></figure><p>使用bind之后:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = &#123;</span><br><span class="line">  name: <span class="string">'yewenxiang'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> plzTalk = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`My name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">plzTalk.bind(Person)();</span><br></pre></td></tr></table></figure><p>总结一下： bind 的作用就是把一个对象（作为 bind 的参数传入），绑定到这个函数中的 this 之上。</p><p>再举个例子加深理解：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">talk</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.sound);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> Person = &#123;</span><br><span class="line">  sound: <span class="string">'Hi there!'</span>,</span><br><span class="line">  speak: talk</span><br><span class="line">&#125;</span><br><span class="line">Person.speak(); <span class="comment">// 可以正确输出 sound 的值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------等价于</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> Person = &#123;</span><br><span class="line">  sound: <span class="string">'Hi there!'</span>,</span><br><span class="line">  speak: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.sound);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">Person.speak();</span><br></pre></td></tr></table></figure><h3 id="super调用父类方法"><a href="#super调用父类方法" class="headerlink" title="super调用父类方法"></a>super调用父类方法</h3><p>super 代表父类。主要有两个用途：</p><ul><li>使用 super() 呼叫父类的 constructor()</li><li>使用 super.functionName() 调用父类中的 static 方法</li></ul><h5 id="super-的作用"><a href="#super-的作用" class="headerlink" title="super()的作用"></a>super()的作用</h5><p>子类必须在 constructor 方法中调用 super 方法，否则新建实例时会报错。这是因为子类没有自己的 this 对象，而是继承父类的 this 对象，然后对其进行加工。如果不调用 super 方法，子类就得不到 this 对象。<br>ES6的继承机制，实质是先创造父类的实例对象 this（所以必须先调用 super 方法），然后再用子类的构造函数修改 this。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(familyName)&#123;</span><br><span class="line">    <span class="keyword">this</span>.familyName = familyName;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> sayHello() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.height = <span class="number">170</span>; <span class="comment">// 没有上一行的 super() ，这里的 this 就不让用</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> hello() &#123;</span><br><span class="line">    <span class="keyword">super</span>.sayHello(); <span class="comment">// 调用父类的静态方法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> tom = <span class="keyword">new</span> Son(<span class="string">'Wang'</span>, <span class="number">160</span>);</span><br><span class="line"><span class="built_in">console</span>.log(Son.hello());</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bind </tag>
            
            <tag> super </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ES6快速入门</title>
      <link href="/2018/09/26/ES6%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2018/09/26/ES6%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>ECMAScript简称就是ES,你可以把它看成是一套标准,JavaScript就是实施了这套标准的一门语言 现在主流浏览器使用的是ECMAScript5。</p><p>ECMAScript 6.0（以下简称ES6）是JavaScript语言的下一代标准，已经在2015年6月正式发布了。它的目标，是使得JavaScript语言可以用来编写复杂的大型应用程序，成为企业级开发语言。在项目中80%的时间用到的ES6语法只占其20%，所以我们暂时先集中精力把这20%学好，那就差不多够用了，剩下的可以看书或是查文档，现学现用。</p><h3 id="Let-Const-块级作用域和常量"><a href="#Let-Const-块级作用域和常量" class="headerlink" title="Let + Const 块级作用域和常量"></a>Let + Const 块级作用域和常量</h3><p>let和const的出现让 JS 有了块级作用域，还可以像强类型语言一样定义常量。由于之前没有块级作用域以及 var 关键字所带来的变量提升，经常给我们的开发带来一些莫名其妙的问题。</p><p>下面看两个简单的demo理解。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> n = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> n = <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(n); <span class="comment">// 5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// demo 2</span></span><br><span class="line"><span class="keyword">const</span> PI = <span class="number">3.1415</span>;</span><br><span class="line"><span class="built_in">console</span>.log(PI); <span class="comment">// 3.1415</span></span><br><span class="line"></span><br><span class="line">PI = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(PI); <span class="comment">// TypeError: "PI" is read-only</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="string">"a"</span>; <span class="comment">// 期望a是某一个值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> name = <span class="string">'zfpx'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(name);<span class="comment">// ReferenceError: name is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 嵌套循环不会相互影响</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"out"</span>, i);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"in"</span>, i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果 out 0 in 0 in 1 out 1 in 0 in 1 out 2 in 0 in 1</span></span><br><span class="line"></span><br><span class="line">重复定义会报错</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">2</span>; <span class="comment">//Identifier 'a' has already been declared</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">不存在变量的提升</span><br><span class="line"><span class="built_in">console</span>.log(i)</span><br><span class="line"><span class="keyword">let</span> i=<span class="number">10</span>;</span><br><span class="line">结果 i is not defined</span><br><span class="line"></span><br><span class="line"><span class="comment">// 闭包新写法</span></span><br><span class="line"><span class="comment">// 以前</span></span><br><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">现在</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h3><p>解构意思就是分解一个东西的结构,可以用一种类似数组的方式定义N个变量，可以将一个数组中的值按照规则赋值过去。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> [name,age] = [<span class="string">'zfpx'</span>,<span class="number">8</span>];</span><br><span class="line"><span class="built_in">console</span>.log(name,age); <span class="comment">// zfpx 8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> [x,y]=getVal(),<span class="comment">//函数返回值的解构</span></span><br><span class="line">    [name,,age]=[<span class="string">'zf'</span>,<span class="string">'male'</span>,<span class="string">'secrect'</span>];<span class="comment">//数组解构</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getVal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [ <span class="number">1</span>, <span class="number">2</span> ];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'x:'</span>+x+<span class="string">', y:'</span>+y);<span class="comment">//输出：x:1, y:2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'name:'</span>+name+<span class="string">', age:'</span>+age);<span class="comment">//输出： name:zf, age:secrect</span></span><br></pre></td></tr></table></figure><p>数组、对象和字符串的解构赋值示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="comment">// 数组的解构赋值</span></span><br><span class="line"><span class="keyword">let</span> [foo, [[bar], baz]] = [<span class="number">1</span>, [[<span class="number">2</span>], <span class="number">3</span>]];</span><br><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(bar); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(baz); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象的解构赋值</span></span><br><span class="line"><span class="keyword">var</span> &#123; foo, bar &#125; = &#123; <span class="attr">foo</span>: <span class="string">"aaa"</span>, <span class="attr">bar</span>: <span class="string">"bbb"</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(foo);   <span class="comment">// "aaa"</span></span><br><span class="line"><span class="built_in">console</span>.log(bar );  <span class="comment">// "bbb"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串的解构赋值</span></span><br><span class="line"><span class="keyword">const</span> [a, b, c, d, e] = <span class="string">'hello'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a + b + c + e); <span class="comment">// 'hello'</span></span><br></pre></td></tr></table></figure><h3 id="Arrows-箭头函数"><a href="#Arrows-箭头函数" class="headerlink" title="Arrows 箭头函数"></a>Arrows 箭头函数</h3><ul><li>箭头函数简化了函数的的定义方式，一般以 “=&gt;” 操作符左边为输入的参数，而右边则是进行的操作以及返回的值Inputs=&gt;outputs。</li><li>箭头函数根本没有自己的this，导致内部的this就是外层代码块的this。正是因为它没有this，所以也就不能用作构造函数，从而避免了this指向的问题。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以前</span></span><br><span class="line"><span class="keyword">let</span> [a,b]=[<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a+b);</span><br><span class="line">&#125;</span><br><span class="line">add(a,b);</span><br><span class="line"><span class="comment">//现在</span></span><br><span class="line"><span class="keyword">let</span> add = <span class="function">(<span class="params">a,b</span>) =&gt;</span> <span class="built_in">console</span>.log(a+b);</span><br><span class="line"><span class="comment">//forEach</span></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">numbers.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item + <span class="string">"\t"</span> + index + <span class="string">"\t"</span> + array);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">//传统写法</span></span><br><span class="line">array.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">v, i, a</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line">array.forEach(v = &gt; <span class="built_in">console</span>.log(v));</span><br><span class="line"><span class="comment">//输入参数如果多于一个要用()包起来，函数体如果有多条语句需要用&#123;&#125;包起来</span></span><br></pre></td></tr></table></figure><h3 id="Template-Strings-字符串模板"><a href="#Template-Strings-字符串模板" class="headerlink" title="Template Strings 字符串模板"></a>Template Strings 字符串模板</h3><p>字符串模板相对简单易懂些。ES6中允许使用反引号 来创建字符串，此种方法创建的字符串里面可以包含由美元符号加花括号包裹的变量${vraible}。如果你使用过像C#等后端强类型语言的话，对此功能应该不会陌生。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//产生一个随机数</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="built_in">Math</span>.random();</span><br><span class="line"><span class="comment">//将这个数字输出到console</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`your num is <span class="subst">$&#123;num&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">'guoyongfeng'</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;name&#125;</span> was <span class="subst">$&#123;age&#125;</span>`</span>)</span><br></pre></td></tr></table></figure><h3 id="Default-Rest-Spread"><a href="#Default-Rest-Spread" class="headerlink" title="Default + Rest + Spread"></a>Default + Rest + Spread</h3><h5 id="Default-默认参数值"><a href="#Default-默认参数值" class="headerlink" title="Default 默认参数值"></a>Default 默认参数值</h5><p>现在可以在定义函数的时候指定参数的默认值了，而不用像以前那样通过逻辑或操作符来达到目的了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//传统的指定默认参数的方式</span></span><br><span class="line">    <span class="keyword">var</span> name=name||<span class="string">'dude'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello '</span>+name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运用ES6的默认参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello2</span>(<span class="params">name=<span class="string">'dude'</span></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Hello <span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line">sayHello();<span class="comment">//输出：Hello dude</span></span><br><span class="line">sayHello(<span class="string">'zf'</span>);<span class="comment">//输出：Hello zf</span></span><br><span class="line">sayHello2();<span class="comment">//输出：Hello dude</span></span><br><span class="line">sayHello2(<span class="string">'zf'</span>);<span class="comment">//输出：Hello zf</span></span><br></pre></td></tr></table></figure><h5 id="Rest-剩余参数"><a href="#Rest-剩余参数" class="headerlink" title="Rest 剩余参数"></a>Rest 剩余参数</h5><p>不定参数是在函数中使用命名参数同时接收不定数量的未命名参数。这只是一种语法糖，在以前的JavaScript代码中我们可以通过 <code>arguments</code> 变量来达到这一目的。</p><p>不定参数的格式是三个句点后跟代表所有不定参数的变量名。比如下面这个例子中，…x代表了所有传入add函数的参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rest</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">restFunc</span>(<span class="params">a, ...rest</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a)</span><br><span class="line">  <span class="built_in">console</span>.log(rest)</span><br><span class="line">&#125;</span><br><span class="line">restFunc(<span class="number">1</span>);</span><br><span class="line">restFunc(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure><p>other:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将所有参数相加的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">...x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.reduce(<span class="function">(<span class="params">m,n</span>)=&gt;</span>m+n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//传递任意个数的参数</span></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>));<span class="comment">//输出：6</span></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>));<span class="comment">//输出：15</span></span><br></pre></td></tr></table></figure><h5 id="Spread-扩展操作符"><a href="#Spread-扩展操作符" class="headerlink" title="Spread 扩展操作符"></a>Spread 扩展操作符</h5><p>扩展操作符则是另一种形式的语法糖，它允许传递数组或者类数组直接做为函数的参数而不用通过apply。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> people=[<span class="string">'zf'</span>,<span class="string">'John'</span>,<span class="string">'Sherlock'</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params">people1,people2,people3</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Hello <span class="subst">$&#123;people1&#125;</span>,<span class="subst">$&#123;people2&#125;</span>,<span class="subst">$&#123;people3&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//但是我们将一个数组以拓展参数的形式传递，它能很好地映射到每个单独的参数</span></span><br><span class="line">sayHello(...people);<span class="comment">//输出：Hello zf,John,Sherlock</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//而在以前，如果需要传递数组当参数，我们需要使用函数的apply方法</span></span><br><span class="line">sayHello.apply(<span class="literal">null</span>,people);<span class="comment">//输出：Hello zf,John,Sherlock</span></span><br></pre></td></tr></table></figure><h3 id="Class-extends-super-类的支持"><a href="#Class-extends-super-类的支持" class="headerlink" title="Class, extends, super 类的支持"></a>Class, extends, super 类的支持</h3><p>以前，如果我们需要模拟一个js的类，一般会采用构造函数加原型的方式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.x = x;</span><br><span class="line">  <span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Point.prototype.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.x + <span class="string">', '</span> + <span class="keyword">this</span>.y + <span class="string">')'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> point = <span class="keyword">new</span> Point(<span class="number">6</span>,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(point.toString());<span class="comment">//(6,3)</span></span><br></pre></td></tr></table></figure><p>ES6中添加了对类的支持，引入了class关键字（其实class在JavaScript中一直是保留字，目的就是考虑到可能在以后的新版本中会用到，现在终于派上用场了）。</p><p>JS本身就是面向对象的，ES6中提供的类实际上只是JS原型模式的包装。现在提供原生的class支持后，对象的创建，继承更加直观了，并且父类方法的调用，实例化，静态方法和构造函数等概念都更加形象化。</p><p>类在ES6中运用案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类的定义</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ES6中新型构造器</span></span><br><span class="line">    <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//实例方法</span></span><br><span class="line">    sayName() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'My name is '</span>+<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类的继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Programmer</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">      <span class="comment">//直接调用父类构造器进行初始化</span></span><br><span class="line">    <span class="keyword">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line">  program() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"I'm coding..."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试我们的类</span></span><br><span class="line"><span class="keyword">var</span> animal=<span class="keyword">new</span> Animal(<span class="string">'dummy'</span>),</span><br><span class="line">zf=<span class="keyword">new</span> Programmer(<span class="string">'zf'</span>);</span><br><span class="line"></span><br><span class="line">animal.sayName();<span class="comment">//输出 ‘My name is dummy’</span></span><br><span class="line">zf.sayName();<span class="comment">//输出 ‘My name is zf’</span></span><br><span class="line">zf.program();<span class="comment">//输出 ‘I'm coding...’</span></span><br><span class="line"><span class="comment">//定义“类”的方法的时候，前面不需要加上function这个关键字，直接把函数定义放进去了就可以了。另外，方法之间不需要逗号分隔，加了会报错。</span></span><br></pre></td></tr></table></figure><h3 id="Modules-模块"><a href="#Modules-模块" class="headerlink" title="Modules 模块"></a>Modules 模块</h3><p>在ES6标准中，JavaScript原生支持module了。这种将JS代码分割成不同功能的小块进行模块化的概念是在一些三方规范中流行起来的，比如CommonJS和AMD模式。</p><p>将不同功能的代码分别写在不同文件中，各模块只需导出公共接口部分，然后通过模块的导入的方式可以在其他地方使用。</p><p>不过，还是有很多细节的地方需要注意，我们看例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// point.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">   <span class="keyword">constructor</span> (x, y) &#123;</span><br><span class="line">     public x = x;</span><br><span class="line">     public y = y;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// myapp.js</span></span><br><span class="line"><span class="comment">//这里可以看出，尽管声明了引用的模块，还是可以通过指定需要的部分进行导入</span></span><br><span class="line"><span class="keyword">import</span> Point <span class="keyword">from</span> <span class="string">"point"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> origin = <span class="keyword">new</span> Point(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(origin);</span><br></pre></td></tr></table></figure><h5 id="export"><a href="#export" class="headerlink" title="export"></a>export</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo1：简单使用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> firstName = <span class="string">'Michael'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> lastName = <span class="string">'Jackson'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> year = <span class="number">1958</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">var</span> firstName = <span class="string">'Michael'</span>;</span><br><span class="line"><span class="keyword">var</span> lastName = <span class="string">'Jackson'</span>;</span><br><span class="line"><span class="keyword">var</span> year = <span class="number">1958</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;firstName, lastName, year&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo2：还可以这样</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">v1</span>(<span class="params"></span>) </span>&#123; ... &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">v2</span>(<span class="params"></span>) </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  v1 <span class="keyword">as</span> streamV1,</span><br><span class="line">  v2 <span class="keyword">as</span> streamV2,</span><br><span class="line">  v2 <span class="keyword">as</span> streamLatestVersion</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo3：需要注意的是export命令规定的是对外的接口，必须与模块内部的变量建立一一对应关系。</span></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">export</span> f;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//export的默认输出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'foo'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了给用户提供方便，让他们不用阅读文档就能加载模块，就要用到export default命令，为模块指定默认输出。这样其他模块加载该模块时，import命令可以为该匿名函数指定任意名字。</p><p>需要注意的是，这时import命令后面，不使用大括号。</p><p>最后需要强调的是：ES6模块加载的机制，与CommonJS模块完全不同。CommonJS模块输出的是一个值的拷贝，而ES6模块输出的是值的引用。</p><ul><li>CommonJS模块输出的是被输出值的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。</li><li>ES6模块的运行机制与CommonJS不一样，它遇到模块加载命令import时，不会去执行模块，而是只生成一个动态的只读引用。等到真的需要用到时，再到模块里面去取值，换句话说，ES6的输入有点像Unix系统的”符号连接“，原始值变了，import输入的值也会跟着变。因此，ES6模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。</li></ul><h5 id="import"><a href="#import" class="headerlink" title="import"></a>import</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">'jquery'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="keyword">import</span> &#123;firstName, lastName, year&#125; <span class="keyword">from</span> <span class="string">'./profile'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component, PropTypes &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>coding-github上传代码操作</title>
      <link href="/2018/09/26/coding-github%E4%B8%8A%E4%BC%A0%E4%BB%A3%E7%A0%81%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/09/26/coding-github%E4%B8%8A%E4%BC%A0%E4%BB%A3%E7%A0%81%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h3 id="coding-github上传代码操作基本是相同的。"><a href="#coding-github上传代码操作基本是相同的。" class="headerlink" title="coding github上传代码操作基本是相同的。"></a>coding github上传代码操作基本是相同的。</h3><ul><li><p>首先是项目文件名字有点区别，coding项目文件夹叫 <code>用户名</code> ，github项目文件夹叫 <code>用户名.github.io</code></p></li><li><p>然后是分支 <code>coding-pages</code>  <code>gh-pages</code> 不同</p></li><li><code>id_rsa.pub</code> 密钥是共用的</li></ul><h3 id="一般项目的push操作流程"><a href="#一般项目的push操作流程" class="headerlink" title="一般项目的push操作流程"></a>一般项目的push操作流程</h3><ul><li><p><code>mkdir yewenxiang.github.io</code> 创建项目文件夹</p></li><li><p><code>git init</code> 初始化项目文件夹，<em>添加了一个.git隐藏文件</em></p></li><li><p>这步是里面放一些文件，然后做版本</p></li><li><p><code>git add -A</code></p></li><li><p><code>git commit -m&quot;改动内容&quot;</code></p></li><li><p>github 上建一个同名的仓库，注意不能点击初始化仓库的选项,这会造成服务器仓库和本地仓库版本不一致，导致版本冲突</p></li><li><p>复制仓库地址到bash命令行 例如： <code>git remote add origingit@github.com:funnydeer/funnydeer.github.io.git</code> 记录仓库地址,在项目文件夹 <code>.git/config</code> 文件中可查看。这有两种方式：</p><ul><li><p>一种是 <code>http</code> 方式，每次推送都要输入用户名和密码,而且不安全，不推荐这种方法</p></li><li><p>另一种是 <code>ssh</code> 方式,需要 bash命令行输入 <code>ssh-keygen</code> 会生成两个密钥 取公钥 <code>~/.ssh/id_rsa.pub</code> 添加到 <code>github</code> 设置上去 建立互信。</p></li></ul></li><li><p><code>git push -u origin master</code> 首次执行时，在远端创建 <code>master</code> 分支，并且把本地的代码上传到这个分支之上. 后续推送操作都只需 <code>git push</code>就行了。</p></li></ul><h3 id="一些操作"><a href="#一些操作" class="headerlink" title="一些操作"></a>一些操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@git.coding.net:yewenxiang/yewenxiang.git</span><br><span class="line">修改 `.git/config` 文件中的属性，添加仓库的地址</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin maste</span><br><span class="line">推送仓库当前版本到主分支之上</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br><span class="line">生成一个公钥和私钥 在 `<span class="built_in">cd</span> ~/.ss` 文件夹下</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br><span class="line">查看本地的分支</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b coding-pages</span><br><span class="line">在本地创建一个 `coding-pages` 分支</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin coding-pages</span><br><span class="line">首次执行时，在远端创建 `coding-pages` 分支，并且把本地的代码上传到这个分支之上</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>npm的使用方法</title>
      <link href="/2018/09/26/npm%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2018/09/26/npm%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>npm 是随同node一起安装的包管理工具</p><ul><li>允许用户从NPM服务器下载别人编写的第三方包到本地使用。</li><li>允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。</li><li>允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</li></ul><h3 id="模块初始化"><a href="#模块初始化" class="headerlink" title="模块初始化"></a>模块初始化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p> <code>cd</code> 到项目文件夹下输入 <code>npm init</code> 这样就初始化了一个node的项目，文件夹里面生成了一个 <code>package.json</code> 文件，里面的信息为初始化项目时终端中输入的信息。</p><blockquote><p>script 字段中可以定义我们自己的一些脚本</p></blockquote><h3 id="npm安装模块"><a href="#npm安装模块" class="headerlink" title="npm安装模块"></a>npm安装模块</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install &lt;Module Name&gt; --save</span><br></pre></td></tr></table></figure><p>这时，就会在我们的项目文件夹下生成一个 <code>node_modules</code> 的文件夹,里面会有安装的包。</p><ul><li>本地安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install &lt;Module Name&gt; --save</span><br><span class="line">版本名和版本号记录在dependencies字段中</span><br><span class="line">npm install express --save-dev</span><br><span class="line">版本名和版本号记录在devDependencies字段中</span><br></pre></td></tr></table></figure><pre><code>dependencies字段中的包信息是项目上线时依赖的包，devDependencies字段中的包信息是开发项目时需要的包工具。</code></pre><ul><li>全局安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install &lt;Module Name&gt; -g</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm ls -g</span><br><span class="line">查看全局安装的模块</span><br></pre></td></tr></table></figure><p>  不建议使用全局安装，因为多人协作时，可能会导致开发环境不同（包的版本不同）导致一些问题。</p><h3 id="npm-卸载模块"><a href="#npm-卸载模块" class="headerlink" title="npm 卸载模块"></a>npm 卸载模块</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall &lt;Module Name&gt;</span><br></pre></td></tr></table></figure><h3 id="npm-跟新模块"><a href="#npm-跟新模块" class="headerlink" title="npm 跟新模块"></a>npm 跟新模块</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update &lt;Module Name&gt;</span><br></pre></td></tr></table></figure><h3 id="npm-搜索模块"><a href="#npm-搜索模块" class="headerlink" title="npm 搜索模块"></a>npm 搜索模块</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm search &lt;Module Name&gt;</span><br></pre></td></tr></table></figure><h3 id="npm-发布模块"><a href="#npm-发布模块" class="headerlink" title="npm 发布模块"></a>npm 发布模块</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure><p>发布前需要输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm adduser</span><br></pre></td></tr></table></figure><h3 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="built_in">help</span></span><br><span class="line">npm cache clear  //可以清空npm本地的缓存</span><br></pre></td></tr></table></figure><h3 id="后续学习资源"><a href="#后续学习资源" class="headerlink" title="后续学习资源"></a>后续学习资源</h3><ul><li><a href="http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html" target="_blank" rel="noopener">阮一峰的教程</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nvm安装node.js的一些基本操作</title>
      <link href="/2018/09/26/nvm%E5%AE%89%E8%A3%85node-js%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/09/26/nvm%E5%AE%89%E8%A3%85node-js%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>安装node方式很多，最好使用nvm (<em>node.js的版本控制工具，可以同时安装多个node.js</em>).<br>使用 <code>nvm install v...</code> 安装node 不会覆盖之前使用nvm装的node版本，因为所有的 .node 文件夹都是在 .nvm 文件夹下的，不会被覆盖。</p><p>安装 nvm 可以去 github上去找安装 <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a></p><h3 id="安装-nvm"><a href="#安装-nvm" class="headerlink" title="安装 nvm"></a>安装 nvm</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh | bash</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvm ls-remote</span><br><span class="line">查看可以安装的node.js的版本</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvm ls</span><br><span class="line">查看本地已安装 node版本</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvm uninstall 8.4.0</span><br><span class="line">卸载本地安装的 node8.4.0</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvm install v7.4.0</span><br><span class="line">安装 7.4.0版的node.js</span><br></pre></td></tr></table></figure><blockquote><p><code>npm</code> node的包管理工具</p></blockquote><h3 id="设置默认-node-版本"><a href="#设置默认-node-版本" class="headerlink" title="设置默认 node 版本"></a>设置默认 node 版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm <span class="built_in">alias</span> default 5.10.1</span><br></pre></td></tr></table></figure><p> 执行上面语句，重启 shell 之后，执行 <code>node -v</code> 查看切换后的node 版本</p>]]></content>
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nvm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git的一些命令操作</title>
      <link href="/2018/09/26/git%E7%9A%84%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/09/26/git%E7%9A%84%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install git</span><br><span class="line">sudo npm install git</span><br></pre></td></tr></table></figure><blockquote><p><code>apt-get</code> 是 <code>ubuntu</code> 系统（deepin其实就是ubuntu的一个变种）的软件安装命令</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br><span class="line">获取git的版本号</span><br></pre></td></tr></table></figure><h3 id="git本地化的步骤"><a href="#git本地化的步骤" class="headerlink" title="git本地化的步骤"></a>git本地化的步骤</h3><ul><li>第一步：在项目文件夹中运行 <code>git init</code> 来初始化一个仓库,会建立一个.git 的隐藏文件夹。</li><li>第二步：<code>git add -A</code> 添加修改后的版本到 <code>.git</code> 文件夹中， <code>-A</code>是添加所有文件的意思</li><li>第三步: <code>git commit -m&quot;留言内容&quot;</code> 做成一个git本地的一个版本，<code>-m</code> 是 <code>message</code> 留言的意思，这个是必须的。</li></ul><blockquote><p>这一步对于新装的git用户来说还要告诉git 用户名和邮箱。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"yewenxiang"</span></span><br><span class="line">git config --global user.email <span class="string">"yewenxiang23@gmail.com"</span></span><br></pre></td></tr></table></figure><h3 id="git-其他的一些命令"><a href="#git-其他的一些命令" class="headerlink" title="git 其他的一些命令"></a>git 其他的一些命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> -p</span><br></pre></td></tr></table></figure><p><code>log</code> 是日志的意思, <code>-p</code>是patch (补丁,就是修改内容)的缩写</p><p>使用 <code>brew install tig</code> 安装tig包后，查看版本日志方便了很多，选中其中一个版本按 <code>D</code> 可以查看详细信息 按 <code>Q</code> 可以退出</p><h3 id="git-回滚的操作"><a href="#git-回滚的操作" class="headerlink" title="git 回滚的操作"></a>git 回滚的操作</h3><ul><li>修改后没做版本 回到上个 <code>git commit -m&quot;...&quot;</code> 的版本可以使用</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD</span><br></pre></td></tr></table></figure><ul><li>修改后做了版本 回到上个版本可以使用</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD~</span><br></pre></td></tr></table></figure><ul><li>在用户的主目录文件夹下有一个 <code>.gitconfig</code> 的隐藏文件，可以修改里面的属性来配置git.</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[alias]</span><br><span class="line">throw = reset --hard HEAD</span><br><span class="line">throwh = reset --hard HEAD~</span><br></pre></td></tr></table></figure><blockquote><p>添加上述代码后 每次回滚操作只需输入 git throw 或者 git throwh 就可以了</p></blockquote><h3 id="git-取消回滚的操作"><a href="#git-取消回滚的操作" class="headerlink" title="git 取消回滚的操作"></a>git 取消回滚的操作</h3><p><code>git log</code> 可以查看项目各个版本 也就是 <code>git commit -m&quot;...&quot;</code> 做的本地版本，有时候我们做了 <em>回滚</em> 的操作（此时，输入<code>git log</code>，由于回滚到了上一个版本，所以回滚前的版本不见了。 ），但是又需要改变为 <em>回滚前</em> 的状态使用以下步骤。</p><ul><li><p><code>git reflog</code> 来查看记录的HEAD历史，当做reset,checkout等操作时候，这些操作会被记录在 <code>reflog</code> 中,就可以查看 <em>回滚前</em> 操作的版本的哈希值，取前7位</p></li><li><p><code>git reset --hard 7位哈希值</code> 就可以被找回reset操作的那个版本</p></li></ul><blockquote><p>如果你因为reset等操作丢失一个提交的时候，你总是可以把它找回，除非你的操作已经被git当做垃圾处理了，一般是在30天后执行。</p></blockquote><h3 id="git-clone-命令"><a href="#git-clone-命令" class="headerlink" title="git clone 命令"></a>git clone 命令</h3><p>要想把 github 上的一个项目代码下载到本地有两种方式，一种就是普通下载（ download ）。但是，开发者 基本上会选择另外一种方式，就是 clone 。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:happypeter/digicity.git</span><br></pre></td></tr></table></figure></p><p>clone 的特点就是不仅仅可以得到最新代码，而且可以得到整个改版历史。而普通下载只能得到最新版本。</p><h3 id="git-各个命令的作用"><a href="#git-各个命令的作用" class="headerlink" title="git 各个命令的作用"></a>git 各个命令的作用</h3><ul><li><p><code>git push</code> 把本地仓库中有，而远端对应仓库中没有的版本推送到远端</p></li><li><p><code>git pull</code> 把远端仓库中有，而本地对应仓库中没有的版本拉到本地</p></li><li><p><code>git clone</code> 把远端仓库，克隆到本地</p></li></ul><h3 id="如何协同合作"><a href="#如何协同合作" class="headerlink" title="如何协同合作"></a>如何协同合作</h3><p>在github 上面打开项目仓库，点 <code>setting</code> -&gt; <code>Collaborators</code> 然后输入需要合作的用户名称，添加后点击 <code>Copy invite link</code> 把网址发给对方确认，就可以分工合作了。</p><p>在存在本地版本与服务器版本不同时，<code>git push</code> 会失败。此时需要 <code>git pull</code>来更新最新的版本。<br>前提是修改的地方没有冲突 <code>git pull</code> 才会成功。</p><p>如果别人修改了文件中一个地方，你本地又修改了同一个地方，此时就会造成冲突，<code>git pull</code> 会不成功，并且会在冲突的位置添加注释，需要和对方商量到底用哪个人的方案，如果用我的方案，只需要把注释删除，然后再 <code>git pull</code> 即可，此时服务器上面就合并成了你的方案，然后再版本三步走，推送你的代码就行啦。</p><h3 id="git-分支的操作"><a href="#git-分支的操作" class="headerlink" title="git 分支的操作"></a>git 分支的操作</h3><p>每次我们对新仓库推送代码时都要执行类似于以下两行代码</p><ul><li><p><code>git remote add origin git@github.com:happypeter/digicity.git</code> 设置仓库的地址，修改 <code>.git/config</code> 文件中的属性</p></li><li><p><code>git push -u origin master</code> 推送仓库当前版本到主分支之上,同时在远端创建了主分支</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b dev</span><br><span class="line">在本地创建新分支bev</span><br></pre></td></tr></table></figure><p>本地创建新分之后，新分支的指针是指向 <code>master</code> 分支的，也就是新分支的文件和主分支的文件是相同的（做了一次拷贝），一般是修改新分支下的文件后，做版本，然后 <code>git push -u origin dev</code> 在远程创建 <em>dev</em> 分支，同时把本地的内容推送到远端的 dev 分支之上，注意这需要切换到 dev 分支上操作，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br><span class="line">查看本地分支</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout 分支名</span><br><span class="line">切换分支</span><br></pre></td></tr></table></figure><hr><h3 id="如何删除分支"><a href="#如何删除分支" class="headerlink" title="如何删除分支"></a>如何删除分支</h3><ul><li>如果有两个分支 <code>master</code> <code>dev</code> , 首先需要切换到 <code>master</code> 分支之上</li><li><code>git branch -D dev</code> 这样本地 <code>dev</code> 分支就没有了, 但是 github 上的没有受到影响</li><li><code>git push origin :dev</code> 这样可以把 github上的 <code>dev</code> 分支删除</li></ul><h3 id="获取远端新分支"><a href="#获取远端新分支" class="headerlink" title="获取远端新分支"></a>获取远端新分支</h3><ul><li><code>git branch -a</code> 列出远端所有分支</li><li><code>git checkout -b dev origin/dev</code> 作用是checkout远程的dev分支，在本地起名为dev分支，并切换到本地的dev分支</li></ul><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><p>一般 <code>master</code> 分支上的代码是随时可以部署的项目，有时候我们需要添加新功能，这需要创建新的分支去测试，如果没问题了，则合并到主分支之上</p><ul><li>首先切换到主分支之上。</li><li><code>git merge dev</code> 把 <code>dev</code> 分支上的内容合并到 <code>master</code> 分支之上。</li><li>只是在本地进行了合并，还需要 <code>git push</code> 推送到远端仓库。</li><li>如果需要删除这个分支，则进行上面的删除分支操作。</li></ul><hr><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p><code>.gitignore</code> 文件中填写要忽略的文件或者文件名字，也就是不做版本的时候不会跟踪，也不会上传到github服务器上面，一般文件建在 <code>.git</code> 同级目录下面。</p><h3 id="学习git资源"><a href="#学习git资源" class="headerlink" title="学习git资源"></a>学习git资源</h3><ul><li><a href="https://haoqicat.com/atom-love-js" target="_blank" rel="noopener">Atom 爱上 JS</a></li><li><a href="https://haoqicat.com/ride-cli-monster" target="_blank" rel="noopener">驾驭命令行怪兽</a></li><li><a href="https://haoqicat.com/gitbeijing" target="_blank" rel="noopener">Git北京</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux基本命令</title>
      <link href="/2018/09/26/Linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/09/26/Linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h3 id="MAC查看外网IP"><a href="#MAC查看外网IP" class="headerlink" title="MAC查看外网IP"></a>MAC查看外网IP</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl ipinfo.io/json</span><br></pre></td></tr></table></figure><h3 id="cd跳转命令-Change-Directory"><a href="#cd跳转命令-Change-Directory" class="headerlink" title="cd跳转命令 Change Directory"></a>cd跳转命令 <code>Change Directory</code></h3><p>翻译过来就是改变文件夹 ,cd后面要跟一个文件夹的名字<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd dir</span><br></pre></td></tr></table></figure></p><ul><li>输入文件夹名字时支持tab补齐</li><li>两个点表示跳到上一级文件夹中 eg: <code>cd ..</code></li></ul><p>cd跳转又分为相对路径和绝对路径</p><ul><li><p>相对路径</p><p>  打开当前文件夹里面的文件夹,或者 <code>cd ..</code> 跳到上一个文件夹</p></li><li><p>绝对路径</p><p>  使用绝对路径最大的好处是跟当前位置无关 以老祖宗文件夹 <code>/</code> 打头,例如：不管我们在哪 <code>cd /</code> 都可以跳到根目录中, <code>cd /Users/wenxiangye</code> 可以直接跳到用户主目录 等价于 <code>cd ~</code>.</p></li></ul><h3 id="打印出的当前位置"><a href="#打印出的当前位置" class="headerlink" title="打印出的当前位置"></a>打印出的当前位置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd</span><br></pre></td></tr></table></figure><h3 id="列出当前文件夹中的所有文件和文件夹"><a href="#列出当前文件夹中的所有文件和文件夹" class="headerlink" title="列出当前文件夹中的所有文件和文件夹"></a>列出当前文件夹中的所有文件和文件夹</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br><span class="line">需要列出隐藏的文件夹时用 `ls -a`</span><br></pre></td></tr></table></figure><h3 id="创建一个文件"><a href="#创建一个文件" class="headerlink" title="创建一个文件"></a>创建一个文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch file</span><br><span class="line">atom file</span><br></pre></td></tr></table></figure><blockquote><p>通常使用atom编辑器创建一个文件</p></blockquote><h3 id="创建一个文件夹"><a href="#创建一个文件夹" class="headerlink" title="创建一个文件夹"></a>创建一个文件夹</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir dir</span><br></pre></td></tr></table></figure><h3 id="删除文件夹-remove"><a href="#删除文件夹-remove" class="headerlink" title="删除文件夹 remove"></a>删除文件夹 <code>remove</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm file</span><br><span class="line">删除file文件</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -r dir</span><br><span class="line">删除文件夹</span><br></pre></td></tr></table></figure><blockquote><p>注意 .git 文件夹有写保护 需要使用 rm -rf dir 来强制删除</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -r *</span><br><span class="line">可以删除当前位置的所有文件个文件夹</span><br></pre></td></tr></table></figure><h3 id="拷贝操作-copy"><a href="#拷贝操作-copy" class="headerlink" title="拷贝操作 copy"></a>拷贝操作 <code>copy</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp file1 file2</span><br><span class="line">拷贝文件file1 变成 file2, file1和file2就文件名字不同</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp -r dir1 dir2</span><br><span class="line">拷贝文件夹dir1 变成 dir2, dir1和dir2文件夹中的内容是相同的</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv aaa/* bbb</span><br><span class="line">把文件夹aaa中的所有文件全部拷贝到bbb文件夹中</span><br></pre></td></tr></table></figure><h3 id="重命名和移动操作-move"><a href="#重命名和移动操作-move" class="headerlink" title="重命名和移动操作 move"></a>重命名和移动操作 <code>move</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mv file dir</span><br><span class="line">mv dir1 dir2</span><br><span class="line">移动file文件到dir文件夹中</span><br></pre></td></tr></table></figure><blockquote><p>可以通过<code>file dir1</code>来查看文件的类型</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv file1 file2</span><br><span class="line">mv dir dir1</span><br></pre></td></tr></table></figure><blockquote><p>这里是把文件file1改名成了file2,当前目录不能存在 file2和dir1文件，如果存在则是移动和替换操作</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv file ..</span><br><span class="line">移动文件到上一级目录</span><br></pre></td></tr></table></figure><h3 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat file</span><br><span class="line">会列出文件里面的内容</span><br></pre></td></tr></table></figure><hr><h3 id="普通用户和超级用户"><a href="#普通用户和超级用户" class="headerlink" title="普通用户和超级用户"></a>普通用户和超级用户</h3><p>我们平时在用户主目录文件夹里面，用普通用户的身份就能去增删改的操作了，但是在其他目录下面需要超级用户的身份才能去执行操作，实现的方式:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rm file</span><br><span class="line">上面的命令可以用超级用户权限执行一个命令</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></table></figure><p>可以直接化身超级用户,可以输入 <code>whoami</code> 打印出当前用户的身份，退出超级用户成普通用户，敲 <code>Ctrl-D</code></p>]]></content>
      
      
        <tags>
            
            <tag> bash </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>webpack3.0+基础学习</title>
      <link href="/2018/09/25/webpack3-0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
      <url>/2018/09/25/webpack3-0-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h3 id="一个webpack-demo"><a href="#一个webpack-demo" class="headerlink" title="一个webpack demo"></a><strong>一个webpack demo</strong></h3><p> 首先是建立项目结构</p><ul><li>根目录新建 src 文件夹 (开发环境时的代码)</li><li>根目录新建 dist 文件夹（生产环境的代码）</li></ul><p>webpack 打包的本质是把 <strong>src</strong>下的入口文件 entry.js 文件，及其相关联的文件,打包成bundle.js文件，并且放在 <strong>dist</strong> 文件夹下面</p><p><img src="http://img.ywx.store/0073tXM5gy1fy1xpb0u3ij30kv0bhwfm.jpg" alt="image"></p><p>webpack 的打包命令：</p><ul><li>如果是全局安装的webpack : <code>$webpack src/entry.js dist/bundle.js</code>。</li><li>如果是项目中安装的webpack : <code>$./node_modules/.bin/webpack src/entry.js dist/bundle.js</code></li></ul><p>一般我们webpack不会使用全局安装的方式，会造成版本冲突导致的问题。而使用项目中安装的webpack 命令行每次打包输入又太长，可以将命令行写进 <code>package.json</code> 文件里面的 <code>script</code> 标签中：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "bundle":"./node_modules/.bin/webpack src/entry.js dist/bundle.js"</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>这样每次打包只需要 <code>$npm run bundle</code> 就可以了。</p><blockquote><p>小技巧： bundle 改成 start ，只需要 <code>npm start</code>。<br>全局安装 <code>live-server</code> 这个插件可以在本地跑一个服务器，使项目跑在 <code>8080</code> 这个端口。</p></blockquote><h3 id="webpack配置文件"><a href="#webpack配置文件" class="headerlink" title="webpack配置文件"></a><strong>webpack配置文件</strong></h3><p>在项目的根目录新建 <code>webpack.config.js</code> 文件，配置的基本结构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;&#125;,</span><br><span class="line">    output: &#123;&#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;&#125;, <span class="comment">//模块解读css，打包css，图片转换压缩等配置。</span></span><br><span class="line">    plugins: [], <span class="comment">//插件</span></span><br><span class="line">    devServer: &#123;&#125;, <span class="comment">//配置开发服务</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面将入口出门配置信息写进了 <code>script</code> 脚本里面，然后使用 <code>npm start</code> 来跑这段脚本，也就是跑这段命令，这种方式来配置是<strong>非常单一</strong>的，没有更多的配置选项，<strong>如果做多入口多出口的配置就无法实现了</strong>。正确开发的姿势是将配置信息写进 <code>webpack.config.js</code> 文件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>); <span class="comment">//注意引入 path 模块</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        entry:<span class="string">'./src/entry.js'</span> <span class="comment">//入口文件路径</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path:path.resolve(__dirname,<span class="string">'dist'</span>), <span class="comment">//出口文件路径 </span></span><br><span class="line">        filename:<span class="string">'bundle.js'</span> <span class="comment">//打包后的文件名</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>path.resolve(__dirname,&#39;dist&#39;)</code> 代码解读：</p><ul><li><code>path</code>：node核心模块之一,需要引入<code>path</code> 。</li><li><code>__dirname</code>：当前文件所在目录的完整绝对路径。</li><li><code>resolve</code>：<code>resolve</code> 会将参数中的路径或路径片段的序列解析为一个<strong>绝对路径</strong>，这样即使项目迁移，地址变更，只要保证相对路径正确即可。</li><li>代码解读：出口文件存放路径为当前文件夹下的 <code>dist</code> 文件夹中。</li></ul><h3 id="多入口-多出口-配置"><a href="#多入口-多出口-配置" class="headerlink" title="多入口 多出口 配置"></a><strong>多入口 多出口 配置</strong></h3><p>在 <code>src</code> 下新建一个 <code>entry2.js</code> 文件，也就是第二个入口文件，加入js代码，更改配置。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">entry: &#123; <span class="comment">//固定命名</span></span><br><span class="line">        entry: <span class="string">'./src/entry.js'</span>, <span class="comment">//这里的entry名字是自己定义的</span></span><br><span class="line">        entry2: <span class="string">'./src/entry2.js'</span>,  </span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path:path.resolve(__dirname,<span class="string">'dist'</span>),</span><br><span class="line">        filename:<span class="string">'[name].js'</span> <span class="comment">//[name] 打包的出口文件名 和 入口文件名是一样的</span></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></p><p>更改 <code>dist/index.html</code> 中引入的js文件，就可以查看效果了。</p><blockquote><p>注意：两个入口肯定需要两个出口文件对应</p></blockquote><h3 id="服务和热更新"><a href="#服务和热更新" class="headerlink" title="服务和热更新"></a><strong>服务和热更新</strong></h3><p>自己配置一个本地的服务器，首先需要在项目中安装 <code>webpack-dev-server</code> 这个包。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack-dev-server --save-dev</span><br></pre></td></tr></table></figure></p><p>shell 中输入命令 <code>webpack-dev-server</code> ，是无法识别的，因为没有全局安装，环境变量中也就没有存在命令所在的目录。我们需要再 <code>package.json</code> 中加入:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"server":"./node_modules/.bin/webpack-dev-server --open"</span><br></pre></td></tr></table></figure></p><blockquote><p>后面加上参数 <code>--open</code> 运行后直接弹出浏览器</p></blockquote><p>这样配置后 <code>npm run server</code> 他会去找 <code>webpack.config.js</code> 文件中的服务器配置信息：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">        contentBase: path.resolve(__dirname, <span class="string">'dist'</span>), <span class="comment">//监听的文件夹</span></span><br><span class="line">        host: <span class="string">'localhost'</span>, <span class="comment">//服务器地址，本机ip地址，不建议使用locahost ，防止映射表被修改，出现解析不到的情况。ifconfig 查看 本机ip</span></span><br><span class="line">        compress: <span class="literal">true</span>,<span class="comment">//服务器端压缩</span></span><br><span class="line">        port:<span class="number">1717</span> <span class="comment">//服务器端口，默认80</span></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><blockquote><p>注意：在翻墙的情况下 <code>host:</code> 填写本机ip 会报错，使用 <code>localhost</code></p></blockquote><h3 id="打包css文件"><a href="#打包css文件" class="headerlink" title="打包css文件"></a><strong>打包css文件</strong></h3><p>首先需要安装两个包 <code>style-loader</code> <code>css-loader</code> 来实现对css 文件的转换。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i style-loader css-loader --save-dev</span><br></pre></td></tr></table></figure><ul><li>style-loader:处理css中的 url</li><li>css-loader:处理css中的样式</li></ul><p>在src文件夹中建立css文件,并且在 <strong>入口文件</strong> 或者 <strong>入口依赖的其他js文件</strong> 中引入：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> css <span class="keyword">from</span> <span class="string">'./css/index.css'</span>;</span><br></pre></td></tr></table></figure></p><p>webpack.config.js中的配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>, <span class="comment">//用正则表达式的形式来找到处理的文件</span></span><br><span class="line">                use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>]<span class="comment">//使用哪些loader来处理</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>另一种常用写法可以使每个<code>loader</code> 可以配置选项：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">       rules: [</span><br><span class="line">           &#123;</span><br><span class="line">               test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">               use: [&#123;</span><br><span class="line">                   loader:<span class="string">"style-loader"</span></span><br><span class="line">               &#125;, &#123;</span><br><span class="line">                   loader:<span class="string">"css-loader"</span>    </span><br><span class="line">               &#125;]</span><br><span class="line">           &#125;</span><br><span class="line">       ]</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure></p><h3 id="压缩js文件"><a href="#压缩js文件" class="headerlink" title="压缩js文件"></a><strong>压缩js文件</strong></h3><p>对js文件做代码压缩，需要使用到 webpack 内置的 <code>uglifyjs-webpack-plugin</code> 这个插件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> UglifyJSPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">        <span class="keyword">new</span> UglifyJSPlugin()</span><br><span class="line">    ],</span><br></pre></td></tr></table></figure><p>然后 <code>npm start</code> 发现打包出来的代码被压缩了。</p><blockquote><p>这里遇到了一个坑。。。</p></blockquote><p>接上一步开启服务器 <code>npm run server</code> ，命令行报错 ERROR in entry.js from UglifyJs<br>Unexpected token: name (urlParts) [entry.js:325,4]</p><p><img src="http://img.ywx.store/0073tXM5gy1fy1xrrw61dj30eh03l3z5.jpg" alt="image"></p><p>原因在于：没有区分 <strong>开发环境</strong> 和 <strong>生产环境</strong> 。<br>开发环境中代码是不需要压缩的。如果压缩了，调试没有办法找到对应的行号。代码压缩只需要再 <strong>生产环境</strong> 中进行，在开发环境中压缩代码，跑服务器造成了冲突，具体情况不清楚。<br>正常的项目开发是不会产生这样的问题的，都会有一个 <strong>开发使用的配置文件</strong> 和 <strong>生产使用的配置文件</strong> 。</p><h3 id="HTML文件的打包"><a href="#HTML文件的打包" class="headerlink" title="HTML文件的打包"></a>HTML文件的打包</h3><p>一般项目开发是严格区分 <strong>开发环境</strong> 和 <strong>生产环境</strong> 的，也就是 <code>src</code> 文件是我们的 <strong>开发环境</strong> 的项目代码文件夹，<code>dist</code> 文件夹是打包后自己生成的，不需要我们自己去创建。把 <code>index.html</code> 文件放在 <code>src</code> 目录下面，删除文件里面的 <code>script</code> 标签，<code>html-webpack-plugin</code> 会自动帮我们加入引入js的<code>script</code>标签。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D html-webpack-plugin</span><br></pre></td></tr></table></figure><p>项目中的配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> htmlPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">        <span class="keyword">new</span> htmlPlugin(&#123;</span><br><span class="line">            minify: &#123;</span><br><span class="line">                removeAttributeQuotes: <span class="literal">true</span>,<span class="comment">//去掉标签中的引号</span></span><br><span class="line">            &#125;,</span><br><span class="line">            hash: <span class="literal">true</span>, <span class="comment">//引用js时有缓存，加上hash后每次都会给个不同的字符串。</span></span><br><span class="line">            template:<span class="string">'./src/index.html'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br></pre></td></tr></table></figure><p>打包后发现自动的新建了 <code>dist</code> 文件夹和里面的打包文件。</p><blockquote><p>这里注意配置的写法，大括号太多。我写错了导致打包后的文件异常，找了半天问题 (⊙﹏⊙)b。</p></blockquote><h3 id="项目中引入图片"><a href="#项目中引入图片" class="headerlink" title="项目中引入图片"></a><strong>项目中引入图片</strong></h3><h4 id="css中引入图片"><a href="#css中引入图片" class="headerlink" title="css中引入图片"></a><strong>css中引入图片</strong></h4><p>eg:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/css/index.css */</span></span><br><span class="line"><span class="selector-id">#img</span>&#123;</span><br><span class="line">    <span class="attribute">background-image</span>:<span class="built_in">url</span>(../img/img.png);</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">120px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">101px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>首先需要安装 <code>url-loader</code> 这个插件<br>配置 <code>webpack.config.js</code> 文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">rules:[</span><br><span class="line">&#123;</span><br><span class="line">test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">            use: [&#123;</span><br><span class="line">                    loader: <span class="string">'url-loader'</span>,   </span><br><span class="line">                    options: &#123;</span><br><span class="line">                        limit:<span class="number">5000</span>,</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：loader是不需要引入的。</p></blockquote><p><code>limit:5000</code> 的意思是：图片大于5000字节,自动拷贝图片到 <code>dist</code> 文件，并且在 <code>bundle.js</code> 文件中（打包后的js文件）修改正确的路径（包含了 <code>file-loader</code> 的一些功能）。如果小于5000,会生成base64位格式的图片直接插入到js文件中,好处是减少了http请求。</p><h4 id="HTML中引入图片"><a href="#HTML中引入图片" class="headerlink" title="HTML中引入图片"></a><strong>HTML中引入图片</strong></h4><p>webpack 官方是不建议我们在html中引入图片的，如果有这种需求，直接添加 <code>image</code> 标签引入图片，打包后发现，图片并没有被打包到 <code>dist</code> 文件夹下面，因为图片没有被依赖。<br>eg:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">--</span> <span class="attr">index.html</span> <span class="attr">--</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">"./img/img.png"</span>/&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>解决这个问题需要装 <code>html-withimg-loader</code>插件，然后配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line">loaders: [</span><br><span class="line">    &#123;</span><br><span class="line">        test: <span class="regexp">/\.(htm|html)$/i</span>,</span><br><span class="line">        loader: <span class="string">'html-withimg-loader'</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="CSS样式分离和publickPath设置"><a href="#CSS样式分离和publickPath设置" class="headerlink" title="CSS样式分离和publickPath设置"></a><strong>CSS样式分离和publickPath设置</strong></h3><h4 id="CSS样式分离"><a href="#CSS样式分离" class="headerlink" title="CSS样式分离"></a><strong>CSS样式分离</strong></h4><p>一般项目中css文件都是直接打包进 <code>bundle.js</code> 文件中去的，这样可以减少 <code>http</code> 请求。但是在某些时候，我们不想把 css 文件打包进入 <code>bundle.js</code> 文件中，比如：一个项目全是靠css样式来布局，js代码非常少得情况下，项目总监要求把项目交给切图仔维护等需求。如何实现呢：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D extract-text-webpack-plugin</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> extractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line">plugins:[</span><br><span class="line"><span class="keyword">new</span> extractTextPlugin(<span class="string">"css/index.css"</span>) <span class="comment">//把css文件放在服务器的根目录（这里是dist文件夹下），下的css文件夹中。</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>css loader 也需要做一些更改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   test: /\.css$/,</span><br><span class="line">   use: extractTextPlugin.extract(&#123;</span><br><span class="line">            fallback: &quot;style-loader&quot;,</span><br><span class="line">            use: &quot;css-loader&quot;</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="publickPath设置"><a href="#publickPath设置" class="headerlink" title="publickPath设置"></a><strong>publickPath设置</strong></h4><p>打包代码，跑本地服务器，这时候发现图片没有了，查看打包后的项目结构，发现css文件中的路径有问题。</p><p><img src="http://img.ywx.store/0073tXM5gy1fy1y7yhbinj30ip03gq3a.jpg" alt="image"></p><p>这时候需要设置 <code>publiPath</code> 公用路径，解决静态文件的路径问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="keyword">var</span> website = &#123;</span><br><span class="line">    publicPath:<span class="string">'http://192.168.1.105:1717/'</span> <span class="comment">//注意这里的斜杠，ip为服务器ip（在这里是你的计算机ip）</span></span><br><span class="line">&#125;</span><br><span class="line">output: &#123;</span><br><span class="line">...</span><br><span class="line">        publicPath:website.publicPath</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新打包，css文件中图片的路径变为了正确的绝对路径。</p><p><img src="http://img.ywx.store/0073tXM5gy1fy1xw9l7l2j30ki03zq3c.jpg" alt="image"></p><h3 id="打包和分离LESS"><a href="#打包和分离LESS" class="headerlink" title="打包和分离LESS"></a><strong>打包和分离LESS</strong></h3><h4 id="打包LESS文件到-bundle-js-文件中"><a href="#打包LESS文件到-bundle-js-文件中" class="headerlink" title="打包LESS文件到 bundle.js 文件中"></a><strong>打包LESS文件到 bundle.js 文件中</strong></h4><p>首先需要安装 <code>less</code> 、 <code>less-loader</code> 这两个包<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D less less-loader</span><br></pre></td></tr></table></figure></p><p>webpack.config.js 配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">            use: [&#123;</span><br><span class="line">                loader: <span class="string">"style-loader"</span> <span class="comment">// creates style nodes from JS strings</span></span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                loader: <span class="string">"css-loader"</span> <span class="comment">// translates CSS into CommonJS</span></span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                loader: <span class="string">"less-loader"</span> <span class="comment">// compiles Less to CSS</span></span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>注意loaderde顺序，顺序错误会造成打包失败的情况。</p></blockquote><p>然后编写LESS文件，引入到入口JS文件中，就可以了。</p><h4 id="分离LESS文件"><a href="#分离LESS文件" class="headerlink" title="分离LESS文件"></a><strong>分离LESS文件</strong></h4><p>和分离css文件类似，需要用到 <code>extract-text-webpack-plugin</code> 这个包，上面已经安装了，这里不需要安装了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js </span></span><br><span class="line"><span class="keyword">const</span> extractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">   test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">   use: extractTextPlugin.extract(&#123;</span><br><span class="line">            use: [</span><br><span class="line">                     &#123; <span class="attr">loader</span>: <span class="string">'css-loader'</span> &#125;,</span><br><span class="line">                     &#123; <span class="attr">loader</span>: <span class="string">'less-loader'</span> &#125;</span><br><span class="line">            ],</span><br><span class="line">            fallback:<span class="string">'style-loader'</span></span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br><span class="line">plugins: [</span><br><span class="line"><span class="keyword">new</span> extractTextPlugin(<span class="string">"css/index.css"</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>打包后会把LESS中的样式转换成CSS样式，并且打包进index.css 文件中去，这里并不会新建一个CSS文件。</p><h3 id="SASS的打包和分离"><a href="#SASS的打包和分离" class="headerlink" title="SASS的打包和分离"></a><strong>SASS的打包和分离</strong></h3><h4 id="SASS的打包"><a href="#SASS的打包" class="headerlink" title="SASS的打包"></a><strong>SASS的打包</strong></h4><p>将SASS转换成CSS，并且打包进bundle.js文件中去：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D node-sass sass-loader</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line">&#123;</span><br><span class="line">test: <span class="regexp">/\.scss$/</span>,  <span class="comment">//注意这里的 SCSS，不是SASS</span></span><br><span class="line">use: [</span><br><span class="line">&#123; <span class="attr">loader</span>: <span class="string">'style-loader'</span> &#125;,</span><br><span class="line">&#123; <span class="attr">loader</span>: <span class="string">'css-loader'</span> &#125;,</span><br><span class="line">&#123; <span class="attr">loader</span>: <span class="string">'sass-loader'</span> &#125;</span><br><span class="line"> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在项目中引入打包就可以了。</p><h4 id="SASS的分离"><a href="#SASS的分离" class="headerlink" title="SASS的分离"></a><strong>SASS的分离</strong></h4><p>和LESS分离步骤几乎一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js </span></span><br><span class="line"><span class="keyword">const</span> extractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">   test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">   use: extractTextPlugin.extract(&#123;</span><br><span class="line">            use: [</span><br><span class="line">                     &#123; <span class="attr">loader</span>: <span class="string">'css-loader'</span> &#125;,</span><br><span class="line">                     &#123; <span class="attr">loader</span>: <span class="string">'sass-loader'</span> &#125;</span><br><span class="line">            ],</span><br><span class="line">            fallback:<span class="string">'style-loader'</span></span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br><span class="line">plugins: [</span><br><span class="line"><span class="keyword">new</span> extractTextPlugin(<span class="string">"css/index.css"</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="自动添加CSS属性前缀"><a href="#自动添加CSS属性前缀" class="headerlink" title="自动添加CSS属性前缀"></a>自动添加CSS属性前缀</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D postcss-loader autoprefixer</span><br></pre></td></tr></table></figure><p>需要再项目的根目录新建 <code>postcss.config.js</code> 配置文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//postcss.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line">&#123;</span><br><span class="line">test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">use: extractTextPlugin.extract(&#123;</span><br><span class="line">fallback: <span class="string">"style-loader"</span>,</span><br><span class="line">use: [</span><br><span class="line">&#123; <span class="attr">loader</span>: <span class="string">'css-loader'</span> &#125;,</span><br><span class="line">&#123; <span class="attr">loader</span>: <span class="string">'postcss-loader'</span> &#125; <span class="comment">//here</span></span><br><span class="line">             ]</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多的配置参考 <a href="https://github.com/postcss/postcss-loader" target="_blank" rel="noopener">postcss-loader</a></p><h3 id="分离多余的CSS样式"><a href="#分离多余的CSS样式" class="headerlink" title="分离多余的CSS样式"></a>分离多余的CSS样式</h3><p>有些时候css样式有多余的情况，比如使用 Bootstrap 这个库文件一小部分样式，或者项目几次改版产生了很多无效的CSS样式，这种情况下需要去除掉多余的CSS样式，以节省带宽。<br>安装webpack插件 :<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D purifycss-webpack purify-css</span><br></pre></td></tr></table></figure></p><p>配置选项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> glob = <span class="built_in">require</span>(<span class="string">'glob'</span>);</span><br><span class="line"><span class="keyword">const</span> purifyCssPlugin = <span class="built_in">require</span>(<span class="string">'purifycss-webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> extractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>)</span><br><span class="line">plugin:[</span><br><span class="line">...,</span><br><span class="line"><span class="keyword">new</span> purifyCssPlugin(&#123;</span><br><span class="line">            paths:glob.sync(path.join(__dirname,<span class="string">'src/*.html'</span>))</span><br><span class="line">        &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这样就实现了多余代码的去除，好像是需要结合 CSS分离（<code>extract-text-webpack-plugin</code>）技术，才能实现代码的去除。自己测试过程：把CSS分离去除后，也就是让CSS代码打包进 <code>bundle.js</code> 文件里面，配置好代码，打包后没有去除掉多余的CSS文件，在 <code>bundle.js</code> 文件里面还能找到样式。</p><h3 id="使用Babel转换ES6和ES7语法"><a href="#使用Babel转换ES6和ES7语法" class="headerlink" title="使用Babel转换ES6和ES7语法"></a><strong>使用Babel转换ES6和ES7语法</strong></h3><p>首先需要安装插件，我是结合 React 项目来使用 ES6 ES7 的，所以需要安装 <code>babel-preset-react</code> 来解析 React 的 <code>jsx</code> 语法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D babel-core babel-loader babel-preset-env babel-preset-react</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line">&#123;</span><br><span class="line">test: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">use: [</span><br><span class="line">&#123; </span><br><span class="line">loader: <span class="string">'babel-loader'</span> ,</span><br><span class="line"><span class="comment">//options:&#123;    这里注意实际中不会这样配置，一般新建.babelrc文件来写这些配置项    </span></span><br><span class="line"><span class="comment">//presets:["env","react"]</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">         ],</span><br><span class="line">    exclude: <span class="regexp">/node_modules/</span>  <span class="comment">//不需要转换node_modules下的js文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际开发中 babel 的配置代码会越来越多，不建议在 <code>use</code> 中写 babel 的配置选项，而是在项目的根目录新建 <code>.babelrc</code> 配置文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//.babelrc</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"presets"</span>: [<span class="string">"react"</span>,<span class="string">"env"</span>]  <span class="comment">//渲染器</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打包后的代码调试"><a href="#打包后的代码调试" class="headerlink" title="打包后的代码调试"></a><strong>打包后的代码调试</strong></h3><p>打包有四种模式：</p><ul><li><code>source-map</code> : 打包速度最慢，最详细，生成了一个 <code>.map</code>的独立的文件,放在 <code>dist</code> 打包目录下，可以与打包后的文件很好的结合，报错信息包括 <strong>行</strong> 和 <strong>列</strong>。</li><li><p><code>cheap-module-source-map</code> : 也生成独立文件，报错信息包括 <strong>行</strong> 和 <strong>不包括列</strong>，比上面的模式快。</p></li><li><p><code>eval-source-map</code> : 不生成独立文件,报错信息包括 <strong>行</strong> 和 <strong>列</strong>，直接在 <code>bundle.js</code> 文件中生成 <code>map</code>, 速度也很快，有安全和性能的隐患，只能在开发阶段使用，上线前一定要删除 <code>devtool:&#39;eval-source-map&#39;</code>。</p></li><li><code>cheap-module-eval-source-map</code> :不生成独立文件, 报错信息包括 <strong>行</strong> 和 <strong>不包括列列</strong>，</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">devtool:<span class="string">'source-map'</span>,   <span class="comment">//here</span></span><br><span class="line">    entry: &#123;&#125;,</span><br><span class="line">    output: &#123;&#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;&#125;,</span><br><span class="line">    plugins: [], </span><br><span class="line">    devServer: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.chungold.com/course/32" target="_blank" rel="noopener">参考教程</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>react-native笔记本</title>
      <link href="/2018/09/25/react-native%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
      <url>/2018/09/25/react-native%E7%AC%94%E8%AE%B0%E6%9C%AC/</url>
      <content type="html"><![CDATA[<h5 id="android-App跳转到设置页面如何原生模块实现"><a href="#android-App跳转到设置页面如何原生模块实现" class="headerlink" title="android App跳转到设置页面如何原生模块实现?"></a>android App跳转到设置页面如何原生模块实现?</h5><ul><li><a href="https://stackoverflow.com/questions/41677735/react-native-unable-to-open-device-settings-from-my-android-app" target="_blank" rel="noopener">Stack Overflow</a> android 设置 <a href="https://developer.android.com/reference/android/provider/Settings.html" target="_blank" rel="noopener">常量列表</a></li></ul><h5 id="android-App，设置禁止横屏。"><a href="#android-App，设置禁止横屏。" class="headerlink" title="android App，设置禁止横屏。"></a>android App，设置禁止横屏。</h5><ul><li>AndroidManifest.xml 文件中的 <code>&lt;activity&gt;</code>  标签内添加 <code>android:screenOrientation=&quot;portrait&quot;</code></li></ul><h5 id="ios-android-设置App-名称"><a href="#ios-android-设置App-名称" class="headerlink" title="ios android 设置App 名称"></a>ios android 设置App 名称</h5><ul><li>ios : 在 <code>Info.plist</code>中修改</li><li><img src="http://img.ywx.store/0073tXM5gy1fy1y5022qmj30f502wgm2.jpg" alt="image"></li><li>Android : <code>android\app\src\main\res\values\strings.xml</code> 文件中修改 <code>&lt;string name=&quot;app_name&quot;&gt;MyProject&lt;/string&gt;</code></li></ul><h5 id="ios-android-设置icon图标"><a href="#ios-android-设置icon图标" class="headerlink" title="ios android 设置icon图标"></a>ios android 设置icon图标</h5><ul><li>ios: 首先<a href="http://makeappicon.com/" target="_blank" rel="noopener">在这里</a> 上传你的图标，注意：四个圆角边要透明的，如果是白色的在安卓上可能显示出来。</li><li>然后直接 <code>project/ios/project_name/images.xcassets/</code> 直接替换。</li><li>android: 直接替换掉 <code>project/android/app/src/main/res</code> 里面的文件夹。</li></ul><h5 id="ios-android-设置启动图"><a href="#ios-android-设置启动图" class="headerlink" title="ios android 设置启动图"></a>ios android 设置启动图</h5><ul><li>ios: 使用图片工具 <code>App Icon Gear</code> 来生成不同尺寸的图片</li><li>之后 <a href="http://www.jianshu.com/p/735ba76594b5" target="_blank" rel="noopener">参考</a></li></ul><p>注意：<br><img src="http://img.ywx.store/0073tXM5gy1fy1xtussjij30es03swes.jpg" alt="image"></p><ul><li>android: 使用 <code>react-native-splash-screen</code> 来实现。</li><li>可以使用 <a href="http://ticons.fokkezb.nl/" target="_blank" rel="noopener">这里</a> 来生成android 的图片，注意生成后,每个文件夹里面的每张图名称需要更改为 <code>launch_screen</code> 然后配置 <code>react-native-splash-screen</code> ，就可以使用的了。</li><li>碰到的坑：按照文档配好后，出现ios 正常 ，android启动闪退, <code>“Unfortunately, app has stopped”</code>, <a href="https://github.com/crazycodeboy/react-native-splash-screen/issues/124" target="_blank" rel="noopener">解决办法</a></li></ul><h5 id="解决TextInput-框点击空白处不失去焦点问题"><a href="#解决TextInput-框点击空白处不失去焦点问题" class="headerlink" title="解决TextInput 框点击空白处不失去焦点问题"></a>解决TextInput 框点击空白处不失去焦点问题</h5><ul><li>在 <code>TextInput</code> 最外层的根节点加一个 <code>ScrollView</code> ,添加 keyboardShouldPersistTaps={‘never’}。</li><li>或者在最外层添加 <code>TouchableOpacity</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> dismissKeyboard <span class="keyword">from</span> <span class="string">'dismissKeyboard'</span></span><br><span class="line">dismissKeyboardClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        dismissKeyboard()</span><br><span class="line">    &#125;</span><br><span class="line">render()&#123;</span><br><span class="line"><span class="keyword">return</span> （</span><br><span class="line">...</span><br><span class="line">&lt;TouchableOpacity</span><br><span class="line">                    style=&#123;&#123; <span class="attr">flex</span>: <span class="number">1</span> &#125;&#125;</span><br><span class="line">                    onPress=&#123;<span class="keyword">this</span>.dismissKeyboardClick&#125;</span><br><span class="line">                    activeOpacity=&#123;<span class="number">1</span>&#125;</span><br><span class="line">                &gt;</span><br><span class="line">                <span class="comment">//TextInput组件</span></span><br><span class="line">    &lt;TouchableOpacity/&gt;</span><br><span class="line">    ...</span><br><span class="line">）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="react-native-webview-如何引入本地html文件"><a href="#react-native-webview-如何引入本地html文件" class="headerlink" title="react-native webview 如何引入本地html文件"></a>react-native webview 如何引入本地html文件</h5><ul><li>ios : 直接 <code>source={require(&#39;../../assets/html/message.html&#39;)}</code></li><li>android : Android 需要先把静态资源放到 <code>android/app/src/main/assets</code> 目录下面，然后把 <code>require(&#39;../../assets/html/message.html&#39;)</code> 换成 <code>{uri: &#39;file:///android_asset/html/message.html&#39;}</code>。</li></ul><h5 id="解决-android-绝对定位元素定位在底部被键盘顶起问题"><a href="#解决-android-绝对定位元素定位在底部被键盘顶起问题" class="headerlink" title="解决 android 绝对定位元素定位在底部被键盘顶起问题"></a>解决 android 绝对定位元素定位在底部被键盘顶起问题</h5><p><img src="http://img.ywx.store/0073tXM5gy1fy1y5k91cdj30h305ht9m.jpg" alt="image"></p><p>如果希望被顶起：<code>android:windowSoftInputMode=&quot;adjustResize&quot;</code></p><h5 id="TextInput-组件设置-value-值不显示的问题"><a href="#TextInput-组件设置-value-值不显示的问题" class="headerlink" title="TextInput 组件设置 value  值不显示的问题"></a>TextInput 组件设置 value  值不显示的问题</h5><p>value 值类型为字符串，设置成Number 类型不显示</p>]]></content>
      
      <categories>
          
          <category> react-native </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react-native </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js代码片段难点集合</title>
      <link href="/2018/09/25/js%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5%E9%9A%BE%E7%82%B9%E9%9B%86%E5%90%88/"/>
      <url>/2018/09/25/js%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5%E9%9A%BE%E7%82%B9%E9%9B%86%E5%90%88/</url>
      <content type="html"><![CDATA[<h3 id="如何理解"><a href="#如何理解" class="headerlink" title="如何理解"></a>如何理解</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a,b,c</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> _args = [].slice.call(<span class="built_in">arguments</span>);</span><br><span class="line"><span class="built_in">console</span>.log(_args)</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h3 id="如何封装一个柯里化通用式"><a href="#如何封装一个柯里化通用式" class="headerlink" title="如何封装一个柯里化通用式"></a>如何封装一个柯里化通用式</h3><p>思路柯里化运行的过程是一个参数收集过程，并在最里面处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单实现，参数只能从右到左传递</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCurry</span>(<span class="params">func, args</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> arity = func.length;</span><br><span class="line">    <span class="keyword">var</span> args = args || [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _args = [].slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">        [].push.apply(_args, args);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果参数个数小于最初的func.length，则递归调用，继续收集参数</span></span><br><span class="line">        <span class="keyword">if</span> (_args.length &lt; arity) &#123;</span><br><span class="line">            <span class="keyword">return</span> createCurry.call(<span class="keyword">this</span>, func, _args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 参数收集完毕，则执行func</span></span><br><span class="line">        <span class="keyword">return</span> func.apply(<span class="keyword">this</span>, _args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ajax跨域解决思路</title>
      <link href="/2018/09/25/ajax%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%80%9D%E8%B7%AF/"/>
      <url>/2018/09/25/ajax%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%80%9D%E8%B7%AF/</url>
      <content type="html"><![CDATA[<h3 id="为什么会发生AJAX跨域？"><a href="#为什么会发生AJAX跨域？" class="headerlink" title="为什么会发生AJAX跨域？"></a>为什么会发生AJAX跨域？</h3><h4 id="浏览器限制"><a href="#浏览器限制" class="headerlink" title="浏览器限制"></a>浏览器限制</h4><p>当浏览器发现请求是跨域的时候，它会做一些校验，如果校验不通过它就会报跨域安全错误。</p><h4 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h4><p>发出去的请求，协议、端口、请求地址，任何一个不一样，浏览器就会认为是跨域。</p><h4 id="发送的是-XHR-XMLHttpRequest-请求"><a href="#发送的是-XHR-XMLHttpRequest-请求" class="headerlink" title="发送的是 XHR(XMLHttpRequest) 请求"></a>发送的是 XHR(XMLHttpRequest) 请求</h4><p>如果发送的不是XHR请求，就算是跨域，浏览器也不会报错。<br><img src="http://img.ywx.store/0073tXM5gy1fy1y79efxoj30of0533zd.jpg" alt="image"></p><h3 id="解决问题的思路"><a href="#解决问题的思路" class="headerlink" title="解决问题的思路"></a>解决问题的思路</h3><p>1.浏览器限制，我们就解除浏览器的跨域限制，从命令行中启动chrome。</p><p><code>open -n /Applications/Google\ Chrome.app/ --args --disable-web-security  --user-data-dir=/Users/wenxiangye/MyChromeDevUserData/</code></p><p>2.JSONP如何解决跨域问题？<br>利用JQ实现JSONP请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">url: base+<span class="string">"/get1"</span>,</span><br><span class="line">dataType: <span class="string">"jsonp"</span>,</span><br><span class="line">jsonp: <span class="string">"callback2"</span>,   <span class="comment">//默认不写前后端约定的名称是 callback</span></span><br><span class="line">cache: <span class="literal">true</span>,  <span class="comment">//表示结果可以被缓存，jsonp请求url中不会带 `_`字段</span></span><br><span class="line">success: <span class="function"><span class="keyword">function</span>(<span class="params">json</span>)</span>&#123;</span><br><span class="line">result = json;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="http://img.ywx.store/0073tXM5gy1fy1y72cqo9j30o605w75f.jpg" alt="image"></p><blockquote><p>有三个不同点:</p><ol><li>请求的Type不同</li><li>请求返回的 Content-Type 不同</li><li>JSON请求的URL后面自动加了callback  </li></ol></blockquote><p>动态创建<code>&lt;script&gt;</code>标签，请求的资源可以跨域，来解决跨域问题的（eg：<code>&lt;img&gt;</code>标签中请求图片的地址可以跨域）<br>后台代码也需要做处理，因为后台代码返回的是JSON，而通过JSONP请求的是JS文件，浏览器会把后台返回的JSON字符串当成是JS来解析，所以报错了。<br>后台代码需要做的调整就是：请求参数中发现callback 这个字段，需要返回JS代码，callback 后面的值作为函数名，而请求需要返回的参数，作为函数的参数。</p><p>动态创建的script请求完毕后会被销毁，所以dom结构中无法查看，需要再JQ源码中9816行出打断点查看。<br><img src="http://img.ywx.store/0073tXM5gy1fy1xvns480j30jz08swfo.jpg" alt="image"></p><blockquote><p>jsonp请求里面除了callback参数之外还多了一个<code>_</code>参数，参数值是一个随机的数字，防止请求被缓存。</p></blockquote><p>JSON弊端：</p><ul><li>服务器需要做一些改动。</li><li>只支持GET</li><li>发送的不是XHR请求，（XHR有很多新的特性，比如异步。）</li></ul><p>3.被调用方解决跨域问题<br>响应头增加字段，告诉浏览器允许跨域。<br>浏览器发现请求是跨域的时候，他会在请求头增加当前域的字段<code>Origin: http://localhost:8081</code> 等请求返回来，他会检查响应头里面的字段信息，是否允许跨域。<br>后端需要在响应头增加 ：<br><code>Access-Control-Allow-Origin:http://localhost:8081</code><br><code>Access-Control-Allow-Methods:GET</code><br>两个字段都可以填写<code>*</code>表示所有域名和请求都可以跨域</p><h3 id="简单请求和非简单请求"><a href="#简单请求和非简单请求" class="headerlink" title="简单请求和非简单请求"></a>简单请求和非简单请求</h3><p>浏览器在发送跨域请求的时候，会先判断跨域是简单请求还是非简单请求，如果是简单请求它会先执行，后判断。如果是非简单请求，会发一个OPTIONS的预检命令，检查通过后，他会把真正的请求发送过去。</p><ul><li>简单请求的定义：方法为<code>GET</code> <code>POST</code> <code>HEAD</code> 、无自定义头部、<code>Content-Type</code>为：<code>text/plain</code>、<code>multipart/form-data</code>、<code>application/x-www-form-urlencoded</code> 三种。</li><li>非简单请求：方法为 <code>PUT</code>, <code>DELETE</code> 方法的ajax请求、发送json格式的ajax请求、带自定义头的请求</li></ul><p>非简单请求时，如果跨域了，浏览器首先发送一个OPTIONS预检请求，在预检请求中会有一个字段  <code>Access-Control-Request-Method: content-type</code> ，询问后台服务器是否允许 <code>content-type</code> 这个头，如果响应头部没有通过的信息，就会报跨域的错误。</p><p><strong>解决方法</strong>： 后台代码需要增加头信息 <code>Access-Control-Allow-Headers: Content-Type</code></p><blockquote><p>非简单请求每个跨域请求都会请求两次，这样非常影响效率，响应可以增加一个头信息，来缓存预检命令，<code>Access-Control-Max-Age: 3600</code> 这个头信息的意思是告诉浏览器，在3600秒内，可以缓存预检命令的结果，不需要发送预检命令。</p></blockquote><p><strong>带cookie的跨域</strong>：当响应头<code>Access-Control-Allow-Origin: *</code> 时，是不能满足带cookie的跨域请求的，前端设置 ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$.aiax(&#123;</span><br><span class="line">...,</span><br><span class="line">xhrFields:&#123;</span><br><span class="line">withCredentials:<span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>后端设置头信息 <code>Axxess-Control-Allow-Origin: http://localhost:8081</code>和<code>Access-Control-Allow-Credentials: true</code></p><p>但是这样做之后，浏览器只会允许 <code>http://localhost:8081</code> 这个地址来跨域，如果需要多个地址请求实现跨域如何实现呢？<br>之前知识点： <strong>浏览器发现请求是跨域的时候，他会在请求头增加当前域的字段Origin: <a href="http://localhost:8081" target="_blank" rel="noopener">http://localhost:8081</a> 等请求返回来，他会检查响应头里面的字段信息，是否允许跨域。</strong><br>后端可以动态的去取 <code>Origin</code>这个字段的值，如果不为空，则 <code>Axxess-Control-Allow-Origin: Origin</code>,现在就可以支持任何的跨域调用了。</p><h3 id="带自定头的跨域"><a href="#带自定头的跨域" class="headerlink" title="带自定头的跨域"></a>带自定头的跨域</h3><p>首先前端定义：</p><p><img src="http://img.ywx.store/0073tXM5gy1fy1xwidx7wj30dh083dgg.jpg" alt="image"></p><p>可以发现请求头部增加了如下内容：<br><img src="http://img.ywx.store/0073tXM5gy1fy1y5sjavrj30f805njs6.jpg" alt="image"></p><p>此时去请求发现报错<br><img src="http://img.ywx.store/0073tXM5gy1fy1y0hz45pj30od02974p.jpg" alt="image"><br>报错信息的意思是：在返回头<code>Access-Control-Allow-Headers</code> 字段中没有 <code>x-header2</code> 的信息，把 <code>x-header1 x-header2</code> 加进去就行了，最好是动态的获取请求头<code>Origin</code>里面的值去添加，这样就支持所有的自定义头部了。</p><h3 id="虚拟主机上设置响应头信息"><a href="#虚拟主机上设置响应头信息" class="headerlink" title="虚拟主机上设置响应头信息"></a>虚拟主机上设置响应头信息</h3><p>之前我们是直接在应用服务器上面修改响应头信息，现在我们建立一个虚拟主机，在虚拟主机上面修改响应头信息<br>被调用方的虚拟主机的配置。</p><p>第一步首先配置HOST文件eg:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> b.com</span><br></pre></td></tr></table></figure><p>打开nginx中的config目录 新建一个 <code>vhost</code>目录，在里面新建虚拟主机的配置文件。打开 <code>nginx.config</code> 文件,在最后增加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include vhost/*.conf  //让nginx载入这个目录下的所有.conf文件</span><br></pre></td></tr></table></figure><p>在vhost目录中新建一个 <code>b.com.config</code>文件，里面写入下面代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    listen 80;        //监听的端口</span><br><span class="line">    server_name b.com;   //监听的域名</span><br><span class="line">    location /&#123;</span><br><span class="line">        proxy_pass http://localhost:8080/; //把所有的请求都转到 8080,监听80端口，域名为b.com</span><br><span class="line">        add_header Access-Control-Allow-Methods *;</span><br><span class="line">        add_header Access-Control-Max-Age 3600;</span><br><span class="line">        add_header Access-Control-Allow-Credentials true;</span><br><span class="line"></span><br><span class="line">        add_header Access-Control-Allow-Origin $http_origin;  //获取请求头里面的值</span><br><span class="line">        add_header Access-Control-Allow-Headers $http_access_control_request_headers;</span><br><span class="line">        if ($request_method = OPTIONS)&#123;</span><br><span class="line">            return 200;   //把跨域的预检命令直接在虚拟主机上处理，不经过应用主机。</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动nginx <code>start nginx</code></p><h3 id="调用方解决跨域"><a href="#调用方解决跨域" class="headerlink" title="调用方解决跨域"></a>调用方解决跨域</h3><p>通过反向代理来实现,隐藏跨域。</p><blockquote><p>正向代理：它隐藏了真实的请求客户端，服务端不知道真实的客户端是谁，客户端请求的服务都被代理服务器代替来请求，正向代理的过程，它隐藏了真实的请求客户端，服务端不知道真实的客户端是谁，客户端请求的服务都被代理服务器代替来请求。</p></blockquote><blockquote><p>反向代理:它隐藏了真实的服务端，当我们请求 <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 的时候，就像拨打10086一样，背后可能有成千上万台服务器为我们服务，但具体是哪一台，你不知道，也不需要知道，你只需要知道反向代理服务器是谁就好了，<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 就是我们的反向代理服务器，反向代理服务器会帮我们把请求转发到真实的服务器那里去。Nginx就是性能非常好的反向代理服务器，用来做负载均衡。</p></blockquote><blockquote><p>两者的区别在于代理的对象不一样：正向代理代理的对象是客户端，反向代理代理的对象是服务端。<br><a href="https://www.zhihu.com/question/24723688" target="_blank" rel="noopener">摘自知乎-刘志军的回答</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 b.com a.com //增加一个a.com，用它表示调用方的虚拟主机</span><br></pre></td></tr></table></figure><p>在vhost目录中新建一个 <code>a.com.config</code>文件，里面写入下面代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80:</span><br><span class="line">    server_name a.com;</span><br><span class="line"></span><br><span class="line">    location /&#123;</span><br><span class="line">        proxy_pass http://localhost:8081/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /ajaxserver&#123; //把我们要调用的服务器代理成 ajaxserver</span><br><span class="line">        proxy_pass http://localhost:8080/test/; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求的代码中修改请求的基本前缀</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> base = <span class="string">'/ajaxserver'</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ajax </tag>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>react-redux_使用装饰器优化connect代码</title>
      <link href="/2018/09/24/react-redux-%E4%BD%BF%E7%94%A8%E8%A3%85%E9%A5%B0%E5%99%A8%E4%BC%98%E5%8C%96connect%E4%BB%A3%E7%A0%81/"/>
      <url>/2018/09/24/react-redux-%E4%BD%BF%E7%94%A8%E8%A3%85%E9%A5%B0%E5%99%A8%E4%BC%98%E5%8C%96connect%E4%BB%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<p>项目是使用 <code>create-react-app</code> 创建</p><ul><li><code>npm run eject</code>弹出个性化配置</li><li><code>npm i babel-plugin-transform-decorators-legacy</code> 插件</li><li>package.json里babel加上plugins配置</li></ul><p><img src="http://img.ywx.store/0073tXM5gy1fy1y6ublmhj30j409w0th.jpg" alt="image"></p><p><img src="http://img.ywx.store/0073tXM5gy1fy1y6j83igj30kc0amwfv.jpg" alt="image"></p>]]></content>
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> react-redux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>AMD-CMD-CommonJs和ES6对比</title>
      <link href="/2018/09/24/AMD-CMD-CommonJs%E5%92%8CES6%E5%AF%B9%E6%AF%94/"/>
      <url>/2018/09/24/AMD-CMD-CommonJs%E5%92%8CES6%E5%AF%B9%E6%AF%94/</url>
      <content type="html"><![CDATA[<h3 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h3><p>AMD 是 RequireJS在推广过程中对模块定义的规范化产出,推崇依赖前置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">define([<span class="string">'package/lib'</span>],fucntion(lib)&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">lib.log(<span class="string">'hello world!'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"> foo: foo</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>优点：代码一旦运行到此处，能立即知晓依赖。而无需遍历整个函数体找到它的依赖，因此性能有所提升。加载依赖的函数的时候是异步加载的，这样浏览器不会失去响应，它指定的回调函数，只有前面的模块都加载成功后，才会运行，解决了依赖性的问题。<br>缺点：就是开发者必须显式得指明依赖——这会使得开发工作量变大，比如：当你写到函数体内部几百上千行的时候，忽然发现需要增加一个依赖，你不得不回到函数顶端来将这个依赖添加进数组。</p><h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h3><p>CMD是SeaJS在推广过程中对模块定义规范化产出，推崇依赖就近。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//所有模块通过 define定义</span><br><span class="line">define(function(require, exports. module)&#123;</span><br><span class="line">//通过 require 引入依赖</span><br><span class="line">var $ = require(&apos;jquery&apos;)</span><br><span class="line">var Spinning = require(&apos;./spinning&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h3><p>是node服务端的一个规范,只在服务端使用，浏览器并不支持。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export.area = function(r)&#123;</span><br><span class="line">return Math.PI * r * r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ES6-export-import"><a href="#ES6-export-import" class="headerlink" title="ES6 export/import"></a>ES6 export/import</h3>]]></content>
      
      
        <tags>
            
            <tag> 模块化规范 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>koa笔记</title>
      <link href="/2018/09/24/koa%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/09/24/koa%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h3 id="Context对象"><a href="#Context对象" class="headerlink" title="Context对象"></a>Context对象</h3><p>Koa提供一个Context对象，表示一次对话的上下文（包括HTTP请求和HTTP回复），通过给这个对象赋值可以控制返回给用户的内容。</p><p>eg:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> main = <span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">  ctx.response.body = <span class="string">'Hello World'</span>;</span><br><span class="line">&#125;;</span><br><span class="line">app.use(main);</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h3 id="给响应的body-添加内容"><a href="#给响应的body-添加内容" class="headerlink" title="给响应的body 添加内容"></a>给响应的body 添加内容</h3><p>Koa默认返回的类型是 <code>text/plain</code>。<br>可以使用 <code>ctx.request.accepts(&#39;json&#39;)</code> 来判断客户端接收什么数据，同时设置返回的类型 <code>ctx.response.type = &#39;json&#39;</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctx.response.body = <span class="string">'Hello World'</span>;               <span class="comment">//text</span></span><br><span class="line">ctx.response.body = &#123; <span class="attr">data</span>: <span class="string">'Hello World'</span> &#125;;     <span class="comment">//json</span></span><br><span class="line">ctx.response.body = <span class="string">'&lt;p&gt;Hello World&lt;/p&gt;'</span>;        <span class="comment">//html</span></span><br><span class="line">ctx.response.body = <span class="string">'&lt;data&gt;Hello World&lt;/data&gt;'</span>;  <span class="comment">//xml</span></span><br></pre></td></tr></table></figure><h3 id="网页模板"><a href="#网页模板" class="headerlink" title="网页模板"></a>网页模板</h3><p>Koa先读取模板文件，然后返回给用户</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.response.body = fs.createReadStream(<span class="string">'./demos/template.html'</span>);</span><br></pre></td></tr></table></figure><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>原生路由是通过 <code>ctx.request.path</code> 可以获取用户请求的路径,由此判断该返回什么内容给用户，使用不方便，一般使用 <code>koa-route</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> about = <span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">  ctx.response.type = <span class="string">'html'</span>;</span><br><span class="line">  ctx.response.body = <span class="string">'&lt;a href="/"&gt;Index Page&lt;/a&gt;'</span>;</span><br><span class="line">&#125;;</span><br><span class="line">app.use(route.get(<span class="string">'/about'</span>, about));</span><br></pre></td></tr></table></figure><h3 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h3><p>如果服务器需要返回给用户一些静态资源（图片，字体，样式表，脚本），一个个写路由很麻烦，可以使用 <code>koa-static</code> 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const Koa = require(&apos;koa&apos;);</span><br><span class="line">const app = new Koa();</span><br><span class="line">const path = require(&apos;path&apos;);</span><br><span class="line">const server = require(&apos;koa-static&apos;)</span><br><span class="line">const publicServer = server(path.join(__dirname) + &apos;/public&apos;);</span><br><span class="line">app.use(publicServer);</span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure><p>这样用户可以访问  <code>__dirname</code> 文件夹下的所有文件。<br>eg:输入<code>http://localhost:3000/01.js</code> ，可以查看 <code>__dirname</code> 文件夹下的 <code>01.js</code> 文件。</p><h3 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h3><p><code>ctx.response.redirect(&#39;/&#39;)</code> 方法可以发出一个302跳转,将用户导向另一个路由。</p><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><p>Koa最重要的一个设计就是中间件，比如打印日志中间件简单的写法，可以直接main函数中写 <code>console.log(...)</code>， 也可以拆分成一个独立函数（如下）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> logger = <span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span> <span class="subst">$&#123;ctx.request.method&#125;</span> <span class="subst">$&#123;ctx.request.url&#125;</span>`</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> main = <span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">  ctx.response.body = <span class="string">'Hello World'</span>;</span><br><span class="line">&#125;;</span><br><span class="line">app.use(logger);</span><br><span class="line">app.use(main);</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>上面的代码 <code>logger</code> 函数就叫 <code>中间件</code>。</p><blockquote><p>中间件：处于 HTTP Request 和 HTTP Response 中间，用来实现某种中间功能， app.use() 用来加载中间件。</p></blockquote><p>中间件默认有两个参数，<code>(Context, next)</code>, 只要调用 <code>next()</code> 就把执行权交给下一个中间件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> one = <span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'&gt;&gt; one'</span>);</span><br><span class="line">  next();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'&lt;&lt; one'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> two = <span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'&gt;&gt; two'</span>);</span><br><span class="line">  next(); </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'&lt;&lt; two'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> three = <span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'&gt;&gt; three'</span>);</span><br><span class="line">  next();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'&lt;&lt; three'</span>);</span><br><span class="line">&#125;</span><br><span class="line">app.use(one);</span><br><span class="line">app.use(two);</span><br><span class="line">app.use(three);</span><br></pre></td></tr></table></figure><p>三个中间件: one中间件 、 two中间件 、 three中间件。<br>执行步骤 ：最外层 one 首先执行,调用next()方法后,next()方法后面的代码并不会执行,而是把执行权交给下一个中间件 two,同理交给 three 。我的理解是：next() 后面的代码被放入了任务队列，当主线程也就是 next() 之上的代码执行完毕后，执行任务队列的代码，任务队列里面的代码以 <code>先进后出</code> 的顺序执行。</p><blockquote><p>如果删除 two 中间件函数中的 next() ,执行权并不会交给 three 中间件，也就是说 three并不会被执行。</p></blockquote><h3 id="异步中间件"><a href="#异步中间件" class="headerlink" title="异步中间件"></a>异步中间件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs.promised'</span>);</span><br><span class="line"><span class="keyword">const</span> main = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">  ctx.response.type = <span class="string">'html'</span>;</span><br><span class="line">  ctx.response.body = <span class="keyword">await</span> fs.readFile(<span class="string">'./demos/template.html'</span>, <span class="string">'utf8'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="中间件合成-koa-compose"><a href="#中间件合成-koa-compose" class="headerlink" title="中间件合成 koa-compose"></a>中间件合成 koa-compose</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> compose = <span class="built_in">require</span>(<span class="string">'koa-compose'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> logger = <span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(ctx);</span><br><span class="line">  next()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> main = <span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">  ctx.response.body = <span class="string">'Hello World'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> middlewares = compose([logger, main])</span><br><span class="line">app.use(middlewares)</span><br></pre></td></tr></table></figure><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>如果代码运行过程中发生错误，我们需要把错误信息返回给用户，可以使用 <code>ctx.throw(statusCode)</code> 来返回,  <code>ctx.response.status = 404</code> 等价于 <code>ctx.throw(404)</code> 。</p><p>为了方便处理错误，最好使用 <code>try...catch</code>, 每个中间件写太麻烦，可以让最外层的中间件负责所有处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> handler = <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> next();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    ctx.response.status = err.statusCode || err.status || <span class="number">500</span>;</span><br><span class="line">    ctx.response.body = &#123;</span><br><span class="line">      message: err.message</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> main = <span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">  ctx.throw(<span class="number">500</span>);</span><br><span class="line">&#125;;</span><br><span class="line">app.use(handler);</span><br><span class="line">app.use(main);</span><br></pre></td></tr></table></figure><p>以上代码，由于 main中间件中抛出了错误，会执行 最外层中间件handler catch里面的代码。</p><h5 id="错误事件监听"><a href="#错误事件监听" class="headerlink" title="错误事件监听"></a>错误事件监听</h5><p>代码运行过程中出错，Koa会触发一个 <code>error</code> 事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//错误事件监听</span></span><br><span class="line">app.on(<span class="string">'error'</span>, (err, ctx) =&gt;</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">'server error'</span>, err);</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>如果错误被 <code>try...catch</code> 捕获， 就不会触发error事件，必须调用 <code>ctx.app.emit()</code> 手动释放 error 事件，才能让监听函数生效。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> handler = <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> next();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    ctx.app.emit(<span class="string">'error'</span>, err, ctx);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读写-cookies"><a href="#读写-cookies" class="headerlink" title="读写 cookies"></a>读写 cookies</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> main = <span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">  ctx.cookies.get(<span class="string">'view'</span>);</span><br><span class="line">  ctx.cookies.set(<span class="string">'view'</span>, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="koa-中获取请求参数"><a href="#koa-中获取请求参数" class="headerlink" title="koa 中获取请求参数"></a>koa 中获取请求参数</h3><p>获取  <code>/v1/:id/classic/latest</code> 中的id<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = ctx.params</span><br></pre></td></tr></table></figure></p><p>获取 <code>localhost:3000/v1/3/classic/latest?params=wen</code> 中?号后面的键值对<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> query = ctx.request.query</span><br></pre></td></tr></table></figure></p><p>获取头部的数据<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> header = ctx.request.header</span><br></pre></td></tr></table></figure></p><p>获取body中的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'koa-bodyparser'</span>);</span><br><span class="line">app.use(bodyParser())</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">const</span> body = ctx.request.body</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>可以使用<code>koa-body</code>来提取POST请求体中的键值对,类似于 <code>name=Jack</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const koaBody = require(&apos;koa-body&apos;);</span><br><span class="line">const app = new Koa();</span><br><span class="line"></span><br><span class="line">const main = async function(ctx) &#123;</span><br><span class="line">  const body = ctx.request.body;</span><br><span class="line">  console.log(body)</span><br><span class="line">  if (!body.name) ctx.throw(400, &apos;.name required&apos;);</span><br><span class="line">  ctx.body = &#123; name: body.name &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">app.use(koaBody());</span><br><span class="line">app.use(main);</span><br></pre></td></tr></table></figure><h3 id="koa-view使用"><a href="#koa-view使用" class="headerlink" title="koa-view使用"></a>koa-view使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const views = require(&apos;koa-views&apos;)</span><br><span class="line">const &#123; resolve &#125; = require(&apos;path&apos;)</span><br><span class="line"></span><br><span class="line">app.use(views(resolve(__dirname, &apos;./views&apos;),&#123;</span><br><span class="line">extension:pug</span><br><span class="line">&#125;)</span><br><span class="line">app.use(async (ctx, next) =&gt; &#123;</span><br><span class="line">    await ctx.render(&apos;index&apos;,&#123;</span><br><span class="line">        title:&apos;ye&apos;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> koa </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>媒介查询</title>
      <link href="/2018/09/24/%E5%AA%92%E4%BB%8B%E6%9F%A5%E8%AF%A2/"/>
      <url>/2018/09/24/%E5%AA%92%E4%BB%8B%E6%9F%A5%E8%AF%A2/</url>
      <content type="html"><![CDATA[<h3 id="使用CSS3的-Media-Query-查询"><a href="#使用CSS3的-Media-Query-查询" class="headerlink" title="使用CSS3的 Media Query 查询"></a>使用CSS3的 Media Query 查询</h3><p>1.外链方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;link.css&quot; media=&quot;only screen and (max-width:480px)&quot;/&gt;</span><br></pre></td></tr></table></figure><p>只有当屏幕宽度 &lt;= 480px 时，才会加载这个CSS文件。</p><p>2.内嵌方式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">480px</span>)&#123;</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line"><span class="attribute">background</span>:blue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当屏幕宽度  &gt;= 480 时 body 背景为蓝色。</p>]]></content>
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nginx笔记</title>
      <link href="/2018/09/24/nginx%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/09/24/nginx%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h5 id="客户端nginx路径信息"><a href="#客户端nginx路径信息" class="headerlink" title="客户端nginx路径信息"></a>客户端nginx路径信息</h5><p>配置文件路径: <code>/usr/local/etc/nginx/nginx.conf</code><br>服务器默认路径: <code>/usr/local/var/www</code><br>安装路径: <code>/usr/local/Cellar/nginx/1.13.9</code></p><h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><p>直接终端输入 <code>nginx</code> 启动，可以使用  <code>ps -ef|grep nginx</code> 来查看是否启动成功<br><img src="http://img.ywx.store/0073tXM5gy1fy1y37zurlj30kb047t9i.jpg" alt="image"><br>进程号为 3843<br>在终端输入 <code>kill -term  3843</code> 来停止进程</p><h5 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br><span class="line">service nginx reload  <span class="comment">#不停服务重启</span></span><br></pre></td></tr></table></figure><h5 id="查找配置文件路径"><a href="#查找配置文件路径" class="headerlink" title="查找配置文件路径"></a>查找配置文件路径</h5><p>mac下使用homebrew 安装 nginx 的路径：<br><code>/usr/local/etc/nginx/nginx.conf</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep nginx</span><br></pre></td></tr></table></figure></p><h6 id="403-Forbidden权限问题解决"><a href="#403-Forbidden权限问题解决" class="headerlink" title="403 Forbidden权限问题解决"></a>403 Forbidden权限问题解决</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R <span class="variable">$USER</span>:<span class="variable">$USER</span> /root/www/blog</span><br><span class="line">sudo chmod -R 755 /root/www</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端常用CSS代码</title>
      <link href="/2018/09/24/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B8%B8%E7%94%A8CSS%E4%BB%A3%E7%A0%81/"/>
      <url>/2018/09/24/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B8%B8%E7%94%A8CSS%E4%BB%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<h3 id="1px边框问题使用"><a href="#1px边框问题使用" class="headerlink" title="1px边框问题使用"></a>1px边框问题使用</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.xx</span>&#123;</span><br><span class="line"><span class="attribute">position</span>:relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.xx</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line"><span class="attribute">content</span>:<span class="string">''</span>;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200%</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">200%</span>;</span><br><span class="line"><span class="attribute">box-sizing</span>:border-box;</span><br><span class="line"><span class="attribute">-webkit-box-sizing</span>:border-box;</span><br><span class="line"><span class="attribute">-webkit-transform</span>: <span class="built_in">scale</span>(0.5);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(0.5);</span><br><span class="line"><span class="attribute">-webkit-transform-origin</span>: left top;</span><br><span class="line"><span class="attribute">transform-origin</span>: left top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="背景图裁切"><a href="#背景图裁切" class="headerlink" title="背景图裁切"></a>背景图裁切</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.xx</span>&#123;</span><br><span class="line"><span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">'...'</span>);</span><br><span class="line"><span class="attribute">background-position</span>:center center;</span><br><span class="line"><span class="attribute">background-size</span>:cover;</span><br><span class="line"><span class="attribute">background-repeat</span>:no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="横向滚动"><a href="#横向滚动" class="headerlink" title="横向滚动"></a>横向滚动</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line"><span class="attribute">display</span>: -webkit-box;</span><br><span class="line">    <span class="attribute">overflow-x</span>: scroll;</span><br><span class="line">    <span class="attribute">overflow-y</span>: hidden;</span><br><span class="line">    <span class="attribute">-webkit-overflow-scrolling</span>: touch; </span><br><span class="line">    <span class="comment">/* 弹性滑动 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单行显示，超过省略号"><a href="#单行显示，超过省略号" class="headerlink" title="单行显示，超过省略号"></a>单行显示，超过省略号</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.xx</span>&#123;</span><br><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="两行显示，超过省略号"><a href="#两行显示，超过省略号" class="headerlink" title="两行显示，超过省略号"></a>两行显示，超过省略号</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.xx</span>&#123;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">    <span class="attribute">-webkit-line-clamp</span>: <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">-webkit-box-orient</span>: vertical;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="防止ios手机降页面数字变成蓝色号码"><a href="#防止ios手机降页面数字变成蓝色号码" class="headerlink" title="防止ios手机降页面数字变成蓝色号码"></a>防止ios手机降页面数字变成蓝色号码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="静止手机用户缩放"><a href="#静止手机用户缩放" class="headerlink" title="静止手机用户缩放"></a>静止手机用户缩放</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span>  <span class="attr">charset</span>=<span class="string">"utf-8"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0"</span> <span class="attr">name</span>=<span class="string">"viewport"</span> /&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 移动端常用CSS代码 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>node异步编程方案</title>
      <link href="/2018/09/24/node%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E6%96%B9%E6%A1%88/"/>
      <url>/2018/09/24/node%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<h4 id="回调函数-第一阶段"><a href="#回调函数-第一阶段" class="headerlink" title="回调函数  (第一阶段)"></a>回调函数  (第一阶段)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span> (<span class="params">cb</span>)</span>&#123;</span><br><span class="line">fs.readFile(path, (err, data) =&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err)</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">readFile(<span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(!err)&#123;</span><br><span class="line">data = <span class="built_in">JSON</span>.parse(data)</span><br><span class="line"><span class="built_in">console</span>.log(data.value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="promise-第二阶段"><a href="#promise-第二阶段" class="headerlink" title="promise (第二阶段)"></a>promise (第二阶段)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFileAsync</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.readFile(path, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) reject(err)</span><br><span class="line">      <span class="keyword">else</span> resolve(data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">readFileAsync(<span class="string">'./package.json'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    data =<span class="built_in">JSON</span>.parse(data)</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h4 id="通过utli-promisify-方法包装"><a href="#通过utli-promisify-方法包装" class="headerlink" title="通过utli.promisify() 方法包装"></a>通过utli.promisify() 方法包装</h4><p>只能传递一个异步回调函数，返回一个promise Function,第二个括号为传递的参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> utli = <span class="built_in">require</span>(<span class="string">'util'</span>)</span><br><span class="line"></span><br><span class="line">utli.promisify(fs.readFile)(<span class="string">'./package.json'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(data)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data.name)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h3 id="结合使用-async-await"><a href="#结合使用-async-await" class="headerlink" title="结合使用 async await"></a>结合使用 async await</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> readAsync = utli.promisify(fs.readFile)</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">await</span> readAsync(<span class="string">'./package.json'</span>)</span><br><span class="line">    data = <span class="built_in">JSON</span>.parse(data)</span><br><span class="line">    <span class="built_in">console</span>.log(data.name)</span><br><span class="line">  &#125; <span class="keyword">catch</span>(err)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">init()</span><br></pre></td></tr></table></figure><h4 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h4><p>其本质是一个迭代器，下面来实现一个类似的迭代器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeIterator</span> (<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> nextIndex = <span class="number">0</span></span><br><span class="line"><span class="comment">//返回一个迭代器对象</span></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">next: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(nextIndex &lt; arr.length)&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;<span class="attr">value</span>: arr[nextIndex++], <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;<span class="attr">done</span>: <span class="literal">true</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> it = makeIterator([<span class="string">'吃饭'</span>, <span class="string">'睡觉'</span>])</span><br><span class="line"><span class="built_in">console</span>.log(it.next().value)  <span class="comment">//吃饭</span></span><br><span class="line"><span class="built_in">console</span>.log(it.next().value)  <span class="comment">//睡觉</span></span><br></pre></td></tr></table></figure><p>生成器（Generator）：返回迭代器的函数,简化自己创建迭代器繁琐的过程，同时保持逻辑的清晰性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">funciton *makeIterator (arr)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line"><span class="keyword">yield</span> arr[i]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> gen = makeIterator([<span class="string">'吃饭'</span>, <span class="string">'睡觉'</span>])</span><br><span class="line"><span class="built_in">console</span>.log(gen.next().value)  <span class="comment">//吃饭</span></span><br><span class="line"><span class="built_in">console</span>.log(gen.next().value)  <span class="comment">//睡觉</span></span><br></pre></td></tr></table></figure><h4 id="co-与-Generator-第三阶段"><a href="#co-与-Generator-第三阶段" class="headerlink" title="co 与 Generator  (第三阶段)"></a>co 与 Generator  (第三阶段)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> co = <span class="built_in">require</span>(<span class="string">'co'</span>)</span><br><span class="line"><span class="keyword">const</span> fetch = <span class="built_in">require</span>(<span class="string">'node-fetch'</span>)</span><br><span class="line">co(<span class="function"><span class="keyword">function</span> *(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">const</span> res = <span class="keyword">yield</span> fetch(<span class="string">'https://api.douban.com/v2/movie/1291843'</span>)</span><br><span class="line"><span class="keyword">const</span> movie = <span class="keyword">yield</span> res.json()</span><br><span class="line"><span class="keyword">const</span> summary = movie.summary</span><br><span class="line"><span class="built_in">console</span>.log(summary)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>通过co 这个库，可以传递一个Generator函数,就可以通过同步的方式，来执行异步的过程。通过 yield 关键字可以实现一个状态的暂停，当 yield后面的异步代码没有执行完毕时，后面的代码不会执行。简单来说co 函数能让里面 yield 暂停的函数都能得到一步步的执行，<strong>实现了 Generator 的自动执行</strong></p><h4 id="async-Function-（第四阶段-统一世界）"><a href="#async-Function-（第四阶段-统一世界）" class="headerlink" title="async Function （第四阶段 统一世界）"></a>async Function （第四阶段 统一世界）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> = readAsync = utli.promisify(fs.readFile)</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> data = <span class="keyword">await</span> readAsync(<span class="string">'./package.json'</span>)</span><br><span class="line">data = <span class="built_in">JSON</span>.parse(data)</span><br><span class="line"><span class="built_in">console</span>.log(data.name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mongoDB操作</title>
      <link href="/2018/09/24/mongoDB%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/09/24/mongoDB%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; post = &#123;<span class="string">"title"</span>: <span class="string">"my blog post"</span>, <span class="string">"content"</span>:<span class="string">"here's my blog post"</span>, <span class="string">"date"</span>: new Date()&#125;</span><br><span class="line">&gt; db.blog.insert(post)</span><br></pre></td></tr></table></figure><p>javascript shell 中， <code>db</code> 命令现当前所在的数据库，上面代码，在当前数据库中的 <code>blog</code>集合 插入 <code>post</code>文档。<br>可以使用 <code>db.blog.find()</code> 查找 <code>blog</code> 集合中保存的所有文档。</p><h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><p>find(): 会返回集合里面所有的文档，若只想查看一个文档可以使用 findOne</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.blog.findOne()</span><br></pre></td></tr></table></figure><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>update: 接收至少两个参数:</p><ul><li>第一个是更新文档的限定条件</li><li>第二个是新文档</li><li>第三个参数为true时，表示开启 upsert 更新模式，要是没有文档符合更新条件，就会以这个条件和更新文档为基础创建一个新文档，如果找到则正常更新。</li><li>第四个参数为true时，表示开启多文档更新，默认为false，只能匹配并更新一个。</li></ul><p>比如给上面的文档增加一个 <code>comments</code> 字段，值为[]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; post.comments = []</span><br><span class="line">&gt; db.blog.update(&#123;title:&quot;my blog post&quot;&#125;, post)</span><br></pre></td></tr></table></figure><p><strong>例子</strong>：删除数据库集合中某个字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.User.update(&#123;&#125;,&#123;$unset:&#123;&apos;address&apos;:&apos;&apos;&#125;&#125;,false, true)</span><br></pre></td></tr></table></figure><p><strong>使用修改器</strong><br>利用原子的 <code>更新修改器</code>，使得这部分修改极为高效。<br>比如页面访问统计</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"_id"</span> : ObjectId(<span class="string">"5b430d4da1d1ea0fd260cae5"</span>),</span><br><span class="line">    <span class="string">"url"</span> : <span class="string">"www.baidu.com"</span>,</span><br><span class="line">    <span class="string">"pageviews"</span> : <span class="number">52</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.blog.update(&#123;<span class="string">"url"</span>:<span class="string">"www.baidu.com"</span>&#125;, &#123;<span class="string">"<span class="variable">$inc</span>"</span>:&#123;<span class="string">"pageviews"</span>:1&#125;&#125;)</span><br><span class="line"><span class="comment"># 会将上面的pageviews + 1，</span></span><br></pre></td></tr></table></figure><blockquote><p>如果update 第一个参数匹配到多个文档，只会更新第一个,所以一般选择ID作为条件</p></blockquote><h5 id="“-set”修饰器"><a href="#“-set”修饰器" class="headerlink" title="“$set”修饰器"></a>“$set”修饰器</h5><p>用来指定一个键的值，如果这个键不存在则创建。（更新键的值，或者数据类型。）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.blog.update(&#123;<span class="string">"_id"</span>:ObjectId(<span class="string">"5b431136a1d1ea0fd260cc3e"</span>)&#125;, &#123;<span class="string">"<span class="variable">$set</span>"</span>:&#123;<span class="string">"favorite book"</span>: <span class="string">"war and peace"</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><p>可以修改类型:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.blog.update(&#123;<span class="string">"_id"</span>:ObjectId(<span class="string">"5b431136a1d1ea0fd260cc3e"</span>)&#125;, &#123;<span class="string">"<span class="variable">$set</span>"</span>:&#123;<span class="string">"favorite book"</span>: [<span class="string">"cat"</span>, <span class="string">"dog"</span>]&#125;&#125;)</span><br></pre></td></tr></table></figure><p>修改嵌套文档</p><p><img src="http://img.ywx.store/0073tXM5gy1fy1xtlf4syj30io05cq39.jpg" alt="image"></p><h5 id="“-unset”修饰器"><a href="#“-unset”修饰器" class="headerlink" title="“$unset”修饰器"></a>“$unset”修饰器</h5><p>将一个键完全删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.blog.update(&#123;<span class="string">"_id"</span>:ObjectId(<span class="string">"5b431136a1d1ea0fd260cc3e"</span>)&#125;, &#123;<span class="string">"unset"</span>: &#123;<span class="string">"favorite book"</span>: 1&#125;&#125;)</span><br></pre></td></tr></table></figure><h5 id="“-inc”修饰器"><a href="#“-inc”修饰器" class="headerlink" title="“$inc”修饰器"></a>“$inc”修饰器</h5><p>用来增加已有键的值，或者在键不存在时创建一个键。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.blog.update(&#123;<span class="string">"game"</span>:<span class="string">"pinball"</span>,<span class="string">"user"</span>:<span class="string">"joe"</span>&#125;,&#123;<span class="string">"<span class="variable">$inc</span>"</span>:&#123;<span class="string">"score"</span>:50&#125;&#125;)</span><br><span class="line"><span class="comment"># 每次增加50,可以为负值</span></span><br></pre></td></tr></table></figure><p>“$inc” 专门用来增加和减少数字的，只能用于整数、长整数或双精度浮点数</p><h5 id="数组修改器"><a href="#数组修改器" class="headerlink" title="数组修改器"></a>数组修改器</h5><p>“$push” 会向已有的数组末尾加入一个元素，要是没有就创建一个新的数组。</p><p><strong>情景</strong>：值不在数组中时，把它加进去，可以在查询文档中使用 “$ne” 来实现。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.blog.update(&#123;<span class="string">"authords cited"</span>: &#123;<span class="string">"<span class="variable">$ne</span>"</span>: <span class="string">"Richie"</span>&#125;, &#123;<span class="string">"<span class="variable">$push</span>"</span>: &#123;<span class="string">"authords cited"</span>: <span class="string">"Richie"</span>&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure><p>也可以使用 “$addToSet” 完成同样的事情,向数组添加值，避免重复。</p><p>“$addToSet” 可以和 “$each” 结合使用，一次添加多个不同的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.blog.update(&#123;<span class="string">"_id"</span>: ObjectId(<span class="string">"5b431136a1d1ea0fd260cc3e"</span>)&#125;, &#123;</span><br><span class="line">  <span class="string">"<span class="variable">$addToSet</span>"</span>:&#123;</span><br><span class="line">    <span class="string">"emails"</span> :&#123;</span><br><span class="line">      <span class="string">"<span class="variable">$each</span>"</span> : [<span class="string">"dsa@qq.com"</span>, <span class="string">"dsd3aa@qq.com"</span>, <span class="string">"dsd2a@qq.com"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="“-pop”修饰器"><a href="#“-pop”修饰器" class="headerlink" title="“$pop”修饰器"></a>“$pop”修饰器</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">$pop</span>: &#123;<span class="attr">key</span>:<span class="number">1</span>&#125;&#125;  <span class="comment">//从数组末尾删除一个元素, key:-1 从头部删除</span></span><br></pre></td></tr></table></figure><h5 id="“-pull”修饰器"><a href="#“-pull”修饰器" class="headerlink" title="“$pull”修饰器"></a>“$pull”修饰器</h5><p>“$pull” 可以特定条件来删除元素，不仅仅是依据位置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.lists.insert(&#123;<span class="string">"todo"</span>: [<span class="string">"dishes"</span>, <span class="string">"laundry"</span>, <span class="string">"dry cleaning"</span>]&#125;)</span><br><span class="line">&gt; db.lists.update(&#123;&#125;, &#123;<span class="string">"<span class="variable">$pull</span>"</span>: &#123;<span class="string">"todo"</span>:<span class="string">"laundry"</span>&#125;&#125;)</span><br><span class="line"><span class="comment"># 会删除数组中的laundry ,如果有多个，会全部删除。</span></span><br></pre></td></tr></table></figure><h5 id="数组的定位修改器"><a href="#数组的定位修改器" class="headerlink" title="数组的定位修改器"></a>数组的定位修改器</h5><p>假设文档中 comments 字段是一个数组，里面包含多个对象</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.blog.update(..., &#123;<span class="string">"<span class="variable">$inc</span>"</span>: &#123;<span class="string">"comments.0.votes"</span>:1&#125;&#125;)</span><br><span class="line"><span class="comment">#增加第一个评论的投票数量</span></span><br><span class="line"></span><br><span class="line">&gt; db.blog.update(&#123;<span class="string">"comment.author"</span>: <span class="string">"John"</span>&#125;, &#123;<span class="string">"<span class="variable">$set</span>"</span>: &#123;<span class="string">"comments.$.author"</span>: <span class="string">"Jim"</span>&#125;&#125;)</span><br><span class="line"><span class="comment"># $占位符，查询到评论中 作者名为John 的下标，更新为 Jim</span></span><br></pre></td></tr></table></figure><h5 id="save函数"><a href="#save函数" class="headerlink" title="save函数"></a>save函数</h5><p>save是一个shell函数,可以在文档不存在时插入，存在时更新，它只有一个参数：文档</p><blockquote><p>如果这个文档含有”_id” 键，save会调用 upsert。否则会调用插入。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var x = db.foo.findOne()</span><br><span class="line">x.num = 42</span><br><span class="line"></span><br><span class="line">db.foo.save(x)</span><br><span class="line"><span class="comment"># 免去了 update 的查询条件</span></span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>remove: 从数据库永久删除文档，<strong>在传空对象调用，会删除一个集合内所有的文档</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.blog.remove(&#123;title: &quot;my blog post&quot;&#125;)</span><br></pre></td></tr></table></figure><h3 id="shell技巧"><a href="#shell技巧" class="headerlink" title="shell技巧"></a>shell技巧</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.help()</span><br><span class="line"><span class="comment"># 查看数据库级别的入门命令</span></span><br><span class="line"></span><br><span class="line">&gt; db.foo.help()</span><br><span class="line"><span class="comment"># 查看集合相关命令</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongoDB </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mongoose操作</title>
      <link href="/2018/09/24/mongoose%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/09/24/mongoose%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h3 id="简单的-mongoose-示例"><a href="#简单的-mongoose-示例" class="headerlink" title="简单的 mongoose 示例"></a>简单的 mongoose 示例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</span><br><span class="line">mongoose.connect(<span class="string">"mongodb://localhost:27017/study"</span>, &#123;<span class="attr">useNewUrlParser</span>:<span class="literal">true</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Connection Error:'</span> + err)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Connection success!'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> UserSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">  nickname:&#123;</span><br><span class="line">    type:<span class="built_in">String</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="string">'new user'</span>   <span class="comment">//在实例化 model 时，如果不传参则为默认值</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> User = mongoose.model(<span class="string">'User'</span>, UserSchema)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">new</span> User(&#123;</span><br><span class="line">  nickname:<span class="string">'ye'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存到数据库</span></span><br><span class="line">user.save(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(err)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(user.nickname) <span class="comment">//打印保存后的值</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="预定义修饰符-自定义：set修饰符-get修饰符"><a href="#预定义修饰符-自定义：set修饰符-get修饰符" class="headerlink" title="预定义修饰符  自定义：set修饰符 get修饰符"></a>预定义修饰符  自定义：set修饰符 get修饰符</h3><blockquote><p>model 第二个参数会被直接传给 new mongoose.Schema</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = mongoose.model(<span class="string">'User'</span>, &#123;</span><br><span class="line">  nickname:&#123;</span><br><span class="line">    type:<span class="built_in">String</span>,</span><br><span class="line">    trim: <span class="literal">true</span>     <span class="comment">//预定义修饰符</span></span><br><span class="line">  &#125;,</span><br><span class="line">  blog:&#123;</span><br><span class="line">    type:<span class="built_in">String</span>,</span><br><span class="line">    set:<span class="function"><span class="params">v</span> =&gt;</span> &#123;      <span class="comment">//自定义：set修饰符, new modal 传入的参数时执行</span></span><br><span class="line">      <span class="keyword">if</span>(!v) <span class="keyword">return</span> v;</span><br><span class="line">      <span class="keyword">if</span>(<span class="number">0</span> !== v.indexOf(<span class="string">'http://'</span>) &amp;&amp; <span class="number">0</span> !== v.indexOf(<span class="string">'https://'</span>))&#123;</span><br><span class="line">        v = <span class="string">`http://<span class="subst">$&#123;v&#125;</span>`</span></span><br><span class="line">        <span class="keyword">return</span> v</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    get:<span class="function"><span class="params">v</span> =&gt;</span> &#123;      <span class="comment">//自定义：get修饰符, 数据存入数据库之后，取值时执行</span></span><br><span class="line">      <span class="keyword">if</span>(!v) <span class="keyword">return</span> v;</span><br><span class="line">      <span class="keyword">if</span>(<span class="number">0</span> !== v.indexOf(<span class="string">'http://'</span>) &amp;&amp; <span class="number">0</span> !== v.indexOf(<span class="string">'https://'</span>))&#123;</span><br><span class="line">        v = <span class="string">`http://<span class="subst">$&#123;v&#125;</span>`</span></span><br><span class="line">        <span class="keyword">return</span> v</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="虚拟属性"><a href="#虚拟属性" class="headerlink" title="虚拟属性"></a>虚拟属性</h3><p>有时我们不需要把值存取到数据库，可以通过其他的属性值计算，得到我们需要的值，这时可以利用到虚拟属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PersonSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">  firstName:<span class="built_in">String</span>,</span><br><span class="line">  lastName:<span class="built_in">String</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">PersonSchema.virtual(<span class="string">'fullName'</span>).get(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="keyword">this</span>.lastName</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> Person = mongoose.model(<span class="string">'Person'</span>, PersonSchema)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(&#123;</span><br><span class="line">  firstName:<span class="string">'ye'</span>,</span><br><span class="line">  lastName:<span class="string">'wenxiang'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(person.fullName)  <span class="comment">//yewenxiang</span></span><br></pre></td></tr></table></figure><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><ul><li>唯一索引：检查是否唯一</li><li>辅助索引：增加查询速度</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> BookSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">  isbn:&#123;</span><br><span class="line">    type:<span class="built_in">Number</span>,</span><br><span class="line">    unique: <span class="literal">true</span> <span class="comment">//唯一索引</span></span><br><span class="line">  &#125;,</span><br><span class="line">  name:&#123;</span><br><span class="line">    type: <span class="built_in">String</span>,</span><br><span class="line">    index: <span class="literal">true</span>, <span class="comment">//辅助索引</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="模型的方法"><a href="#模型的方法" class="headerlink" title="模型的方法"></a>模型的方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义静态方法，在 BookSchema.findIsbn 上调用</span></span><br><span class="line">BookSchema.statics.findIsbn = <span class="function"><span class="keyword">function</span>(<span class="params">isbn, cb</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.findOne(&#123;isbn&#125;, (err, doc)=&gt;&#123;</span><br><span class="line">    cb(err, doc)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义实例方法  在每个 new 出来的示例上调用</span></span><br><span class="line">BookSchema.methods.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.isbn)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据校验"><a href="#数据校验" class="headerlink" title="数据校验"></a>数据校验</h3><p>数据在保存时检测是否符合规则。</p><p>预定义验证器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> orderSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">  count:&#123;</span><br><span class="line">    type:<span class="built_in">Number</span>,</span><br><span class="line">    required: <span class="literal">true</span>,   <span class="comment">//必须传值 才能保存</span></span><br><span class="line">    max:<span class="number">1000</span>,</span><br><span class="line">    min:<span class="number">10</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  status:&#123;</span><br><span class="line">    type:<span class="built_in">String</span>,</span><br><span class="line">    enum:[<span class="string">'created'</span>, <span class="string">'success'</span>, <span class="string">'failed'</span>]  <span class="comment">//只能三个中选一个 才能保存</span></span><br><span class="line">  &#125;,</span><br><span class="line">  dec:&#123;</span><br><span class="line">    type:<span class="built_in">String</span>,</span><br><span class="line">    match: <span class="regexp">/Book/g</span>,   <span class="comment">//正则验证，字符串中存在Book 才能保存</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>自定义验证器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> orderSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">  desc: &#123;</span><br><span class="line">    type:<span class="built_in">String</span>,</span><br><span class="line">    validate:<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> desc.length &gt;= <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><ul><li>文档中间件：init/validate/save/remove</li><li>查询中间件：count/find/findOne/findOneAndRemove/findOneAndUpdate/update</li></ul><h3 id="集合交叉引用"><a href="#集合交叉引用" class="headerlink" title="集合交叉引用"></a>集合交叉引用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">const</span> Schema = mongoose.Schema</span><br><span class="line"><span class="keyword">const</span> &#123;ObjectId, Mixed&#125; = Schema.Types</span><br><span class="line">mongoose.connect(<span class="string">"mongodb://localhost:27017/news"</span>, &#123;<span class="attr">useNewUrlParser</span>:<span class="literal">true</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Connection Error:'</span> + err)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Connection success!'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> User = mongoose.model(<span class="string">'User'</span>, &#123;</span><br><span class="line">  user:<span class="built_in">String</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> Artical = mongoose.model(<span class="string">'Artical'</span>, &#123;</span><br><span class="line">  title:<span class="built_in">String</span>,</span><br><span class="line">  author:&#123;</span><br><span class="line">    type:ObjectId,</span><br><span class="line">    ref:<span class="string">'User'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">new</span> User(&#123;</span><br><span class="line">  user:<span class="string">'ye'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> artical = <span class="keyword">new</span> Artical(&#123;</span><br><span class="line">  title: <span class="string">'标题'</span>,</span><br><span class="line">  author: user</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">user.save(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.log(err)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'user save success'</span>)</span><br><span class="line">  artical.save(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.log(err)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'artical save success'</span>)</span><br><span class="line">    Artical.findOne(&#123;&#125;).populate(<span class="string">'author'</span>).exec(<span class="function"><span class="keyword">function</span>(<span class="params">err, doc</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(doc)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongoose </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>puppeteer安装</title>
      <link href="/2018/09/24/puppeteer%E5%AE%89%E8%A3%85/"/>
      <url>/2018/09/24/puppeteer%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<p>puppeteer 在执行安装的过程中需要执行install.js，这里会下载Chromium，翻墙也下载失败，导致安装不成功，官网建议是进行跳过，解决办法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm i --save puppeteer --ignore-scripts</span><br><span class="line"><span class="comment">#忽略 puppeteer js脚本的执行</span></span><br></pre></td></tr></table></figure><h3 id="手动下载-Chromium"><a href="#手动下载-Chromium" class="headerlink" title="手动下载 Chromium"></a>手动下载 Chromium</h3><p><a href="https://download-chromium.appspot.com/" target="_blank" rel="noopener">Chromium 下载</a></p><p>地址会根据系统来下载对应的 安装文件。</p><p>mac环境下载完毕后，把Chromium复制在项目的根目录</p><p>测试是否安装成功<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">'puppeteer'</span>)</span><br><span class="line"></span><br><span class="line">;<span class="function">(<span class="params"><span class="keyword">async</span> (</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch(&#123;</span><br><span class="line">    executablePath:   <span class="string">'./chromium/Chromium.app/Contents/MacOS/Chromium'</span>,</span><br><span class="line">    <span class="comment">//自定义程序地址</span></span><br><span class="line">    </span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage();</span><br><span class="line">  <span class="keyword">await</span> page.goto(<span class="string">'https://y.qq.com'</span>);</span><br><span class="line">  <span class="keyword">await</span> page.screenshot(&#123;<span class="attr">path</span>:<span class="string">'yqq.png'</span>&#125;);</span><br><span class="line">  browser.close();</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></p><p>puppeteer.launch 参数说明</p><ul><li>executablePath：运行Chromium或Chrome可执行文件的路径</li><li>headless：true为不打开浏览器执行，浏览器运行在内存中，默认为true</li><li>timeout： 等待浏览器实例启动的最长时间（以毫秒为单位）。默认为30000（30秒）。通过0禁用超时</li><li>args： 传递给浏览器实例的其他参数</li></ul>]]></content>
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> puppeteer </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用 async 控制并发数量</title>
      <link href="/2018/09/24/async%E6%8E%A7%E5%88%B6%E5%B9%B6%E5%8F%91%E6%95%B0%E9%87%8F/"/>
      <url>/2018/09/24/async%E6%8E%A7%E5%88%B6%E5%B9%B6%E5%8F%91%E6%95%B0%E9%87%8F/</url>
      <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> eventproxy = <span class="built_in">require</span>(<span class="string">'eventproxy'</span>)</span><br><span class="line"><span class="keyword">const</span> superagent = <span class="built_in">require</span>(<span class="string">'superagent'</span>)</span><br><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">async</span> = <span class="built_in">require</span>(<span class="string">'async'</span>)</span><br><span class="line"><span class="keyword">const</span> ep = <span class="keyword">new</span> eventproxy()</span><br><span class="line"><span class="keyword">const</span> cnodeUrl = <span class="string">'https://cnodejs.org'</span></span><br><span class="line"><span class="keyword">const</span> topicUrls = [];</span><br><span class="line">superagent.get(cnodeUrl)</span><br><span class="line">  .end(<span class="function"><span class="keyword">function</span> (<span class="params">err, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">console</span>.error(error)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> topicUrls = [];</span><br><span class="line">    <span class="keyword">const</span> $ = cheerio.load(res.text);</span><br><span class="line">    $(<span class="string">'#topic_list .topic_title'</span>).each(<span class="function">(<span class="params">index, item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> href = url.resolve(cnodeUrl, $(item).attr(<span class="string">'href'</span>))</span><br><span class="line">      topicUrls.push(href)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(topicUrls.length)</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">async</span>.mapLimit(topicUrls, <span class="number">6</span>, <span class="function"><span class="keyword">function</span> (<span class="params">url, callback</span>) </span>&#123;</span><br><span class="line">      count++</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`现在的并发数<span class="subst">$&#123;count&#125;</span>`</span>)</span><br><span class="line">      superagent.get(url)</span><br><span class="line">        .end(<span class="function"><span class="keyword">function</span> (<span class="params">err, res</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">`fetch faild <span class="subst">$&#123;err.status&#125;</span>`</span>)</span><br><span class="line">          count--</span><br><span class="line">          callback(<span class="literal">null</span>, [url, res.text])</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.log(err)</span><br><span class="line">      result = result.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> $ = cheerio.load(item[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> (&#123;</span><br><span class="line">          title:$(<span class="string">'.topic_full_title'</span>).text().trim(),</span><br><span class="line">          url:item[<span class="number">0</span>],</span><br><span class="line">          comment1:$(<span class="string">'.reply_content'</span>).eq(<span class="number">0</span>).text().trim(),</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="built_in">console</span>.log(result)</span><br><span class="line">      <span class="built_in">console</span>.log(result.length)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> async </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>正则表达式</title>
      <link href="/2018/09/24/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2018/09/24/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="语法介绍"><a href="#语法介绍" class="headerlink" title="语法介绍"></a>语法介绍</h3><h5 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h5><ul><li><code>.</code> 匹配除换行符以外的任意字符</li><li><code>\w</code> 匹配字母或数字或下划线或汉字</li><li><code>\s</code> 匹配任意的空白符</li><li><code>\d</code> 匹配数字</li><li><code>\b</code> 匹配单词的开始或结束</li><li><code>^</code> 匹配字符串的开始</li><li><code>$</code> 匹配字符串的结束</li></ul><h5 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h5><ul><li><code>*</code> 重复零次或更多次</li><li><code>+</code> 重复一次或更多次</li><li><code>?</code> 重复零次或一次</li><li><code>{n}</code> 重复n次</li><li><code>{n,}</code> 重复n次或更多次</li><li><code>{n,m}</code> 重复n到m次</li></ul><h5 id="反义符"><a href="#反义符" class="headerlink" title="反义符"></a>反义符</h5><ul><li><code>\W</code> 匹配任意不是字母，数字，下划线，汉字的字符</li><li><code>\S</code> 匹配任意不是空白符的字符</li><li><code>\D</code> 匹配任意非数字的字符</li><li><code>\B</code> 配不是单词开头或结束的位置</li><li><code>[^x]</code> 匹配除了x以外的任意字符</li><li><code>[^aeiou]</code> 匹配除了aeiou这几个字母以外的任意字符</li></ul><p>参考 <a href="http://deerchao.net/tutorials/regex/regex.htm#mission" target="_blank" rel="noopener">30分钟正则入门</a></p>]]></content>
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>常用命令</title>
      <link href="/2018/09/24/bash-command/"/>
      <url>/2018/09/24/bash-command/</url>
      <content type="html"><![CDATA[<ul><li>升级react-native <code>react-native-git-upgrade</code>,直接升级到最新版本。升级到指定的版本 <code>react-native-git-upgrade X.Y.Z</code>。<ul><li>升级时遇到的<a href="https://github.com/facebook/react-native/issues/11578" target="_blank" rel="noopener">问题</a> ,删除掉 <code>&quot;react-native-camera&quot;: &quot;git+https://github.com/lwansbrough/react-native-camera.git&quot;,</code> 更新完成后，再安装 <code>react-native-camera</code></li></ul></li><li><code>npm outdated</code> 查看有哪些包可更新</li><li><code>npm-check -u</code> 查看有哪些包可更新</li><li><code>npm list -g --depth 0</code> 查看全局安装的包(<code>depth 0</code> 是只显示最顶层的包，不显示下面的依赖包)</li><li><code>npm update</code> 升级所有更新包,npm 2.6.1后才支持</li><li><code>yarn upgrade react-native-modalbox</code> 升级包</li><li><code>which react-native</code> 查看包的路径</li><li><code>mono --arch=32 Fiddler.exe</code> 打开exe文件</li><li><code>lsof -i:端口号</code> <code>kill -9 PID</code>杀死进程</li><li>git 版本回滚 <code>git reset --hard HEAD~0</code></li><li><code>forever start</code> 你的脚本文件(如server.js)</li><li><code>forever list</code> 查看所有 forever 运行的进程</li><li><code>forever stop uid</code> 停止运行指定 uid 的进程</li><li><code>control + D</code> 断开 ssh 连接</li></ul>]]></content>
      
      
        <tags>
            
            <tag> bash </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo相关</title>
      <link href="/2018/09/24/hexo/"/>
      <url>/2018/09/24/hexo/</url>
      <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate --deploy <span class="comment">#自动部署</span></span><br><span class="line">hexo g &amp;&amp; hexo d <span class="comment">#部署到github</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
